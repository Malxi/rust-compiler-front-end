functor RustLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Rust_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* rust.yacc *)
open DataTypes
fun yaccLog(msg) = ErrorMsg.yaccLog (msg)


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\011\002\004\000\038\002\008\000\038\002\009\000\038\002\
\\011\000\038\002\014\000\038\002\019\000\038\002\022\000\038\002\
\\027\000\038\002\028\000\038\002\030\000\038\002\032\000\038\002\
\\033\000\038\002\034\000\038\002\053\000\038\002\109\000\038\002\
\\113\000\011\002\000\000\
\\001\000\001\000\011\002\004\000\038\002\008\000\038\002\009\000\038\002\
\\011\000\038\002\014\000\038\002\019\000\038\002\022\000\038\002\
\\027\000\038\002\028\000\038\002\030\000\038\002\032\000\038\002\
\\033\000\038\002\034\000\038\002\053\000\038\002\109\000\038\002\
\\120\000\009\000\000\000\
\\001\000\002\000\162\000\104\000\161\000\000\000\
\\001\000\004\000\038\002\008\000\038\002\009\000\038\002\011\000\038\002\
\\014\000\038\002\019\000\038\002\022\000\038\002\027\000\038\002\
\\028\000\038\002\030\000\038\002\032\000\038\002\033\000\038\002\
\\034\000\038\002\053\000\038\002\109\000\038\002\113\000\011\002\
\\120\000\009\000\000\000\
\\001\000\004\000\038\002\009\000\038\002\011\000\038\002\022\000\038\002\
\\025\000\038\002\029\000\038\002\033\000\038\002\055\000\038\002\
\\072\000\038\002\106\000\038\002\109\000\038\002\110\000\038\002\
\\113\000\239\002\000\000\
\\001\000\004\000\038\002\009\000\038\002\011\000\038\002\022\000\038\002\
\\025\000\038\002\029\000\038\002\033\000\038\002\055\000\038\002\
\\072\000\038\002\106\000\038\002\109\000\038\002\110\000\038\002\
\\113\000\239\002\120\000\009\000\000\000\
\\001\000\004\000\038\002\009\000\038\002\011\000\038\002\025\000\057\000\
\\029\000\056\000\032\000\038\002\033\000\038\002\055\000\055\000\
\\072\000\053\000\106\000\080\000\109\000\038\002\110\000\051\000\
\\112\000\038\002\113\000\186\002\000\000\
\\001\000\004\000\038\000\008\000\037\000\009\000\036\000\011\000\142\002\
\\014\000\035\000\019\000\034\000\022\000\033\000\027\000\032\000\
\\028\000\031\000\030\000\109\002\032\000\030\000\033\000\029\000\
\\034\000\028\000\053\000\027\000\109\000\026\000\000\000\
\\001\000\004\000\038\000\008\000\037\000\009\000\036\000\011\000\142\002\
\\014\000\035\000\019\000\034\000\027\000\032\000\028\000\031\000\
\\030\000\109\002\032\000\030\000\033\000\029\000\034\000\028\000\
\\053\000\027\000\000\000\
\\001\000\004\000\038\000\009\000\120\001\011\000\142\002\022\000\033\000\
\\025\000\038\002\029\000\038\002\032\000\016\002\033\000\118\001\
\\055\000\038\002\072\000\038\002\106\000\038\002\109\000\038\002\
\\110\000\038\002\113\000\249\002\000\000\
\\001\000\004\000\038\000\009\000\120\001\011\000\142\002\022\000\033\000\
\\025\000\038\002\029\000\038\002\032\000\016\002\033\000\118\001\
\\055\000\038\002\072\000\038\002\106\000\038\002\109\000\038\002\
\\110\000\038\002\113\000\249\002\120\000\009\000\000\000\
\\001\000\009\000\059\000\011\000\137\002\014\000\058\000\030\000\108\002\000\000\
\\001\000\011\000\140\002\057\000\073\000\061\000\072\000\072\000\071\000\
\\112\000\144\002\000\000\
\\001\000\011\000\141\002\112\000\143\002\000\000\
\\001\000\011\000\042\000\000\000\
\\001\000\011\000\096\001\027\000\095\001\000\000\
\\001\000\011\000\159\001\000\000\
\\001\000\011\000\171\001\000\000\
\\001\000\012\000\231\002\035\000\055\002\112\000\055\002\000\000\
\\001\000\012\000\152\000\000\000\
\\001\000\012\000\180\000\000\000\
\\001\000\012\000\195\000\000\000\
\\001\000\012\000\223\000\054\000\222\000\055\000\077\002\065\000\221\000\
\\090\000\066\002\104\000\066\002\112\000\066\002\000\000\
\\001\000\012\000\241\000\000\000\
\\001\000\015\000\103\000\025\000\102\000\029\000\101\000\072\000\100\000\000\000\
\\001\000\021\000\063\000\055\000\062\000\000\000\
\\001\000\021\000\149\001\025\000\103\002\055\000\228\000\074\000\220\001\
\\117\000\148\002\000\000\
\\001\000\021\000\149\001\025\000\103\002\055\000\221\001\074\000\220\001\
\\117\000\198\002\000\000\
\\001\000\022\000\038\002\055\000\038\002\109\000\038\002\113\000\100\002\000\000\
\\001\000\022\000\038\002\055\000\038\002\109\000\038\002\113\000\159\002\000\000\
\\001\000\022\000\038\002\055\000\038\002\109\000\038\002\117\000\100\002\000\000\
\\001\000\022\000\038\002\055\000\038\002\109\000\038\002\117\000\167\002\000\000\
\\001\000\022\000\033\000\055\000\145\000\109\000\026\000\000\000\
\\001\000\022\000\033\000\055\000\029\001\109\000\026\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\057\000\171\000\
\\072\000\053\000\106\000\080\000\110\000\051\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\057\000\171\000\
\\072\000\053\000\106\000\080\000\110\000\051\000\117\000\170\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\069\000\054\000\
\\072\000\053\000\106\000\052\000\110\000\051\000\112\000\050\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\069\000\054\000\
\\072\000\053\000\106\000\052\000\110\000\051\000\112\000\050\000\
\\113\000\089\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\069\000\093\000\
\\072\000\053\000\110\000\051\000\112\000\050\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\069\000\135\000\
\\072\000\053\000\110\000\051\000\112\000\050\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\072\000\053\000\
\\106\000\080\000\109\000\026\000\110\000\051\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\072\000\053\000\
\\106\000\080\000\110\000\051\000\000\000\
\\001\000\025\000\057\000\029\000\056\000\055\000\055\000\072\000\053\000\
\\110\000\051\000\000\000\
\\001\000\025\000\230\001\000\000\
\\001\000\025\000\244\001\000\000\
\\001\000\030\000\041\000\000\000\
\\001\000\032\000\030\000\000\000\
\\001\000\035\000\132\000\000\000\
\\001\000\055\000\038\002\109\000\038\002\113\000\100\002\000\000\
\\001\000\055\000\038\002\109\000\038\002\113\000\174\002\000\000\
\\001\000\055\000\040\002\065\000\040\002\093\000\082\002\109\000\026\000\000\000\
\\001\000\055\000\040\002\065\000\040\002\093\000\087\002\109\000\026\000\000\000\
\\001\000\055\000\040\002\093\000\084\002\109\000\026\000\000\000\
\\001\000\055\000\040\002\093\000\086\002\109\000\026\000\000\000\
\\001\000\055\000\045\000\000\000\
\\001\000\055\000\060\000\000\000\
\\001\000\055\000\061\000\000\000\
\\001\000\055\000\065\000\000\000\
\\001\000\055\000\074\000\000\000\
\\001\000\055\000\081\000\000\000\
\\001\000\055\000\082\000\000\000\
\\001\000\055\000\099\000\000\000\
\\001\000\055\000\109\000\073\000\108\000\000\000\
\\001\000\055\000\118\000\000\000\
\\001\000\055\000\136\000\000\000\
\\001\000\055\000\140\000\000\000\
\\001\000\055\000\140\000\073\000\139\000\000\000\
\\001\000\055\000\145\000\000\000\
\\001\000\055\000\156\000\000\000\
\\001\000\055\000\156\000\065\000\155\000\000\000\
\\001\000\055\000\205\000\000\000\
\\001\000\055\000\054\001\109\000\026\000\000\000\
\\001\000\055\000\077\001\000\000\
\\001\000\055\000\150\001\000\000\
\\001\000\055\000\161\001\000\000\
\\001\000\055\000\175\001\000\000\
\\001\000\055\000\179\001\000\000\
\\001\000\055\000\185\001\000\000\
\\001\000\057\000\171\000\000\000\
\\001\000\062\000\250\000\000\000\
\\001\000\065\000\155\000\000\000\
\\001\000\072\000\090\000\000\000\
\\001\000\073\000\108\001\106\000\124\000\000\000\
\\001\000\090\000\182\000\000\000\
\\001\000\090\000\189\000\000\000\
\\001\000\090\000\207\000\000\000\
\\001\000\090\000\251\000\000\000\
\\001\000\090\000\204\001\104\000\203\001\000\000\
\\001\000\093\000\159\000\000\000\
\\001\000\093\000\126\001\103\000\125\001\000\000\
\\001\000\094\000\022\001\000\000\
\\001\000\103\000\055\002\105\000\054\002\117\000\055\002\000\000\
\\001\000\103\000\015\001\000\000\
\\001\000\104\000\085\000\000\000\
\\001\000\104\000\105\000\112\000\104\000\000\000\
\\001\000\104\000\184\000\112\000\183\000\000\000\
\\001\000\104\000\008\001\000\000\
\\001\000\104\000\035\001\000\000\
\\001\000\104\000\041\001\000\000\
\\001\000\104\000\055\001\000\000\
\\001\000\104\000\083\001\000\000\
\\001\000\104\000\085\001\000\000\
\\001\000\104\000\156\001\000\000\
\\001\000\104\000\158\001\112\000\117\001\000\000\
\\001\000\104\000\191\001\000\000\
\\001\000\104\000\206\001\000\000\
\\001\000\104\000\237\001\000\000\
\\001\000\104\000\251\001\000\000\
\\001\000\104\000\252\001\000\000\
\\001\000\105\000\098\000\000\000\
\\001\000\105\000\120\000\000\000\
\\001\000\105\000\146\000\000\000\
\\001\000\105\000\025\001\000\000\
\\001\000\105\000\031\001\000\000\
\\001\000\105\000\078\001\000\000\
\\001\000\105\000\079\001\000\000\
\\001\000\105\000\131\001\000\000\
\\001\000\105\000\182\001\000\000\
\\001\000\105\000\187\001\000\000\
\\001\000\105\000\210\001\000\000\
\\001\000\105\000\211\001\000\000\
\\001\000\105\000\235\001\000\000\
\\001\000\106\000\124\000\117\000\191\000\000\000\
\\001\000\112\000\117\000\000\000\
\\001\000\112\000\176\000\000\000\
\\001\000\112\000\194\000\000\000\
\\001\000\112\000\206\000\000\000\
\\001\000\112\000\016\001\000\000\
\\001\000\112\000\043\001\000\000\
\\001\000\112\000\081\001\000\000\
\\001\000\112\000\091\001\000\000\
\\001\000\112\000\117\001\000\000\
\\001\000\112\000\135\001\000\000\
\\001\000\113\000\238\000\000\000\
\\001\000\113\000\252\000\000\000\
\\001\000\113\000\027\001\000\000\
\\001\000\113\000\036\001\000\000\
\\001\000\113\000\053\001\000\000\
\\001\000\113\000\088\001\000\000\
\\001\000\113\000\107\001\000\000\
\\001\000\113\000\170\001\000\000\
\\001\000\113\000\178\001\000\000\
\\001\000\113\000\183\001\000\000\
\\001\000\113\000\186\001\000\000\
\\001\000\113\000\190\001\000\000\
\\001\000\113\000\193\001\000\000\
\\001\000\114\000\039\000\000\000\
\\001\000\114\000\044\000\000\000\
\\001\000\115\000\126\000\000\000\
\\001\000\115\000\129\000\000\000\
\\001\000\116\000\175\000\000\000\
\\001\000\116\000\188\001\000\000\
\\001\000\116\000\202\001\000\000\
\\001\000\116\000\205\001\000\000\
\\001\000\117\000\147\000\000\000\
\\001\000\117\000\148\000\000\000\
\\001\000\117\000\149\000\000\000\
\\001\000\117\000\210\000\000\000\
\\001\000\117\000\245\000\000\000\
\\001\000\117\000\024\001\000\000\
\\001\000\117\000\105\001\000\000\
\\001\000\117\000\123\001\000\000\
\\001\000\117\000\164\001\000\000\
\\001\000\117\000\177\001\000\000\
\\001\000\117\000\207\001\000\000\
\\001\000\117\000\209\001\000\000\
\\001\000\117\000\233\001\000\000\
\\001\000\117\000\254\001\000\000\
\\001\000\117\000\001\002\000\000\
\\008\002\000\000\
\\009\002\000\000\
\\010\002\000\000\
\\012\002\000\000\
\\013\002\000\000\
\\014\002\000\000\
\\015\002\000\000\
\\016\002\022\000\033\000\025\000\057\000\029\000\056\000\055\000\055\000\
\\072\000\053\000\106\000\080\000\109\000\026\000\110\000\051\000\000\000\
\\016\002\022\000\033\000\109\000\026\000\000\000\
\\017\002\116\000\064\000\000\000\
\\018\002\000\000\
\\019\002\000\000\
\\020\002\000\000\
\\021\002\000\000\
\\022\002\002\000\087\000\106\000\086\000\000\000\
\\023\002\000\000\
\\024\002\000\000\
\\025\002\000\000\
\\026\002\000\000\
\\027\002\000\000\
\\028\002\000\000\
\\029\002\000\000\
\\030\002\000\000\
\\031\002\000\000\
\\032\002\000\000\
\\033\002\000\000\
\\035\002\000\000\
\\036\002\000\000\
\\036\002\121\000\004\000\000\000\
\\037\002\000\000\
\\038\002\000\000\
\\038\002\113\000\007\001\000\000\
\\039\002\000\000\
\\040\002\093\000\068\001\109\000\026\000\000\000\
\\040\002\109\000\026\000\000\000\
\\041\002\000\000\
\\042\002\000\000\
\\043\002\000\000\
\\044\002\000\000\
\\045\002\000\000\
\\046\002\090\000\125\000\106\000\124\000\116\000\123\000\000\000\
\\047\002\000\000\
\\048\002\103\000\014\001\000\000\
\\049\002\000\000\
\\050\002\116\000\209\000\000\000\
\\051\002\000\000\
\\052\002\000\000\
\\053\002\000\000\
\\054\002\000\000\
\\055\002\000\000\
\\056\002\000\000\
\\057\002\000\000\
\\058\002\000\000\
\\059\002\000\000\
\\060\002\000\000\
\\061\002\000\000\
\\062\002\000\000\
\\063\002\000\000\
\\064\002\000\000\
\\065\002\035\000\132\000\000\000\
\\065\002\035\000\132\000\116\000\143\000\000\000\
\\067\002\103\000\032\001\000\000\
\\068\002\000\000\
\\069\002\000\000\
\\070\002\000\000\
\\071\002\000\000\
\\072\002\000\000\
\\073\002\000\000\
\\074\002\000\000\
\\075\002\094\000\068\000\000\000\
\\076\002\000\000\
\\077\002\012\000\223\000\000\000\
\\077\002\012\000\223\000\111\000\020\001\000\000\
\\078\002\000\000\
\\079\002\000\000\
\\080\002\000\000\
\\081\002\103\000\158\000\000\000\
\\083\002\103\000\157\000\000\000\
\\085\002\103\000\004\001\000\000\
\\088\002\000\000\
\\089\002\000\000\
\\090\002\000\000\
\\091\002\000\000\
\\092\002\000\000\
\\093\002\000\000\
\\094\002\105\000\197\000\000\000\
\\095\002\090\000\002\001\000\000\
\\096\002\000\000\
\\097\002\012\000\223\000\054\000\222\000\055\000\140\000\065\000\221\000\
\\111\000\220\000\116\000\219\000\000\000\
\\098\002\000\000\
\\099\002\105\000\199\000\000\000\
\\100\002\025\000\057\000\029\000\056\000\055\000\055\000\069\000\054\000\
\\072\000\053\000\106\000\052\000\110\000\051\000\112\000\050\000\000\000\
\\100\002\055\000\228\000\000\000\
\\100\002\055\000\201\001\098\000\200\001\101\000\241\001\000\000\
\\100\002\055\000\221\001\000\000\
\\101\002\103\000\179\000\000\000\
\\101\002\103\000\039\001\000\000\
\\101\002\103\000\070\001\000\000\
\\101\002\103\000\076\001\000\000\
\\101\002\103\000\098\001\000\000\
\\101\002\103\000\226\001\000\000\
\\101\002\103\000\246\001\000\000\
\\102\002\000\000\
\\103\002\021\000\149\001\000\000\
\\110\002\000\000\
\\111\002\000\000\
\\112\002\000\000\
\\113\002\000\000\
\\114\002\000\000\
\\115\002\000\000\
\\116\002\000\000\
\\117\002\000\000\
\\118\002\000\000\
\\119\002\000\000\
\\120\002\000\000\
\\121\002\000\000\
\\122\002\000\000\
\\123\002\000\000\
\\124\002\000\000\
\\125\002\000\000\
\\126\002\000\000\
\\127\002\000\000\
\\128\002\000\000\
\\129\002\000\000\
\\130\002\000\000\
\\131\002\009\000\077\000\033\000\076\000\055\000\075\000\000\000\
\\131\002\009\000\077\000\033\000\076\000\055\000\163\001\000\000\
\\132\002\009\000\121\000\000\000\
\\133\002\057\000\073\000\061\000\072\000\000\000\
\\134\002\000\000\
\\135\002\057\000\073\000\061\000\072\000\000\000\
\\136\002\000\000\
\\137\002\009\000\059\000\000\000\
\\138\002\057\000\073\000\061\000\072\000\000\000\
\\139\002\000\000\
\\140\002\057\000\073\000\061\000\072\000\000\000\
\\141\002\000\000\
\\142\002\004\000\038\000\009\000\120\001\033\000\118\001\000\000\
\\142\002\004\000\121\001\009\000\120\001\032\000\119\001\033\000\118\001\
\\109\000\026\000\112\000\117\001\000\000\
\\145\002\000\000\
\\146\002\000\000\
\\147\002\000\000\
\\148\002\055\000\228\000\000\000\
\\149\002\000\000\
\\150\002\000\000\
\\151\002\000\000\
\\152\002\000\000\
\\153\002\000\000\
\\154\002\107\000\073\001\000\000\
\\155\002\000\000\
\\156\002\000\000\
\\157\002\000\000\
\\158\002\000\000\
\\160\002\000\000\
\\161\002\000\000\
\\162\002\000\000\
\\163\002\000\000\
\\164\002\000\000\
\\165\002\000\000\
\\166\002\000\000\
\\168\002\000\000\
\\169\002\000\000\
\\170\002\000\000\
\\171\002\000\000\
\\172\002\000\000\
\\173\002\000\000\
\\175\002\000\000\
\\176\002\000\000\
\\177\002\000\000\
\\178\002\000\000\
\\179\002\000\000\
\\180\002\000\000\
\\181\002\090\000\104\001\112\000\103\001\116\000\102\001\000\000\
\\182\002\000\000\
\\183\002\000\000\
\\184\002\000\000\
\\185\002\000\000\
\\187\002\000\000\
\\188\002\000\000\
\\189\002\000\000\
\\190\002\000\000\
\\191\002\000\000\
\\192\002\000\000\
\\193\002\000\000\
\\194\002\000\000\
\\195\002\000\000\
\\196\002\000\000\
\\197\002\000\000\
\\199\002\000\000\
\\200\002\000\000\
\\201\002\000\000\
\\202\002\000\000\
\\203\002\000\000\
\\204\002\000\000\
\\205\002\000\000\
\\206\002\000\000\
\\207\002\000\000\
\\208\002\000\000\
\\209\002\105\000\174\000\000\000\
\\210\002\000\000\
\\211\002\012\000\223\000\054\000\222\000\055\000\140\000\065\000\221\000\
\\111\000\220\000\116\000\219\000\000\000\
\\212\002\067\000\062\001\000\000\
\\213\002\012\000\223\000\054\000\222\000\055\000\140\000\065\000\221\000\
\\111\000\220\000\116\000\219\000\000\000\
\\214\002\000\000\
\\215\002\000\000\
\\216\002\000\000\
\\217\002\000\000\
\\218\002\054\000\222\000\065\000\221\000\000\000\
\\219\002\067\000\092\001\000\000\
\\220\002\000\000\
\\221\002\000\000\
\\224\002\000\000\
\\225\002\000\000\
\\226\002\000\000\
\\227\002\000\000\
\\228\002\000\000\
\\229\002\000\000\
\\230\002\000\000\
\\231\002\000\000\
\\232\002\000\000\
\\233\002\105\000\243\001\000\000\
\\234\002\000\000\
\\235\002\054\000\222\000\065\000\221\000\000\000\
\\236\002\000\000\
\\237\002\000\000\
\\238\002\000\000\
\\240\002\000\000\
\\241\002\000\000\
\\242\002\000\000\
\\243\002\000\000\
\\244\002\000\000\
\\245\002\000\000\
\\246\002\000\000\
\\247\002\000\000\
\\248\002\000\000\
\\250\002\000\000\
\\251\002\000\000\
\\252\002\000\000\
\\253\002\000\000\
\\254\002\000\000\
\\255\002\000\000\
\\000\003\000\000\
\\001\003\000\000\
\\002\003\000\000\
\\003\003\120\000\009\000\000\000\
\\004\003\000\000\
\\005\003\000\000\
\\006\003\000\000\
\\007\003\000\000\
\\008\003\000\000\
\\009\003\000\000\
\\010\003\055\000\201\001\098\000\200\001\000\000\
\\011\003\000\000\
\\012\003\000\000\
\\013\003\000\000\
\\014\003\000\000\
\\015\003\000\000\
\\016\003\000\000\
\\017\003\000\000\
\\018\003\120\000\009\000\000\000\
\\019\003\000\000\
\"
val actionRowNumbers =
"\198\000\002\000\197\000\001\000\
\\196\000\008\000\171\000\147\000\
\\002\000\172\000\035\001\034\001\
\\033\001\029\001\024\001\026\001\
\\025\001\046\000\015\000\023\001\
\\174\000\009\000\173\000\199\000\
\\148\000\055\000\037\000\012\000\
\\056\000\057\000\026\000\179\000\
\\058\000\239\000\013\000\059\000\
\\039\001\042\000\170\000\060\000\
\\061\000\175\000\042\000\239\000\
\\189\000\094\000\220\000\184\000\
\\038\000\082\000\039\000\226\000\
\\186\000\223\000\224\000\225\000\
\\239\000\047\001\239\000\239\000\
\\110\000\062\000\025\000\095\000\
\\063\000\238\000\052\000\124\000\
\\014\000\064\000\054\001\053\001\
\\239\000\111\000\041\001\042\001\
\\210\000\149\000\043\000\239\000\
\\239\000\150\000\229\000\022\001\
\\040\000\065\000\195\000\193\000\
\\227\000\190\000\221\000\187\000\
\\067\000\048\001\229\000\230\000\
\\068\000\112\000\155\000\156\000\
\\157\000\042\000\197\000\018\001\
\\020\000\229\000\066\000\019\000\
\\070\000\251\000\247\000\249\000\
\\246\000\089\000\202\000\197\000\
\\003\000\229\000\068\000\044\001\
\\043\001\036\000\043\000\079\000\
\\205\000\112\001\151\000\206\000\
\\125\000\228\000\233\000\191\000\
\\222\000\188\000\185\000\009\001\
\\021\000\066\000\132\001\084\000\
\\096\000\032\000\085\000\219\000\
\\068\000\180\000\182\000\181\000\
\\123\000\004\000\068\000\126\000\
\\022\000\255\000\004\001\053\000\
\\051\000\245\000\158\001\020\001\
\\071\000\127\000\086\000\045\001\
\\216\000\214\000\158\000\215\000\
\\209\000\217\000\207\000\229\000\
\\114\001\056\001\200\000\023\000\
\\134\000\005\001\068\000\024\000\
\\068\000\030\000\065\001\159\000\
\\076\001\073\001\033\000\080\000\
\\087\000\183\000\135\000\229\000\
\\197\000\068\000\253\000\124\001\
\\000\001\002\001\069\000\252\000\
\\248\000\250\000\201\000\097\000\
\\050\000\080\000\212\000\093\000\
\\208\000\128\000\127\001\066\000\
\\120\001\119\001\118\001\113\001\
\\111\001\242\000\241\000\125\001\
\\126\001\091\000\059\001\160\000\
\\055\001\113\000\218\000\069\001\
\\136\000\034\000\068\000\240\000\
\\114\000\235\000\234\000\231\000\
\\192\000\194\000\229\000\068\000\
\\098\000\137\000\066\001\229\000\
\\010\001\078\001\068\000\099\000\
\\174\001\080\000\019\001\129\000\
\\006\000\229\000\121\001\254\000\
\\068\000\003\001\054\000\157\001\
\\178\000\156\001\021\001\082\001\
\\138\000\079\001\072\000\100\000\
\\211\000\035\000\007\000\128\001\
\\115\001\066\000\241\000\066\000\
\\203\000\011\001\062\001\068\000\
\\012\001\028\001\073\000\115\000\
\\116\000\124\001\232\000\130\000\
\\229\000\036\001\064\001\101\000\
\\074\001\031\000\077\001\031\001\
\\102\000\197\000\005\000\139\000\
\\177\000\131\000\122\001\001\001\
\\016\000\176\000\013\001\027\001\
\\086\001\037\001\161\000\095\001\
\\007\000\140\000\083\000\052\001\
\\116\001\162\000\066\000\129\001\
\\081\000\090\000\244\000\057\001\
\\006\001\229\000\061\001\068\000\
\\060\001\067\001\029\000\117\000\
\\068\000\114\001\236\000\197\000\
\\133\000\072\001\075\001\030\001\
\\011\000\139\001\138\001\140\001\
\\051\001\197\000\123\001\160\001\
\\159\001\017\001\074\000\080\001\
\\049\000\085\001\084\001\083\001\
\\032\000\030\000\080\000\214\000\
\\090\001\032\001\155\001\103\000\
\\104\000\094\001\093\001\092\001\
\\091\001\099\001\017\000\197\000\
\\046\001\075\000\049\001\040\001\
\\117\001\130\001\163\000\204\000\
\\243\000\058\001\132\000\063\001\
\\068\001\068\000\071\001\237\000\
\\011\000\197\000\153\001\010\000\
\\141\000\151\001\018\000\152\001\
\\047\000\041\000\143\001\141\001\
\\142\001\011\000\076\000\016\001\
\\239\000\081\001\164\000\142\000\
\\089\001\213\000\098\001\097\001\
\\096\001\077\000\173\001\112\001\
\\050\001\118\000\131\001\038\001\
\\070\001\143\000\011\000\148\001\
\\144\001\078\000\150\001\149\001\
\\144\000\119\000\152\000\087\001\
\\088\001\239\000\145\000\105\000\
\\068\000\146\001\146\000\239\000\
\\145\001\068\000\165\001\153\000\
\\172\001\110\001\088\000\147\001\
\\154\000\106\000\165\000\168\001\
\\164\001\166\000\120\000\121\000\
\\028\000\108\001\080\000\027\000\
\\161\001\062\001\014\001\062\001\
\\068\000\068\000\044\000\017\001\
\\105\001\167\000\105\001\101\001\
\\107\001\122\000\136\001\092\000\
\\107\000\059\001\229\000\166\001\
\\007\001\229\000\170\001\169\001\
\\134\001\045\000\015\001\062\001\
\\015\001\068\000\137\001\109\001\
\\011\001\108\000\167\001\171\001\
\\109\000\068\000\133\001\168\000\
\\008\001\048\000\103\001\106\001\
\\169\000\163\001\162\001\135\001\
\\062\001\104\001\100\001\062\001\
\\229\000\229\000\102\001\132\000\
\\154\001\000\000"
val gotoT =
"\
\\001\000\005\002\002\000\001\000\000\000\
\\003\000\006\000\004\000\005\000\005\000\004\000\017\000\003\000\000\000\
\\002\000\008\000\000\000\
\\003\000\009\000\004\000\005\000\017\000\003\000\000\000\
\\000\000\
\\006\000\023\000\018\000\022\000\020\000\021\000\021\000\020\000\
\\053\000\019\000\054\000\018\000\055\000\017\000\067\000\016\000\
\\072\000\015\000\084\000\014\000\085\000\013\000\115\000\012\000\
\\116\000\011\000\124\000\010\000\000\000\
\\000\000\
\\000\000\
\\003\000\038\000\004\000\005\000\005\000\004\000\017\000\003\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\041\000\053\000\019\000\054\000\018\000\055\000\017\000\
\\067\000\016\000\072\000\015\000\084\000\014\000\085\000\013\000\
\\115\000\012\000\116\000\011\000\124\000\010\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\047\000\014\000\046\000\022\000\045\000\023\000\044\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\065\000\028\000\064\000\000\000\
\\056\000\068\000\057\000\067\000\000\000\
\\000\000\
\\000\000\
\\007\000\077\000\013\000\076\000\014\000\046\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\081\000\013\000\076\000\014\000\046\000\000\000\
\\027\000\065\000\028\000\082\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\047\000\014\000\046\000\022\000\086\000\023\000\044\000\000\000\
\\000\000\
\\014\000\090\000\023\000\089\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\065\000\028\000\092\000\000\000\
\\056\000\093\000\000\000\
\\027\000\065\000\028\000\094\000\000\000\
\\027\000\065\000\028\000\095\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\105\000\097\000\104\000\000\000\
\\000\000\
\\006\000\114\000\029\000\113\000\037\000\112\000\038\000\111\000\
\\040\000\110\000\042\000\109\000\052\000\108\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\065\000\028\000\117\000\000\000\
\\000\000\
\\000\000\
\\056\000\120\000\000\000\
\\000\000\
\\000\000\
\\014\000\090\000\000\000\
\\027\000\065\000\028\000\125\000\000\000\
\\027\000\065\000\028\000\126\000\000\000\
\\000\000\
\\031\000\129\000\032\000\128\000\000\000\
\\000\000\
\\014\000\132\000\023\000\131\000\000\000\
\\000\000\
\\024\000\135\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\097\000\136\000\000\000\
\\000\000\
\\031\000\129\000\032\000\139\000\000\000\
\\031\000\129\000\032\000\140\000\000\000\
\\026\000\142\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\148\000\014\000\046\000\000\000\
\\002\000\149\000\000\000\
\\000\000\
\\000\000\
\\031\000\129\000\032\000\151\000\000\000\
\\097\000\152\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\158\000\000\000\
\\000\000\
\\031\000\129\000\032\000\161\000\000\000\
\\026\000\162\000\000\000\
\\056\000\163\000\000\000\
\\000\000\
\\007\000\167\000\008\000\166\000\010\000\165\000\011\000\164\000\
\\013\000\076\000\014\000\046\000\000\000\
\\014\000\132\000\000\000\
\\011\000\170\000\000\000\
\\000\000\
\\086\000\171\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\175\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\048\000\176\000\000\000\
\\000\000\
\\097\000\179\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\186\000\073\000\185\000\074\000\184\000\075\000\183\000\000\000\
\\000\000\
\\000\000\
\\026\000\188\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\190\000\004\000\005\000\005\000\004\000\017\000\003\000\000\000\
\\026\000\191\000\000\000\
\\000\000\
\\000\000\
\\045\000\194\000\000\000\
\\047\000\196\000\000\000\
\\006\000\114\000\042\000\199\000\052\000\198\000\000\000\
\\006\000\114\000\038\000\201\000\040\000\200\000\042\000\109\000\
\\052\000\108\000\000\000\
\\000\000\
\\005\000\004\000\125\000\202\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\206\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\129\000\032\000\209\000\000\000\
\\087\000\216\000\088\000\215\000\090\000\214\000\091\000\213\000\
\\095\000\212\000\096\000\211\000\097\000\210\000\000\000\
\\025\000\225\000\058\000\224\000\059\000\223\000\060\000\222\000\000\000\
\\004\000\229\000\068\000\228\000\069\000\227\000\000\000\
\\034\000\235\000\035\000\234\000\036\000\233\000\091\000\232\000\
\\096\000\231\000\098\000\230\000\000\000\
\\000\000\
\\013\000\047\000\014\000\046\000\022\000\237\000\023\000\044\000\000\000\
\\026\000\238\000\000\000\
\\000\000\
\\026\000\240\000\000\000\
\\004\000\229\000\068\000\242\000\069\000\227\000\070\000\241\000\000\000\
\\000\000\
\\000\000\
\\076\000\244\000\000\000\
\\000\000\
\\006\000\023\000\020\000\246\000\026\000\245\000\000\000\
\\066\000\247\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\129\000\032\000\251\000\000\000\
\\002\000\252\000\000\000\
\\026\000\253\000\000\000\
\\000\000\
\\092\000\255\000\093\000\254\000\000\000\
\\000\000\
\\088\000\001\001\090\000\214\000\091\000\213\000\095\000\212\000\
\\096\000\211\000\097\000\210\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\004\001\126\000\003\001\000\000\
\\000\000\
\\004\000\010\001\077\000\009\001\078\000\008\001\080\000\007\001\000\000\
\\066\000\011\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\097\000\015\001\000\000\
\\000\000\
\\000\000\
\\089\000\016\001\000\000\
\\000\000\
\\000\000\
\\096\000\231\000\098\000\017\001\000\000\
\\096\000\231\000\098\000\019\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\061\000\021\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\071\000\024\001\000\000\
\\000\000\
\\006\000\023\000\020\000\026\001\000\000\
\\026\000\028\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\129\000\032\000\031\001\000\000\
\\026\000\032\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\129\000\032\000\035\001\000\000\
\\048\000\036\001\000\000\
\\000\000\
\\026\000\038\001\000\000\
\\000\000\
\\000\000\
\\066\000\040\001\000\000\
\\000\000\
\\000\000\
\\004\000\044\001\005\000\004\000\117\000\043\001\119\000\042\001\000\000\
\\031\000\129\000\032\000\045\001\000\000\
\\091\000\046\001\000\000\
\\000\000\
\\026\000\047\001\000\000\
\\000\000\
\\006\000\114\000\042\000\199\000\052\000\198\000\000\000\
\\000\000\
\\006\000\023\000\020\000\049\001\030\000\048\001\000\000\
\\000\000\
\\000\000\
\\079\000\050\001\000\000\
\\000\000\
\\000\000\
\\006\000\023\000\000\000\
\\000\000\
\\000\000\
\\007\000\167\000\010\000\054\001\011\000\164\000\013\000\076\000\
\\014\000\046\000\000\000\
\\004\000\059\001\013\000\058\001\014\000\046\000\099\000\057\001\
\\100\000\056\001\105\000\055\001\000\000\
\\000\000\
\\000\000\
\\097\000\061\001\000\000\
\\096\000\231\000\098\000\062\001\000\000\
\\097\000\063\001\000\000\
\\006\000\114\000\037\000\065\001\038\000\111\000\052\000\064\001\000\000\
\\048\000\067\001\000\000\
\\062\000\070\001\063\000\069\001\000\000\
\\026\000\072\001\000\000\
\\048\000\073\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\092\000\078\001\093\000\254\000\000\000\
\\000\000\
\\000\000\
\\031\000\129\000\032\000\080\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\186\000\074\000\082\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\084\001\000\000\
\\004\000\044\001\117\000\085\001\119\000\042\001\000\000\
\\000\000\
\\006\000\023\000\013\000\058\001\014\000\046\000\020\000\049\001\
\\030\000\088\001\105\000\087\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\127\000\092\001\128\000\091\001\000\000\
\\000\000\
\\048\000\095\001\000\000\
\\000\000\
\\081\000\099\001\082\000\098\001\083\000\097\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\059\001\013\000\058\001\014\000\046\000\099\000\104\001\
\\100\000\056\001\105\000\055\001\000\000\
\\000\000\
\\000\000\
\\006\000\023\000\054\000\114\001\064\000\113\001\101\000\112\001\
\\102\000\111\001\103\000\110\001\104\000\109\001\106\000\108\001\
\\107\000\107\001\000\000\
\\090\000\120\001\091\000\213\000\095\000\212\000\096\000\211\000\
\\097\000\210\000\000\000\
\\000\000\
\\097\000\122\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\225\000\060\000\125\001\000\000\
\\031\000\129\000\032\000\126\001\000\000\
\\000\000\
\\026\000\127\001\000\000\
\\000\000\
\\000\000\
\\004\000\229\000\069\000\128\001\000\000\
\\000\000\
\\026\000\130\001\000\000\
\\087\000\131\001\088\000\215\000\090\000\214\000\091\000\213\000\
\\095\000\212\000\096\000\211\000\097\000\210\000\000\000\
\\000\000\
\\002\000\132\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\141\001\005\000\004\000\020\000\049\001\030\000\140\001\
\\053\000\139\001\054\000\138\001\085\000\137\001\120\000\136\001\
\\122\000\135\001\123\000\134\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\053\000\144\001\054\000\138\001\085\000\143\001\123\000\142\001\000\000\
\\002\000\145\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\114\000\146\001\000\000\
\\000\000\
\\000\000\
\\004\000\010\001\080\000\149\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\186\000\073\000\185\000\074\000\184\000\075\000\150\001\000\000\
\\004\000\229\000\068\000\242\000\069\000\227\000\070\000\151\001\000\000\
\\066\000\152\001\000\000\
\\009\000\153\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\064\000\155\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\158\001\000\000\
\\000\000\
\\000\000\
\\056\000\160\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\114\000\038\000\201\000\052\000\064\001\000\000\
\\000\000\
\\000\000\
\\064\000\163\001\000\000\
\\000\000\
\\000\000\
\\026\000\164\001\000\000\
\\000\000\
\\000\000\
\\004\000\141\001\005\000\004\000\020\000\049\001\030\000\140\001\
\\053\000\139\001\054\000\138\001\085\000\137\001\120\000\165\001\
\\122\000\135\001\123\000\134\001\000\000\
\\002\000\166\001\000\000\
\\000\000\
\\004\000\141\001\020\000\049\001\030\000\140\001\053\000\139\001\
\\054\000\138\001\085\000\137\001\120\000\167\001\122\000\135\001\
\\123\000\134\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\084\000\170\001\000\000\
\\006\000\023\000\013\000\058\001\014\000\046\000\105\000\171\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\141\001\005\000\004\000\020\000\049\001\030\000\140\001\
\\053\000\139\001\054\000\138\001\085\000\137\001\120\000\172\001\
\\122\000\135\001\123\000\134\001\000\000\
\\000\000\
\\000\000\
\\027\000\065\000\028\000\174\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\005\000\004\000\065\000\178\001\000\000\
\\086\000\179\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\141\001\005\000\004\000\020\000\049\001\030\000\140\001\
\\053\000\139\001\054\000\138\001\085\000\137\001\120\000\182\001\
\\122\000\135\001\123\000\134\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\065\000\028\000\187\001\000\000\
\\000\000\
\\000\000\
\\026\000\190\001\000\000\
\\000\000\
\\000\000\
\\027\000\065\000\028\000\192\001\000\000\
\\000\000\
\\026\000\193\001\000\000\
\\129\000\197\001\130\000\196\001\132\000\195\001\133\000\194\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\131\000\206\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\217\001\026\000\216\001\108\000\215\001\109\000\214\001\
\\110\000\213\001\112\000\212\001\113\000\211\001\114\000\210\001\000\000\
\\000\000\
\\066\000\220\001\000\000\
\\025\000\225\000\058\000\224\000\059\000\223\000\060\000\222\000\
\\112\000\221\001\113\000\211\001\114\000\210\001\000\000\
\\000\000\
\\062\000\070\001\063\000\222\001\000\000\
\\048\000\223\001\000\000\
\\062\000\070\001\063\000\225\001\000\000\
\\026\000\226\001\000\000\
\\026\000\227\001\000\000\
\\000\000\
\\114\000\229\001\000\000\
\\111\000\230\001\000\000\
\\000\000\
\\111\000\232\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\091\000\234\001\000\000\
\\000\000\
\\000\000\
\\061\000\236\001\000\000\
\\031\000\129\000\032\000\237\001\000\000\
\\000\000\
\\132\000\238\001\000\000\
\\031\000\129\000\032\000\240\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\048\000\243\001\000\000\
\\062\000\070\001\063\000\245\001\000\000\
\\048\000\246\001\000\000\
\\026\000\247\001\000\000\
\\000\000\
\\000\000\
\\048\000\248\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\251\001\000\000\
\\000\000\
\\000\000\
\\025\000\217\001\026\000\216\001\109\000\253\001\000\000\
\\031\000\254\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\062\000\070\001\063\000\000\002\000\000\
\\000\000\
\\000\000\
\\062\000\070\001\063\000\001\002\000\000\
\\031\000\129\000\032\000\002\002\000\000\
\\031\000\129\000\032\000\003\002\000\000\
\\000\000\
\\064\000\004\002\000\000\
\\000\000\
\\000\000\
\"
val numstates = 518
val numrules = 268
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | SHEBANG_LINE of unit ->  (string)
 | OUTER_DOC_COMMENT of unit ->  (string)
 | INNER_DOC_COMMENT of unit ->  (string)
 | LIFETIME_TOKEN of unit ->  (string)
 | LIFETIME_OR_LABEL of unit ->  (string)
 | FLOAT_LIT of unit ->  (real) | TUPLE_INDEX of unit ->  (int)
 | INTEGER_LIT of unit ->  (LargeInt.int)
 | RAW_BYTE_STR_LIT of unit ->  (string)
 | BYTE_STR_LIT of unit ->  (string) | BYTE_LIT of unit ->  (int)
 | RAW_STR_LIT of unit ->  (string) | STR_LIT of unit ->  (string)
 | CHAR_LIT of unit ->  (int) | IDENT of unit ->  (string)
 | maybe_for_lifetimes of unit ->  (ForLifetimes option)
 | type_path of unit ->  (TypePath)
 | for_lifetimes of unit ->  (ForLifetimes)
 | trait_bound of unit ->  (TraitBound)
 | lifetime_bounds_expansion of unit ->  (Lifetime list)
 | lifetime_bounds of unit ->  (LifetimeBounds)
 | lifetime of unit ->  (Lifetime)
 | type_param_bound of unit ->  (TypeParamBound)
 | type_param_bounds_expansion of unit ->  (TypeParamBound list)
 | type_param_bounds of unit ->  (TypeParamBounds)
 | maybe_type_param_bounds of unit ->  (TypeParamBounds option)
 | type_alias of unit ->  (ItemType)
 | tuple_fields_expansion of unit ->  (TupleField list)
 | maybe_tuple_fields of unit ->  (TupleField list)
 | tuple_field of unit ->  (TupleField)
 | tuple_fields of unit ->  (TupleField list)
 | tuple_struct of unit ->  (StructType)
 | struct_fields_expansion of unit ->  (StructField list)
 | maybe_struct_fields of unit ->  (StructField list)
 | struct_field of unit ->  (StructField)
 | struct_fields of unit ->  (StructField list)
 | struct_struct of unit ->  (StructType)
 | block_expression of unit ->  (BlockExpression)
 | maybe_func_return_type of unit ->  (Type option)
 | func_return_type of unit ->  (Type)
 | func_parameters_expansion of unit ->  (FunctionParam list)
 | func_param of unit ->  (FunctionParam)
 | maybe_func_parameters of unit ->  (FunctionParam list)
 | func_parameters of unit ->  (FunctionParam list)
 | maybe_abi of unit ->  (Abi option) | abi of unit ->  (Abi)
 | func_qualifier of unit ->  (FunctionQualifier list)
 | function of unit ->  (ItemType)
 | maybe_outer_attr of unit ->  (OuterAttribute option)
 | maybe_colon_type_bounds of unit ->  (TypeParamBounds option)
 | maybe_colon_lifetime_bounds of unit ->  (LifetimeBounds option)
 | type_param of unit ->  (TypeParam)
 | type_params_expansion of unit ->  (TypeParam list)
 | type_params of unit ->  (TypeParam list)
 | lifetime_params_expansion of unit ->  (LifetimeParam list)
 | lifetime_param of unit ->  (LifetimeParam)
 | lifetime_params of unit ->  (LifetimeParam list)
 | type_bound_where_clause_item of unit ->  (WhereClauseItem)
 | lifetime_where_clause_item of unit ->  (WhereClauseItem)
 | where_clause_item of unit ->  (WhereClauseItem)
 | where_clause_expansion of unit ->  (WhereClauseItem list)
 | maybe_where_clause of unit ->  (WhereClause option)
 | where_clause of unit ->  (WhereClause)
 | generic_params of unit ->  (GenericParams)
 | maybe_generics of unit ->  (Generics option)
 | generics of unit ->  (Generics) | types of unit ->  (Type)
 | patterns of unit ->  (Pattern)
 | use_tree_multi_expansion of unit ->  (UseTree list)
 | use_tree_multi of unit ->  (UseTree list)
 | use_tree of unit ->  (UseTree) | item_type of unit ->  (ItemType)
 | visibility of unit ->  (Visibility)
 | macro_item of unit ->  (MarcoItem) | vis_item of unit ->  (VisItem)
 | item of unit ->  (Item) | simple_path_segment of unit ->  (PathSeg)
 | simple_path of unit ->  (PathSeg list)
 | lit_exp of unit ->  (LiteralExpression)
 | meta_item_inner of unit ->  (MetaItemInner)
 | meta_seq_expansion of unit ->  (MetaItemInner list)
 | meta_seq of unit ->  (MetaSeq) | meta_item of unit ->  (MetaItem)
 | outer_attr of unit ->  (OuterAttribute)
 | inner_attr of unit ->  (InnerAttribute)
 | outer_attrs of unit ->  (OuterAttribute list)
 | items of unit ->  (Item list)
 | inner_attrs of unit ->  (InnerAttribute list)
 | crate of unit ->  (Crate)
end
type svalue = MlyValue.svalue
type result = Crate
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 1) => true | (T 2) => true | (T 3) => true | (T 4) => true | (T 
5) => true | (T 6) => true | (T 7) => true | (T 8) => true | (T 9)
 => true | (T 10) => true | (T 11) => true | (T 12) => true | (T 13)
 => true | (T 14) => true | (T 15) => true | (T 16) => true | (T 17)
 => true | (T 18) => true | (T 19) => true | (T 20) => true | (T 21)
 => true | (T 22) => true | (T 23) => true | (T 24) => true | (T 25)
 => true | (T 26) => true | (T 27) => true | (T 28) => true | (T 29)
 => true | (T 30) => true | (T 31) => true | (T 32) => true | (T 33)
 => true | (T 34) => true | (T 35) => true | (T 37) => true | (T 38)
 => true | (T 39) => true | (T 40) => true | (T 41) => true | (T 42)
 => true | (T 43) => true | (T 44) => true | (T 45) => true | (T 46)
 => true | (T 47) => true | (T 48) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "AS"
  | (T 2) => "BREAK"
  | (T 3) => "CONST"
  | (T 4) => "CONTINUE"
  | (T 5) => "CRATE"
  | (T 6) => "ELSE"
  | (T 7) => "ENUM"
  | (T 8) => "EXTERN"
  | (T 9) => "FALSE"
  | (T 10) => "FN"
  | (T 11) => "FOR"
  | (T 12) => "IF"
  | (T 13) => "IMPL"
  | (T 14) => "IN"
  | (T 15) => "LET"
  | (T 16) => "LOOP"
  | (T 17) => "MATCH"
  | (T 18) => "MOD"
  | (T 19) => "MOVE"
  | (T 20) => "MUT"
  | (T 21) => "PUB"
  | (T 22) => "REF"
  | (T 23) => "RETURN"
  | (T 24) => "SELFVALUE"
  | (T 25) => "SELFTYPE"
  | (T 26) => "STATIC"
  | (T 27) => "STRUCT"
  | (T 28) => "SUPER"
  | (T 29) => "TRAIT"
  | (T 30) => "TRUE"
  | (T 31) => "TYPE"
  | (T 32) => "UNSAFE"
  | (T 33) => "USE"
  | (T 34) => "WHERE"
  | (T 35) => "WHILE"
  | (T 36) => "DYN"
  | (T 37) => "ABSTRACT"
  | (T 38) => "BECOME"
  | (T 39) => "BOX"
  | (T 40) => "DO"
  | (T 41) => "FINAL"
  | (T 42) => "MACRO"
  | (T 43) => "OVERRIDE"
  | (T 44) => "PRIV"
  | (T 45) => "TYPEOF"
  | (T 46) => "UNSIZED"
  | (T 47) => "VIRTUAL"
  | (T 48) => "YIELD"
  | (T 49) => "ASYNC"
  | (T 50) => "AWAIT"
  | (T 51) => "TRY"
  | (T 52) => "UNION"
  | (T 53) => "STATICLIFETIME"
  | (T 54) => "IDENT"
  | (T 55) => "CHAR_LIT"
  | (T 56) => "STR_LIT"
  | (T 57) => "RAW_STR_LIT"
  | (T 58) => "BYTE_LIT"
  | (T 59) => "BYTE_STR_LIT"
  | (T 60) => "RAW_BYTE_STR_LIT"
  | (T 61) => "INTEGER_LIT"
  | (T 62) => "TUPLE_INDEX"
  | (T 63) => "FLOAT_LIT"
  | (T 64) => "LIFETIME_OR_LABEL"
  | (T 65) => "LIFETIME_TOKEN"
  | (T 66) => "PLUS"
  | (T 67) => "MINUS"
  | (T 68) => "STAR"
  | (T 69) => "SLASH"
  | (T 70) => "PERCENT"
  | (T 71) => "CARET"
  | (T 72) => "NOT"
  | (T 73) => "AND"
  | (T 74) => "OR"
  | (T 75) => "ANDAND"
  | (T 76) => "OROR"
  | (T 77) => "SHL"
  | (T 78) => "SHR"
  | (T 79) => "PLUSEQ"
  | (T 80) => "MINUSEQ"
  | (T 81) => "STAREQ"
  | (T 82) => "SLASHEQ"
  | (T 83) => "PERCENTEQ"
  | (T 84) => "CARETEQ"
  | (T 85) => "ANDEQ"
  | (T 86) => "OREQ"
  | (T 87) => "SHLEQ"
  | (T 88) => "SHREQ"
  | (T 89) => "EQ"
  | (T 90) => "EQEQ"
  | (T 91) => "NE"
  | (T 92) => "GT"
  | (T 93) => "LT"
  | (T 94) => "GE"
  | (T 95) => "LE"
  | (T 96) => "AT"
  | (T 97) => "UNDERSCORE"
  | (T 98) => "DOT"
  | (T 99) => "DOTDOT"
  | (T 100) => "DOTDOTDOT"
  | (T 101) => "DOTDOTEQ"
  | (T 102) => "COMMA"
  | (T 103) => "SEMI"
  | (T 104) => "COLON"
  | (T 105) => "PATHSEP"
  | (T 106) => "RARROW"
  | (T 107) => "FATARROW"
  | (T 108) => "POUND"
  | (T 109) => "DOLLAR"
  | (T 110) => "QUESTION"
  | (T 111) => "LBRACE"
  | (T 112) => "RBRACE"
  | (T 113) => "LBRACKET"
  | (T 114) => "RBRACKET"
  | (T 115) => "LPARENT"
  | (T 116) => "RPARENT"
  | (T 117) => "INNER_DOC_COMMENT"
  | (T 118) => "OUTER_DOC_COMMENT"
  | (T 119) => "SHEBANG"
  | (T 120) => "SHEBANG_LINE"
  | (T 121) => "LOWER_THAN_LPARENT"
  | (T 122) => "LOWER_THAN_ABI"
  | (T 123) => "ABI"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 123) $$ (T 122) $$ (T 121) $$ (T 119) $$ (T 116) $$ (T 115) $$ 
(T 114) $$ (T 113) $$ (T 112) $$ (T 111) $$ (T 110) $$ (T 109) $$ (T 
108) $$ (T 107) $$ (T 106) $$ (T 105) $$ (T 104) $$ (T 103) $$ (T 102)
 $$ (T 101) $$ (T 100) $$ (T 99) $$ (T 98) $$ (T 97) $$ (T 96) $$ (T 
95) $$ (T 94) $$ (T 93) $$ (T 92) $$ (T 91) $$ (T 90) $$ (T 89) $$ (T 
88) $$ (T 87) $$ (T 86) $$ (T 85) $$ (T 84) $$ (T 83) $$ (T 82) $$ (T 
81) $$ (T 80) $$ (T 79) $$ (T 78) $$ (T 77) $$ (T 76) $$ (T 75) $$ (T 
74) $$ (T 73) $$ (T 72) $$ (T 71) $$ (T 70) $$ (T 69) $$ (T 68) $$ (T 
67) $$ (T 66) $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 
48) $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 
41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 
34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 
27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 
20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 
13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6)
 $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.items items1, _, items1right)) :: ( _, ( 
MlyValue.inner_attrs inner_attrs1, _, _)) :: ( _, ( 
MlyValue.SHEBANG_LINE SHEBANG_LINE1, SHEBANG_LINE1left, _)) :: rest671
)) => let val  result = MlyValue.crate (fn _ => let val  (SHEBANG_LINE
 as SHEBANG_LINE1) = SHEBANG_LINE1 ()
 val  (inner_attrs as inner_attrs1) = inner_attrs1 ()
 val  (items as items1) = items1 ()
 in (Crate (Shebang (SOME SHEBANG_LINE), inner_attrs, items))
end)
 in ( LrTable.NT 0, ( result, SHEBANG_LINE1left, items1right), rest671
)
end
|  ( 1, ( ( _, ( MlyValue.items items1, _, items1right)) :: ( _, ( 
MlyValue.inner_attrs inner_attrs1, inner_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.crate (fn _ => let val  (inner_attrs
 as inner_attrs1) = inner_attrs1 ()
 val  (items as items1) = items1 ()
 in (Crate (Shebang (NONE), inner_attrs, items))
end)
 in ( LrTable.NT 0, ( result, inner_attrs1left, items1right), rest671)

end
|  ( 2, ( ( _, ( MlyValue.items items1, _, items1right)) :: ( _, ( 
MlyValue.item item1, item1left, _)) :: rest671)) => let val  result = 
MlyValue.items (fn _ => let val  (item as item1) = item1 ()
 val  (items as items1) = items1 ()
 in (item::items)
end)
 in ( LrTable.NT 2, ( result, item1left, items1right), rest671)
end
|  ( 3, ( rest671)) => let val  result = MlyValue.items (fn _ => ([]))
 in ( LrTable.NT 2, ( result, defaultPos, defaultPos), rest671)
end
|  ( 4, ( ( _, ( MlyValue.vis_item vis_item1, _, vis_item1right)) :: (
 _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: 
rest671)) => let val  result = MlyValue.item (fn _ => let val  (
outer_attrs as outer_attrs1) = outer_attrs1 ()
 val  (vis_item as vis_item1) = vis_item1 ()
 in (VisItemType (outer_attrs, vis_item))
end)
 in ( LrTable.NT 16, ( result, outer_attrs1left, vis_item1right), 
rest671)
end
|  ( 5, ( ( _, ( MlyValue.item_type item_type1, item_type1left, 
item_type1right)) :: rest671)) => let val  result = MlyValue.vis_item
 (fn _ => let val  (item_type as item_type1) = item_type1 ()
 in (VisItem(DefaultVis, item_type))
end)
 in ( LrTable.NT 17, ( result, item_type1left, item_type1right), 
rest671)
end
|  ( 6, ( ( _, ( MlyValue.item_type item_type1, _, item_type1right))
 :: ( _, ( MlyValue.visibility visibility1, visibility1left, _)) :: 
rest671)) => let val  result = MlyValue.vis_item (fn _ => let val  (
visibility as visibility1) = visibility1 ()
 val  (item_type as item_type1) = item_type1 ()
 in (VisItem(visibility, item_type))
end)
 in ( LrTable.NT 17, ( result, visibility1left, item_type1right), 
rest671)
end
|  ( 7, ( ( _, ( MlyValue.visibility visibility1, visibility1left, 
visibility1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  visibility1 = visibility1 ()
 in ()
end; ()))
 in ( LrTable.NT 29, ( result, visibility1left, visibility1right), 
rest671)
end
|  ( 8, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 29, ( result, defaultPos, defaultPos), rest671)
end
|  ( 9, ( ( _, ( _, PUB1left, PUB1right)) :: rest671)) => let val  
result = MlyValue.visibility (fn _ => (PubVis))
 in ( LrTable.NT 19, ( result, PUB1left, PUB1right), rest671)
end
|  ( 10, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( _, 
PUB1left, _)) :: rest671)) => let val  result = MlyValue.visibility
 (fn _ => (CrateVis))
 in ( LrTable.NT 19, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 11, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( _, 
PUB1left, _)) :: rest671)) => let val  result = MlyValue.visibility
 (fn _ => (SelfVis))
 in ( LrTable.NT 19, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 12, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( _, 
PUB1left, _)) :: rest671)) => let val  result = MlyValue.visibility
 (fn _ => (SuperVis))
 in ( LrTable.NT 19, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 13, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.simple_path
 simple_path1, _, _)) :: _ :: _ :: ( _, ( _, PUB1left, _)) :: rest671)
) => let val  result = MlyValue.visibility (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 in (InVis (SimplePath(simple_path)))
end)
 in ( LrTable.NT 19, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.simple_path simple_path1, simple_path1left,
 simple_path1right)) :: rest671)) => let val  result = 
MlyValue.use_tree (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 in (
yaccLog("use_tree:branch 1"); UseAlias (SimplePath(simple_path), NONE)
)
end)
 in ( LrTable.NT 21, ( result, simple_path1left, simple_path1right), 
rest671)
end
|  ( 15, ( ( _, ( MlyValue.IDENT IDENT1, _, IDENT1right)) :: _ :: ( _,
 ( MlyValue.simple_path simple_path1, simple_path1left, _)) :: rest671
)) => let val  result = MlyValue.use_tree (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 in (
yaccLog("use_tree:branch 2"); UseAlias (SimplePath(simple_path), SOME(Identifer(IDENT)))
)
end)
 in ( LrTable.NT 21, ( result, simple_path1left, IDENT1right), rest671
)
end
|  ( 16, ( ( _, ( _, STAR1left, STAR1right)) :: rest671)) => let val  
result = MlyValue.use_tree (fn _ => (
yaccLog("use_tree:branch 3"); UseAll (NONE)))
 in ( LrTable.NT 21, ( result, STAR1left, STAR1right), rest671)
end
|  ( 17, ( ( _, ( _, _, STAR1right)) :: ( _, ( _, PATHSEP1left, _)) ::
 rest671)) => let val  result = MlyValue.use_tree (fn _ => (
yaccLog("use_tree:branch 4"); UseAll (SOME(SimplePath([DefaultPat]))))
)
 in ( LrTable.NT 21, ( result, PATHSEP1left, STAR1right), rest671)
end
|  ( 18, ( ( _, ( _, _, STAR1right)) :: _ :: ( _, ( 
MlyValue.simple_path simple_path1, simple_path1left, _)) :: rest671))
 => let val  result = MlyValue.use_tree (fn _ => let val  (simple_path
 as simple_path1) = simple_path1 ()
 in (
yaccLog("use_tree:branch 5"); UseAll (SOME(SimplePath(simple_path))))

end)
 in ( LrTable.NT 21, ( result, simple_path1left, STAR1right), rest671)

end
|  ( 19, ( ( _, ( MlyValue.use_tree_multi use_tree_multi1, 
use_tree_multi1left, use_tree_multi1right)) :: rest671)) => let val  
result = MlyValue.use_tree (fn _ => let val  (use_tree_multi as 
use_tree_multi1) = use_tree_multi1 ()
 in (yaccLog("use_tree:branch 6"); UseList (NONE, use_tree_multi))
end
)
 in ( LrTable.NT 21, ( result, use_tree_multi1left, 
use_tree_multi1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.use_tree_multi use_tree_multi1, _, 
use_tree_multi1right)) :: ( _, ( _, PATHSEP1left, _)) :: rest671)) =>
 let val  result = MlyValue.use_tree (fn _ => let val  (use_tree_multi
 as use_tree_multi1) = use_tree_multi1 ()
 in (
yaccLog("use_tree:branch 7"); UseList (SOME(SimplePath([DefaultPat])), use_tree_multi)
)
end)
 in ( LrTable.NT 21, ( result, PATHSEP1left, use_tree_multi1right), 
rest671)
end
|  ( 21, ( ( _, ( MlyValue.use_tree_multi use_tree_multi1, _, 
use_tree_multi1right)) :: _ :: ( _, ( MlyValue.simple_path 
simple_path1, simple_path1left, _)) :: rest671)) => let val  result = 
MlyValue.use_tree (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 val  (use_tree_multi as use_tree_multi1) = use_tree_multi1 ()
 in (
yaccLog("use_tree:branch 8"); UseList (SOME(SimplePath(simple_path)), use_tree_multi)
)
end)
 in ( LrTable.NT 21, ( result, simple_path1left, use_tree_multi1right)
, rest671)
end
|  ( 22, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_comma1, _, _)) :: ( _, ( MlyValue.use_tree_multi_expansion 
use_tree_multi_expansion1, _, _)) :: ( _, ( MlyValue.use_tree 
use_tree1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.use_tree_multi (fn _ => let val  (use_tree as 
use_tree1) = use_tree1 ()
 val  (use_tree_multi_expansion as use_tree_multi_expansion1) = 
use_tree_multi_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in (use_tree::use_tree_multi_expansion)
end)
 in ( LrTable.NT 22, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 23, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _))
 :: rest671)) => let val  result = MlyValue.use_tree_multi (fn _ => (
[]))
 in ( LrTable.NT 22, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 24, ( ( _, ( MlyValue.use_tree use_tree1, _, use_tree1right)) ::
 _ :: ( _, ( MlyValue.use_tree_multi_expansion 
use_tree_multi_expansion1, use_tree_multi_expansion1left, _)) :: 
rest671)) => let val  result = MlyValue.use_tree_multi_expansion (fn _
 => let val  (use_tree_multi_expansion as use_tree_multi_expansion1) =
 use_tree_multi_expansion1 ()
 val  (use_tree as use_tree1) = use_tree1 ()
 in (use_tree::use_tree_multi_expansion)
end)
 in ( LrTable.NT 23, ( result, use_tree_multi_expansion1left, 
use_tree1right), rest671)
end
|  ( 25, ( rest671)) => let val  result = 
MlyValue.use_tree_multi_expansion (fn _ => (nil))
 in ( LrTable.NT 23, ( result, defaultPos, defaultPos), rest671)
end
|  ( 26, ( rest671)) => let val  result = MlyValue.macro_item (fn _ =>
 (MarcoItem))
 in ( LrTable.NT 18, ( result, defaultPos, defaultPos), rest671)
end
|  ( 27, ( ( _, ( MlyValue.inner_attr inner_attr1, _, inner_attr1right
)) :: ( _, ( MlyValue.inner_attrs inner_attrs1, inner_attrs1left, _))
 :: rest671)) => let val  result = MlyValue.inner_attrs (fn _ => let
 val  (inner_attrs as inner_attrs1) = inner_attrs1 ()
 val  (inner_attr as inner_attr1) = inner_attr1 ()
 in (yaccLog("inner_attrs"); inner_attr::inner_attrs)
end)
 in ( LrTable.NT 1, ( result, inner_attrs1left, inner_attr1right), 
rest671)
end
|  ( 28, ( rest671)) => let val  result = MlyValue.inner_attrs (fn _
 => ([]))
 in ( LrTable.NT 1, ( result, defaultPos, defaultPos), rest671)
end
|  ( 29, ( ( _, ( MlyValue.outer_attr outer_attr1, _, outer_attr1right
)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _))
 :: rest671)) => let val  result = MlyValue.outer_attrs (fn _ => let
 val  (outer_attrs as outer_attrs1) = outer_attrs1 ()
 val  (outer_attr as outer_attr1) = outer_attr1 ()
 in (yaccLog("outer_attrs"); outer_attr::outer_attrs)
end)
 in ( LrTable.NT 3, ( result, outer_attrs1left, outer_attr1right), 
rest671)
end
|  ( 30, ( rest671)) => let val  result = MlyValue.outer_attrs (fn _
 => ([]))
 in ( LrTable.NT 3, ( result, defaultPos, defaultPos), rest671)
end
|  ( 31, ( ( _, ( MlyValue.outer_attr outer_attr1, outer_attr1left, 
outer_attr1right)) :: rest671)) => let val  result = 
MlyValue.maybe_outer_attr (fn _ => let val  (outer_attr as outer_attr1
) = outer_attr1 ()
 in (SOME(outer_attr))
end)
 in ( LrTable.NT 51, ( result, outer_attr1left, outer_attr1right), 
rest671)
end
|  ( 32, ( rest671)) => let val  result = MlyValue.maybe_outer_attr
 (fn _ => (NONE))
 in ( LrTable.NT 51, ( result, defaultPos, defaultPos), rest671)
end
|  ( 33, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.meta_item 
meta_item1, _, _)) :: _ :: ( _, ( _, SHEBANG1left, _)) :: rest671)) =>
 let val  result = MlyValue.inner_attr (fn _ => let val  (meta_item
 as meta_item1) = meta_item1 ()
 in (yaccLog("inner_attr"); InnerAttribute(meta_item))
end)
 in ( LrTable.NT 4, ( result, SHEBANG1left, RBRACKET1right), rest671)

end
|  ( 34, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.meta_item 
meta_item1, _, _)) :: _ :: ( _, ( _, POUND1left, _)) :: rest671)) =>
 let val  result = MlyValue.outer_attr (fn _ => let val  (meta_item
 as meta_item1) = meta_item1 ()
 in (OuterAttribute meta_item)
end)
 in ( LrTable.NT 5, ( result, POUND1left, RBRACKET1right), rest671)

end
|  ( 35, ( ( _, ( MlyValue.lit_exp lit_exp1, _, lit_exp1right)) :: _
 :: ( _, ( MlyValue.simple_path simple_path1, simple_path1left, _)) ::
 rest671)) => let val  result = MlyValue.meta_item (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 val  (lit_exp as lit_exp1) = lit_exp1 ()
 in (AttrKVPair(SimplePath(simple_path), lit_exp))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, lit_exp1right), 
rest671)
end
|  ( 36, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.meta_seq 
meta_seq1, _, _)) :: _ :: ( _, ( MlyValue.simple_path simple_path1, 
simple_path1left, _)) :: rest671)) => let val  result = 
MlyValue.meta_item (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 val  (meta_seq as meta_seq1) = meta_seq1 ()
 in (AttrSubs(SimplePath(simple_path), SOME(meta_seq)))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, RPARENT1right), 
rest671)
end
|  ( 37, ( ( _, ( _, _, RPARENT1right)) :: _ :: ( _, ( 
MlyValue.simple_path simple_path1, simple_path1left, _)) :: rest671))
 => let val  result = MlyValue.meta_item (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 in (AttrSubs(SimplePath(simple_path), NONE))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, RPARENT1right), 
rest671)
end
|  ( 38, ( ( _, ( MlyValue.simple_path simple_path1, simple_path1left,
 simple_path1right)) :: rest671)) => let val  result = 
MlyValue.meta_item (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 in (AttrName (SimplePath(simple_path)))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, simple_path1right), 
rest671)
end
|  ( 39, ( ( _, ( _, _, COMMA1right)) :: ( _, ( 
MlyValue.meta_seq_expansion meta_seq_expansion1, _, _)) :: ( _, ( 
MlyValue.meta_item_inner meta_item_inner1, meta_item_inner1left, _))
 :: rest671)) => let val  result = MlyValue.meta_seq (fn _ => let val 
 (meta_item_inner as meta_item_inner1) = meta_item_inner1 ()
 val  (meta_seq_expansion as meta_seq_expansion1) = 
meta_seq_expansion1 ()
 in (MetaSeq(meta_item_inner::meta_seq_expansion))
end)
 in ( LrTable.NT 7, ( result, meta_item_inner1left, COMMA1right), 
rest671)
end
|  ( 40, ( ( _, ( MlyValue.meta_seq_expansion meta_seq_expansion1, _, 
meta_seq_expansion1right)) :: ( _, ( MlyValue.meta_item_inner 
meta_item_inner1, meta_item_inner1left, _)) :: rest671)) => let val  
result = MlyValue.meta_seq (fn _ => let val  (meta_item_inner as 
meta_item_inner1) = meta_item_inner1 ()
 val  (meta_seq_expansion as meta_seq_expansion1) = 
meta_seq_expansion1 ()
 in (MetaSeq(meta_item_inner::meta_seq_expansion))
end)
 in ( LrTable.NT 7, ( result, meta_item_inner1left, 
meta_seq_expansion1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.meta_seq_expansion meta_seq_expansion1, _, 
meta_seq_expansion1right)) :: _ :: ( _, ( MlyValue.meta_item_inner 
meta_item_inner1, _, _)) :: _ :: ( _, ( _, LPARENT1left, _)) :: 
rest671)) => let val  result = MlyValue.meta_seq_expansion (fn _ =>
 let val  (meta_item_inner as meta_item_inner1) = meta_item_inner1 ()
 val  (meta_seq_expansion as meta_seq_expansion1) = 
meta_seq_expansion1 ()
 in (meta_item_inner::meta_seq_expansion)
end)
 in ( LrTable.NT 8, ( result, LPARENT1left, meta_seq_expansion1right),
 rest671)
end
|  ( 42, ( rest671)) => let val  result = MlyValue.meta_seq_expansion
 (fn _ => ([]))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 43, ( ( _, ( MlyValue.meta_item meta_item1, meta_item1left, 
meta_item1right)) :: rest671)) => let val  result = 
MlyValue.meta_item_inner (fn _ => let val  (meta_item as meta_item1) =
 meta_item1 ()
 in (MetaItem(meta_item))
end)
 in ( LrTable.NT 9, ( result, meta_item1left, meta_item1right), 
rest671)
end
|  ( 44, ( ( _, ( MlyValue.lit_exp lit_exp1, lit_exp1left, 
lit_exp1right)) :: rest671)) => let val  result = 
MlyValue.meta_item_inner (fn _ => let val  (lit_exp as lit_exp1) = 
lit_exp1 ()
 in (MetaLit(lit_exp))
end)
 in ( LrTable.NT 9, ( result, lit_exp1left, lit_exp1right), rest671)

end
|  ( 45, ( ( _, ( MlyValue.STR_LIT STR_LIT1, STR_LIT1left, 
STR_LIT1right)) :: rest671)) => let val  result = MlyValue.lit_exp (fn
 _ => let val  (STR_LIT as STR_LIT1) = STR_LIT1 ()
 in (yaccLog("lit_exp "^STR_LIT); LiteralExpression(STR_LIT))
end)
 in ( LrTable.NT 10, ( result, STR_LIT1left, STR_LIT1right), rest671)

end
|  ( 46, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.patterns (fn _ => let val  
IDENT1 = IDENT1 ()
 in (Pattern)
end)
 in ( LrTable.NT 24, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.types (fn _ => let val  IDENT1
 = IDENT1 ()
 in (Type)
end)
 in ( LrTable.NT 25, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.simple_path_segment simple_path_segment1, 
simple_path_segment1left, simple_path_segment1right)) :: rest671)) =>
 let val  result = MlyValue.simple_path (fn _ => let val  (
simple_path_segment as simple_path_segment1) = simple_path_segment1 ()
 in ([simple_path_segment])
end)
 in ( LrTable.NT 12, ( result, simple_path_segment1left, 
simple_path_segment1right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.simple_path_segment simple_path_segment1, _
, simple_path_segment1right)) :: ( _, ( _, PATHSEP1left, _)) :: 
rest671)) => let val  result = MlyValue.simple_path (fn _ => let val 
 (simple_path_segment as simple_path_segment1) = simple_path_segment1
 ()
 in ([DefaultPat, simple_path_segment])
end)
 in ( LrTable.NT 12, ( result, PATHSEP1left, simple_path_segment1right
), rest671)
end
|  ( 50, ( ( _, ( MlyValue.simple_path_segment simple_path_segment1, _
, simple_path_segment1right)) :: _ :: ( _, ( MlyValue.simple_path 
simple_path1, simple_path1left, _)) :: rest671)) => let val  result = 
MlyValue.simple_path (fn _ => let val  (simple_path as simple_path1) =
 simple_path1 ()
 val  (simple_path_segment as simple_path_segment1) = 
simple_path_segment1 ()
 in (simple_path_segment::simple_path)
end)
 in ( LrTable.NT 12, ( result, simple_path1left, 
simple_path_segment1right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.simple_path_segment (fn _ =>
 let val  (IDENT as IDENT1) = IDENT1 ()
 in (IDPat(Identifer(IDENT)))
end)
 in ( LrTable.NT 13, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 52, ( ( _, ( _, SUPER1left, SUPER1right)) :: rest671)) => let
 val  result = MlyValue.simple_path_segment (fn _ => (SuperPat))
 in ( LrTable.NT 13, ( result, SUPER1left, SUPER1right), rest671)
end
|  ( 53, ( ( _, ( _, SELFVALUE1left, SELFVALUE1right)) :: rest671)) =>
 let val  result = MlyValue.simple_path_segment (fn _ => (SelfPat))
 in ( LrTable.NT 13, ( result, SELFVALUE1left, SELFVALUE1right), 
rest671)
end
|  ( 54, ( ( _, ( _, CARET1left, CARET1right)) :: rest671)) => let
 val  result = MlyValue.simple_path_segment (fn _ => (CratePat))
 in ( LrTable.NT 13, ( result, CARET1left, CARET1right), rest671)
end
|  ( 55, ( ( _, ( _, _, CARET1right)) :: ( _, ( _, DOLLAR1left, _)) ::
 rest671)) => let val  result = MlyValue.simple_path_segment (fn _ =>
 (DCratePat))
 in ( LrTable.NT 13, ( result, DOLLAR1left, CARET1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.where_clause where_clause1, 
where_clause1left, where_clause1right)) :: rest671)) => let val  
result = MlyValue.maybe_where_clause (fn _ => let val  (where_clause
 as where_clause1) = where_clause1 ()
 in (SOME(where_clause))
end)
 in ( LrTable.NT 31, ( result, where_clause1left, where_clause1right),
 rest671)
end
|  ( 57, ( rest671)) => let val  result = MlyValue.maybe_where_clause
 (fn _ => (NONE))
 in ( LrTable.NT 31, ( result, defaultPos, defaultPos), rest671)
end
|  ( 58, ( ( _, ( MlyValue.where_clause_expansion 
where_clause_expansion1, _, where_clause_expansion1right)) :: ( _, ( _
, WHERE1left, _)) :: rest671)) => let val  result = 
MlyValue.where_clause (fn _ => let val  (where_clause_expansion as 
where_clause_expansion1) = where_clause_expansion1 ()
 in (WhereClause (where_clause_expansion))
end)
 in ( LrTable.NT 30, ( result, WHERE1left, 
where_clause_expansion1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.where_clause_item where_clause_item1, _, 
where_clause_item1right)) :: ( _, ( MlyValue.where_clause_expansion 
where_clause_expansion1, _, _)) :: ( _, ( _, WHERE1left, _)) :: 
rest671)) => let val  result = MlyValue.where_clause (fn _ => let val 
 (where_clause_expansion as where_clause_expansion1) = 
where_clause_expansion1 ()
 val  (where_clause_item as where_clause_item1) = where_clause_item1
 ()
 in (WhereClause (where_clause_item::where_clause_expansion))
end)
 in ( LrTable.NT 30, ( result, WHERE1left, where_clause_item1right), 
rest671)
end
|  ( 60, ( ( _, ( _, _, COMMA1right)) :: ( _, ( 
MlyValue.where_clause_item where_clause_item1, _, _)) :: ( _, ( 
MlyValue.where_clause_expansion where_clause_expansion1, 
where_clause_expansion1left, _)) :: rest671)) => let val  result = 
MlyValue.where_clause_expansion (fn _ => let val  (
where_clause_expansion as where_clause_expansion1) = 
where_clause_expansion1 ()
 val  (where_clause_item as where_clause_item1) = where_clause_item1
 ()
 in (where_clause_item::where_clause_expansion)
end)
 in ( LrTable.NT 32, ( result, where_clause_expansion1left, 
COMMA1right), rest671)
end
|  ( 61, ( rest671)) => let val  result = 
MlyValue.where_clause_expansion (fn _ => (nil))
 in ( LrTable.NT 32, ( result, defaultPos, defaultPos), rest671)
end
|  ( 62, ( ( _, ( MlyValue.lifetime_where_clause_item 
lifetime_where_clause_item1, lifetime_where_clause_item1left, 
lifetime_where_clause_item1right)) :: rest671)) => let val  result = 
MlyValue.where_clause_item (fn _ => let val  (
lifetime_where_clause_item as lifetime_where_clause_item1) = 
lifetime_where_clause_item1 ()
 in (lifetime_where_clause_item)
end)
 in ( LrTable.NT 33, ( result, lifetime_where_clause_item1left, 
lifetime_where_clause_item1right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.type_bound_where_clause_item 
type_bound_where_clause_item1, type_bound_where_clause_item1left, 
type_bound_where_clause_item1right)) :: rest671)) => let val  result =
 MlyValue.where_clause_item (fn _ => let val  (
type_bound_where_clause_item as type_bound_where_clause_item1) = 
type_bound_where_clause_item1 ()
 in (type_bound_where_clause_item)
end)
 in ( LrTable.NT 33, ( result, type_bound_where_clause_item1left, 
type_bound_where_clause_item1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.lifetime_bounds lifetime_bounds1, _, 
lifetime_bounds1right)) :: _ :: ( _, ( MlyValue.lifetime lifetime1, 
lifetime1left, _)) :: rest671)) => let val  result = 
MlyValue.lifetime_where_clause_item (fn _ => let val  (lifetime as 
lifetime1) = lifetime1 ()
 val  (lifetime_bounds as lifetime_bounds1) = lifetime_bounds1 ()
 in (LifetimeWhereClauseItem(lifetime, lifetime_bounds))
end)
 in ( LrTable.NT 34, ( result, lifetime1left, lifetime_bounds1right), 
rest671)
end
|  ( 65, ( ( _, ( MlyValue.maybe_type_param_bounds 
maybe_type_param_bounds1, _, maybe_type_param_bounds1right)) :: _ :: (
 _, ( MlyValue.types types1, _, _)) :: ( _, ( 
MlyValue.maybe_for_lifetimes maybe_for_lifetimes1, 
maybe_for_lifetimes1left, _)) :: rest671)) => let val  result = 
MlyValue.type_bound_where_clause_item (fn _ => let val  (
maybe_for_lifetimes as maybe_for_lifetimes1) = maybe_for_lifetimes1 ()
 val  (types as types1) = types1 ()
 val  (maybe_type_param_bounds as maybe_type_param_bounds1) = 
maybe_type_param_bounds1 ()
 in (
TypeBoundWhereClauseItem(maybe_for_lifetimes, types, maybe_type_param_bounds)
)
end)
 in ( LrTable.NT 35, ( result, maybe_for_lifetimes1left, 
maybe_type_param_bounds1right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.generics generics1, generics1left, 
generics1right)) :: rest671)) => let val  result = 
MlyValue.maybe_generics (fn _ => let val  (generics as generics1) = 
generics1 ()
 in (SOME(generics))
end)
 in ( LrTable.NT 27, ( result, generics1left, generics1right), rest671
)
end
|  ( 67, ( rest671)) => let val  result = MlyValue.maybe_generics (fn
 _ => (NONE))
 in ( LrTable.NT 27, ( result, defaultPos, defaultPos), rest671)
end
|  ( 68, ( ( _, ( MlyValue.for_lifetimes for_lifetimes1, 
for_lifetimes1left, for_lifetimes1right)) :: rest671)) => let val  
result = MlyValue.maybe_for_lifetimes (fn _ => let val  (for_lifetimes
 as for_lifetimes1) = for_lifetimes1 ()
 in (SOME(for_lifetimes))
end)
 in ( LrTable.NT 97, ( result, for_lifetimes1left, for_lifetimes1right
), rest671)
end
|  ( 69, ( rest671)) => let val  result = MlyValue.maybe_for_lifetimes
 (fn _ => (NONE))
 in ( LrTable.NT 97, ( result, defaultPos, defaultPos), rest671)
end
|  ( 70, ( ( _, ( _, _, GT1right)) :: ( _, ( MlyValue.lifetime_params 
lifetime_params1, _, _)) :: _ :: ( _, ( _, FOR1left, _)) :: rest671))
 => let val  result = MlyValue.for_lifetimes (fn _ => let val  (
lifetime_params as lifetime_params1) = lifetime_params1 ()
 in (ForLifetimes(LifetimeParams(lifetime_params)))
end)
 in ( LrTable.NT 95, ( result, FOR1left, GT1right), rest671)
end
|  ( 71, ( ( _, ( _, _, GT1right)) :: _ :: ( _, ( _, FOR1left, _)) :: 
rest671)) => let val  result = MlyValue.for_lifetimes (fn _ => (
ForLifetimes(LifetimeParams([]))))
 in ( LrTable.NT 95, ( result, FOR1left, GT1right), rest671)
end
|  ( 72, ( ( _, ( _, _, GT1right)) :: ( _, ( MlyValue.generic_params 
generic_params1, _, _)) :: ( _, ( _, LT1left, _)) :: rest671)) => let
 val  result = MlyValue.generics (fn _ => let val  (generic_params as 
generic_params1) = generic_params1 ()
 in (yaccLog("generics"); Generics(generic_params))
end)
 in ( LrTable.NT 26, ( result, LT1left, GT1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.lifetime_params lifetime_params1, 
lifetime_params1left, lifetime_params1right)) :: rest671)) => let val 
 result = MlyValue.generic_params (fn _ => let val  (lifetime_params
 as lifetime_params1) = lifetime_params1 ()
 in (GenericParams (LifetimeParams(lifetime_params), TypeParams([])))

end)
 in ( LrTable.NT 28, ( result, lifetime_params1left, 
lifetime_params1right), rest671)
end
|  ( 74, ( ( _, ( _, _, COMMA1right)) :: ( _, ( 
MlyValue.lifetime_params lifetime_params1, lifetime_params1left, _))
 :: rest671)) => let val  result = MlyValue.generic_params (fn _ =>
 let val  (lifetime_params as lifetime_params1) = lifetime_params1 ()
 in (GenericParams (LifetimeParams(lifetime_params), TypeParams([])))

end)
 in ( LrTable.NT 28, ( result, lifetime_params1left, COMMA1right), 
rest671)
end
|  ( 75, ( ( _, ( MlyValue.type_params type_params1, type_params1left,
 type_params1right)) :: rest671)) => let val  result = 
MlyValue.generic_params (fn _ => let val  (type_params as type_params1
) = type_params1 ()
 in (GenericParams (LifetimeParams([]), TypeParams(type_params)))
end)
 in ( LrTable.NT 28, ( result, type_params1left, type_params1right), 
rest671)
end
|  ( 76, ( ( _, ( _, _, COMMA1right)) :: ( _, ( MlyValue.type_params 
type_params1, type_params1left, _)) :: rest671)) => let val  result = 
MlyValue.generic_params (fn _ => let val  (type_params as type_params1
) = type_params1 ()
 in (GenericParams (LifetimeParams([]), TypeParams(type_params)))
end)
 in ( LrTable.NT 28, ( result, type_params1left, COMMA1right), rest671
)
end
|  ( 77, ( ( _, ( MlyValue.type_params type_params1, _, 
type_params1right)) :: _ :: ( _, ( MlyValue.lifetime_params 
lifetime_params1, lifetime_params1left, _)) :: rest671)) => let val  
result = MlyValue.generic_params (fn _ => let val  (lifetime_params
 as lifetime_params1) = lifetime_params1 ()
 val  (type_params as type_params1) = type_params1 ()
 in (
GenericParams (LifetimeParams(lifetime_params), TypeParams(type_params))
)
end)
 in ( LrTable.NT 28, ( result, lifetime_params1left, type_params1right
), rest671)
end
|  ( 78, ( ( _, ( _, _, COMMA2right)) :: ( _, ( MlyValue.type_params 
type_params1, _, _)) :: _ :: ( _, ( MlyValue.lifetime_params 
lifetime_params1, lifetime_params1left, _)) :: rest671)) => let val  
result = MlyValue.generic_params (fn _ => let val  (lifetime_params
 as lifetime_params1) = lifetime_params1 ()
 val  (type_params as type_params1) = type_params1 ()
 in (
GenericParams (LifetimeParams(lifetime_params), TypeParams(type_params))
)
end)
 in ( LrTable.NT 28, ( result, lifetime_params1left, COMMA2right), 
rest671)
end
|  ( 79, ( rest671)) => let val  result = MlyValue.generic_params (fn
 _ => (GenericParams (LifetimeParams([]), TypeParams([]))))
 in ( LrTable.NT 28, ( result, defaultPos, defaultPos), rest671)
end
|  ( 80, ( ( _, ( MlyValue.lifetime_param lifetime_param1, 
lifetime_param1left, lifetime_param1right)) :: rest671)) => let val  
result = MlyValue.lifetime_params (fn _ => let val  (lifetime_param
 as lifetime_param1) = lifetime_param1 ()
 in ([lifetime_param])
end)
 in ( LrTable.NT 36, ( result, lifetime_param1left, 
lifetime_param1right), rest671)
end
|  ( 81, ( ( _, ( MlyValue.lifetime_param lifetime_param1, _, 
lifetime_param1right)) :: _ :: ( _, ( MlyValue.lifetime_params 
lifetime_params1, lifetime_params1left, _)) :: rest671)) => let val  
result = MlyValue.lifetime_params (fn _ => let val  (lifetime_params
 as lifetime_params1) = lifetime_params1 ()
 val  (lifetime_param as lifetime_param1) = lifetime_param1 ()
 in (lifetime_param::lifetime_params)
end)
 in ( LrTable.NT 36, ( result, lifetime_params1left, 
lifetime_param1right), rest671)
end
|  ( 82, ( ( _, ( MlyValue.type_param type_param1, type_param1left, 
type_param1right)) :: rest671)) => let val  result = 
MlyValue.type_params (fn _ => let val  (type_param as type_param1) = 
type_param1 ()
 in ([type_param])
end)
 in ( LrTable.NT 39, ( result, type_param1left, type_param1right), 
rest671)
end
|  ( 83, ( ( _, ( MlyValue.type_param type_param1, _, type_param1right
)) :: _ :: ( _, ( MlyValue.type_params type_params1, type_params1left,
 _)) :: rest671)) => let val  result = MlyValue.type_params (fn _ =>
 let val  (type_params as type_params1) = type_params1 ()
 val  (type_param as type_param1) = type_param1 ()
 in (type_param::type_params)
end)
 in ( LrTable.NT 39, ( result, type_params1left, type_param1right), 
rest671)
end
|  ( 84, ( ( _, ( MlyValue.maybe_colon_lifetime_bounds 
maybe_colon_lifetime_bounds1, _, maybe_colon_lifetime_bounds1right))
 :: ( _, ( MlyValue.LIFETIME_OR_LABEL LIFETIME_OR_LABEL1, _, _)) :: (
 _, ( MlyValue.maybe_outer_attr maybe_outer_attr1, 
maybe_outer_attr1left, _)) :: rest671)) => let val  result = 
MlyValue.lifetime_param (fn _ => let val  (maybe_outer_attr as 
maybe_outer_attr1) = maybe_outer_attr1 ()
 val  (LIFETIME_OR_LABEL as LIFETIME_OR_LABEL1) = LIFETIME_OR_LABEL1
 ()
 val  (maybe_colon_lifetime_bounds as maybe_colon_lifetime_bounds1) = 
maybe_colon_lifetime_bounds1 ()
 in (
yaccLog("lifetime_param"); 
                                                                    LifetimeParam(maybe_outer_attr, 
                                                                            LifetimeOrLabel(LIFETIME_OR_LABEL), 
                                                                            maybe_colon_lifetime_bounds)
                                                                
)
end)
 in ( LrTable.NT 37, ( result, maybe_outer_attr1left, 
maybe_colon_lifetime_bounds1right), rest671)
end
|  ( 85, ( ( _, ( MlyValue.lifetime_bounds lifetime_bounds1, _, 
lifetime_bounds1right)) :: ( _, ( _, COLON1left, _)) :: rest671)) =>
 let val  result = MlyValue.maybe_colon_lifetime_bounds (fn _ => let
 val  (lifetime_bounds as lifetime_bounds1) = lifetime_bounds1 ()
 in (SOME(lifetime_bounds))
end)
 in ( LrTable.NT 44, ( result, COLON1left, lifetime_bounds1right), 
rest671)
end
|  ( 86, ( rest671)) => let val  result = 
MlyValue.maybe_colon_lifetime_bounds (fn _ => (NONE))
 in ( LrTable.NT 44, ( result, defaultPos, defaultPos), rest671)
end
|  ( 87, ( ( _, ( MlyValue.maybe_colon_type_bounds 
maybe_colon_type_bounds1, _, maybe_colon_type_bounds1right)) :: ( _, (
 MlyValue.IDENT IDENT1, _, _)) :: ( _, ( MlyValue.maybe_outer_attr 
maybe_outer_attr1, maybe_outer_attr1left, _)) :: rest671)) => let val 
 result = MlyValue.type_param (fn _ => let val  (maybe_outer_attr as 
maybe_outer_attr1) = maybe_outer_attr1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 val  (maybe_colon_type_bounds as maybe_colon_type_bounds1) = 
maybe_colon_type_bounds1 ()
 in (
yaccLog("type_param:branch 1");
                                                                    TypeParam(maybe_outer_attr, Identifer(IDENT), maybe_colon_type_bounds, NONE)
                                                                
)
end)
 in ( LrTable.NT 41, ( result, maybe_outer_attr1left, 
maybe_colon_type_bounds1right), rest671)
end
|  ( 88, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _,
 ( MlyValue.maybe_colon_type_bounds maybe_colon_type_bounds1, _, _))
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( 
MlyValue.maybe_outer_attr maybe_outer_attr1, maybe_outer_attr1left, _)
) :: rest671)) => let val  result = MlyValue.type_param (fn _ => let
 val  (maybe_outer_attr as maybe_outer_attr1) = maybe_outer_attr1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 val  (maybe_colon_type_bounds as maybe_colon_type_bounds1) = 
maybe_colon_type_bounds1 ()
 val  (types as types1) = types1 ()
 in (
yaccLog("type_param:branch 2");
                                                                    TypeParam(maybe_outer_attr, Identifer(IDENT), maybe_colon_type_bounds, SOME(types))
                                                                
)
end)
 in ( LrTable.NT 41, ( result, maybe_outer_attr1left, types1right), 
rest671)
end
|  ( 89, ( ( _, ( _, COLON1left, COLON1right)) :: rest671)) => let
 val  result = MlyValue.maybe_colon_type_bounds (fn _ => (NONE))
 in ( LrTable.NT 46, ( result, COLON1left, COLON1right), rest671)
end
|  ( 90, ( ( _, ( MlyValue.type_param_bounds type_param_bounds1, _, 
type_param_bounds1right)) :: ( _, ( _, COLON1left, _)) :: rest671)) =>
 let val  result = MlyValue.maybe_colon_type_bounds (fn _ => let val 
 (type_param_bounds as type_param_bounds1) = type_param_bounds1 ()
 in (SOME(type_param_bounds))
end)
 in ( LrTable.NT 46, ( result, COLON1left, type_param_bounds1right), 
rest671)
end
|  ( 91, ( rest671)) => let val  result = 
MlyValue.maybe_colon_type_bounds (fn _ => (NONE))
 in ( LrTable.NT 46, ( result, defaultPos, defaultPos), rest671)
end
|  ( 92, ( ( _, ( _, COMMA1left, COMMA1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 47, ( result, COMMA1left, COMMA1right), rest671)
end
|  ( 93, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 47, ( result, defaultPos, defaultPos), rest671)
end
|  ( 94, ( ( _, ( _, MUT1left, MUT1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 113, ( result, MUT1left, MUT1right), rest671)
end
|  ( 95, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 113, ( result, defaultPos, defaultPos), rest671)
end
|  ( 96, ( ( _, ( _, PLUS1left, PLUS1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 48, ( result, PLUS1left, PLUS1right), rest671)
end
|  ( 97, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 48, ( result, defaultPos, defaultPos), rest671)
end
|  ( 98, ( ( _, ( _, QUESTION1left, QUESTION1right)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 49, ( result, QUESTION1left, QUESTION1right), rest671
)
end
|  ( 99, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 49, ( result, defaultPos, defaultPos), rest671)
end
|  ( 100, ( ( _, ( _, UNSAFE1left, UNSAFE1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 54, ( result, UNSAFE1left, UNSAFE1right), rest671)

end
|  ( 101, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 54, ( result, defaultPos, defaultPos), rest671)
end
|  ( 102, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDENT IDENT1,
 _, _)) :: ( _, ( _, MOD1left, _)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 in (Module (Identifer(IDENT), NONE))
end)
 in ( LrTable.NT 20, ( result, MOD1left, SEMI1right), rest671)
end
|  ( 103, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.items 
items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1, _, _)) ::
 _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, MOD1left, _))
 :: rest671)) => let val  result = MlyValue.item_type (fn _ => let
 val  (IDENT as IDENT1) = IDENT1 ()
 val  (inner_attrs as inner_attrs1) = inner_attrs1 ()
 val  (items as items1) = items1 ()
 in (Module (Identifer(IDENT), SOME(ModuleBody(inner_attrs, items))))

end)
 in ( LrTable.NT 20, ( result, MOD1left, RBRACE1right), rest671)
end
|  ( 104, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDENT IDENT1,
 _, _)) :: _ :: ( _, ( _, EXTERN1left, _)) :: rest671)) => let val  
result = MlyValue.item_type (fn _ => let val  (IDENT as IDENT1) = 
IDENT1 ()
 in (
yaccLog("extern crate "^IDENT); ExternCrate (Identifer(IDENT), NONE))

end)
 in ( LrTable.NT 20, ( result, EXTERN1left, SEMI1right), rest671)
end
|  ( 105, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDENT IDENT2,
 _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( _,
 EXTERN1left, _)) :: rest671)) => let val  result = MlyValue.item_type
 (fn _ => let val  IDENT1 = IDENT1 ()
 val  IDENT2 = IDENT2 ()
 in (
yaccLog("extern crate "^IDENT1^" as"^IDENT2); ExternCrate (Identifer(IDENT1), SOME(Identifer(IDENT2)))
)
end)
 in ( LrTable.NT 20, ( result, EXTERN1left, SEMI1right), rest671)
end
|  ( 106, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.use_tree 
use_tree1, _, _)) :: ( _, ( _, USE1left, _)) :: rest671)) => let val  
result = MlyValue.item_type (fn _ => let val  (use_tree as use_tree1)
 = use_tree1 ()
 in (yaccLog("use_tree"); UseDeclaration(use_tree))
end)
 in ( LrTable.NT 20, ( result, USE1left, SEMI1right), rest671)
end
|  ( 107, ( ( _, ( MlyValue.function function1, function1left, 
function1right)) :: rest671)) => let val  result = MlyValue.item_type
 (fn _ => let val  (function as function1) = function1 ()
 in (yaccLog("function"); function)
end)
 in ( LrTable.NT 20, ( result, function1left, function1right), rest671
)
end
|  ( 108, ( ( _, ( MlyValue.type_alias type_alias1, type_alias1left, 
type_alias1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (type_alias as type_alias1) = 
type_alias1 ()
 in (yaccLog("type alias"); type_alias)
end)
 in ( LrTable.NT 20, ( result, type_alias1left, type_alias1right), 
rest671)
end
|  ( 109, ( ( _, ( MlyValue.struct_struct struct_struct1, 
struct_struct1left, struct_struct1right)) :: rest671)) => let val  
result = MlyValue.item_type (fn _ => let val  (struct_struct as 
struct_struct1) = struct_struct1 ()
 in (yaccLog("struct struct"); Struct (struct_struct))
end)
 in ( LrTable.NT 20, ( result, struct_struct1left, struct_struct1right
), rest671)
end
|  ( 110, ( ( _, ( MlyValue.tuple_struct tuple_struct1, 
tuple_struct1left, tuple_struct1right)) :: rest671)) => let val  
result = MlyValue.item_type (fn _ => let val  (tuple_struct as 
tuple_struct1) = tuple_struct1 ()
 in (yaccLog("tuple struct"); Struct (tuple_struct))
end)
 in ( LrTable.NT 20, ( result, tuple_struct1left, tuple_struct1right),
 rest671)
end
|  ( 111, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_enum_items1, _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.maybe_generics 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _
, ( _, ENUM1left, _)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  maybe_enum_items1 = maybe_enum_items1 ()
 in (yaccLog("enumeration"); Enumeration)
end)
 in ( LrTable.NT 20, ( result, ENUM1left, RBRACE1right), rest671)
end
|  ( 112, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( 
MlyValue.struct_fields struct_fields1, _, _)) :: _ :: ( _, ( 
MlyValue.maybe_where_clause maybe_where_clause1, _, _)) :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, UNION1left, _)) :: rest671)
) => let val  result = MlyValue.item_type (fn _ => let val  IDENT1 = 
IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  struct_fields1 = struct_fields1 ()
 in (yaccLog("Union"); Union)
end)
 in ( LrTable.NT 20, ( result, UNION1left, RBRACE1right), rest671)
end
|  ( 113, ( ( _, ( MlyValue.ntVOID constant_item1, constant_item1left,
 constant_item1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  constant_item1 = constant_item1
 ()
 in (yaccLog("ConstantItem"); ConstantItem)
end)
 in ( LrTable.NT 20, ( result, constant_item1left, constant_item1right
), rest671)
end
|  ( 114, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.types types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( _, STATIC1left
, _)) :: rest671)) => let val  result = MlyValue.item_type (fn _ =>
 let val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in (yaccLog("StaticItem"); StaticItem)
end)
 in ( LrTable.NT 20, ( result, STATIC1left, SEMI1right), rest671)
end
|  ( 115, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.types types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, STATIC1left, _))
 :: rest671)) => let val  result = MlyValue.item_type (fn _ => let
 val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in (yaccLog("StaticItem"); StaticItem)
end)
 in ( LrTable.NT 20, ( result, STATIC1left, SEMI1right), rest671)
end
|  ( 116, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_items1, _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID 
maybe_trait_super1, _, _)) :: ( _, ( MlyValue.maybe_generics 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _
 :: ( _, ( MlyValue.ntVOID maybe_unsafe1, maybe_unsafe1left, _)) :: 
rest671)) => let val  result = MlyValue.item_type (fn _ => let val  
maybe_unsafe1 = maybe_unsafe1 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_trait_super1 = maybe_trait_super1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  trait_items1 = trait_items1 ()
 in (yaccLog("Trait"); Trait)
end)
 in ( LrTable.NT 20, ( result, maybe_unsafe1left, RBRACE1right), 
rest671)
end
|  ( 117, ( ( _, ( MlyValue.ntVOID inherent_impl1, inherent_impl1left,
 inherent_impl1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (inherent_impl as inherent_impl1)
 = inherent_impl1 ()
 in (yaccLog("inherent_impl"); Implementation)
end)
 in ( LrTable.NT 20, ( result, inherent_impl1left, inherent_impl1right
), rest671)
end
|  ( 118, ( ( _, ( MlyValue.ntVOID trait_impl1, trait_impl1left, 
trait_impl1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (trait_impl as trait_impl1) = 
trait_impl1 ()
 in (yaccLog("trait_impl"); Implementation)
end)
 in ( LrTable.NT 20, ( result, trait_impl1left, trait_impl1right), 
rest671)
end
|  ( 119, ( ( _, ( MlyValue.ntVOID extern_block1, extern_block1left, 
extern_block1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (extern_block as extern_block1) =
 extern_block1 ()
 in (yaccLog("extern_block"); ExternBlock)
end)
 in ( LrTable.NT 20, ( result, extern_block1left, extern_block1right),
 rest671)
end
|  ( 120, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.types types1,
 _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.maybe_generics maybe_generics1, _, _)) :: 
( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, TYPE1left, _)) :: 
rest671)) => let val  result = MlyValue.type_alias (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 val  (maybe_generics as maybe_generics1) = maybe_generics1 ()
 val  (maybe_where_clause as maybe_where_clause1) = 
maybe_where_clause1 ()
 val  (types as types1) = types1 ()
 in (
TypeAlias (Identifer(IDENT), maybe_generics, maybe_where_clause, types)
)
end)
 in ( LrTable.NT 83, ( result, TYPE1left, SEMI1right), rest671)
end
|  ( 121, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.types types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, CONST1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 84, ( result, CONST1left, SEMI1right), rest671)
end
|  ( 122, ( ( _, ( MlyValue.block_expression block_expression1, _, 
block_expression1right)) :: ( _, ( MlyValue.maybe_where_clause 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.maybe_func_return_type 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( 
MlyValue.maybe_func_parameters maybe_func_parameters1, _, _)) :: _ :: 
( _, ( MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( MlyValue.func_qualifier 
func_qualifier1, func_qualifier1left, _)) :: rest671)) => let val  
result = MlyValue.function (fn _ => let val  (func_qualifier as 
func_qualifier1) = func_qualifier1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 val  (maybe_generics as maybe_generics1) = maybe_generics1 ()
 val  (maybe_func_parameters as maybe_func_parameters1) = 
maybe_func_parameters1 ()
 val  (maybe_func_return_type as maybe_func_return_type1) = 
maybe_func_return_type1 ()
 val  (maybe_where_clause as maybe_where_clause1) = 
maybe_where_clause1 ()
 val  (block_expression as block_expression1) = block_expression1 ()
 in (
Function({ qualifier=func_qualifier, generic=maybe_generics,
                                                                            name=Identifer(IDENT), params=maybe_func_parameters,
                                                                            ret=maybe_func_return_type, wh=maybe_where_clause,
                                                                            be=block_expression
                                                                        })
                                                                
)
end)
 in ( LrTable.NT 52, ( result, func_qualifier1left, 
block_expression1right), rest671)
end
|  ( 123, ( ( _, ( _, CONST1left, CONST1right)) :: rest671)) => let
 val  result = MlyValue.func_qualifier (fn _ => ([ConstFQ]))
 in ( LrTable.NT 53, ( result, CONST1left, CONST1right), rest671)
end
|  ( 124, ( ( _, ( _, _, UNSAFE1right)) :: ( _, ( _, CONST1left, _))
 :: rest671)) => let val  result = MlyValue.func_qualifier (fn _ => (
[ConstFQ, UnsafeFQ]))
 in ( LrTable.NT 53, ( result, CONST1left, UNSAFE1right), rest671)
end
|  ( 125, ( ( _, ( _, _, EXTERN1right)) :: ( _, ( _, CONST1left, _))
 :: rest671)) => let val  result = MlyValue.func_qualifier (fn _ => (
[ConstFQ, ExternFQ(NONE)]))
 in ( LrTable.NT 53, ( result, CONST1left, EXTERN1right), rest671)
end
|  ( 126, ( ( _, ( MlyValue.abi abi1, _, abi1right)) :: _ :: ( _, ( _,
 CONST1left, _)) :: rest671)) => let val  result = 
MlyValue.func_qualifier (fn _ => let val  (abi as abi1) = abi1 ()
 in ([ConstFQ, ExternFQ(SOME(abi))])
end)
 in ( LrTable.NT 53, ( result, CONST1left, abi1right), rest671)
end
|  ( 127, ( ( _, ( _, _, EXTERN1right)) :: _ :: ( _, ( _, CONST1left,
 _)) :: rest671)) => let val  result = MlyValue.func_qualifier (fn _
 => ([ConstFQ, UnsafeFQ, ExternFQ(NONE)]))
 in ( LrTable.NT 53, ( result, CONST1left, EXTERN1right), rest671)
end
|  ( 128, ( ( _, ( MlyValue.abi abi1, _, abi1right)) :: _ :: _ :: ( _,
 ( _, CONST1left, _)) :: rest671)) => let val  result = 
MlyValue.func_qualifier (fn _ => let val  (abi as abi1) = abi1 ()
 in ([ConstFQ, UnsafeFQ, ExternFQ(SOME(abi))])
end)
 in ( LrTable.NT 53, ( result, CONST1left, abi1right), rest671)
end
|  ( 129, ( ( _, ( _, UNSAFE1left, UNSAFE1right)) :: rest671)) => let
 val  result = MlyValue.func_qualifier (fn _ => ([UnsafeFQ]))
 in ( LrTable.NT 53, ( result, UNSAFE1left, UNSAFE1right), rest671)

end
|  ( 130, ( ( _, ( _, _, EXTERN1right)) :: ( _, ( _, UNSAFE1left, _))
 :: rest671)) => let val  result = MlyValue.func_qualifier (fn _ => (
[UnsafeFQ, ExternFQ(NONE)]))
 in ( LrTable.NT 53, ( result, UNSAFE1left, EXTERN1right), rest671)

end
|  ( 131, ( ( _, ( MlyValue.abi abi1, _, abi1right)) :: _ :: ( _, ( _,
 UNSAFE1left, _)) :: rest671)) => let val  result = 
MlyValue.func_qualifier (fn _ => let val  (abi as abi1) = abi1 ()
 in ([UnsafeFQ, ExternFQ(SOME(abi))])
end)
 in ( LrTable.NT 53, ( result, UNSAFE1left, abi1right), rest671)
end
|  ( 132, ( ( _, ( _, EXTERN1left, EXTERN1right)) :: rest671)) => let
 val  result = MlyValue.func_qualifier (fn _ => ([ExternFQ(NONE)]))
 in ( LrTable.NT 53, ( result, EXTERN1left, EXTERN1right), rest671)

end
|  ( 133, ( ( _, ( MlyValue.abi abi1, _, abi1right)) :: ( _, ( _, 
EXTERN1left, _)) :: rest671)) => let val  result = 
MlyValue.func_qualifier (fn _ => let val  (abi as abi1) = abi1 ()
 in ([ExternFQ(SOME(abi))])
end)
 in ( LrTable.NT 53, ( result, EXTERN1left, abi1right), rest671)
end
|  ( 134, ( rest671)) => let val  result = MlyValue.func_qualifier (fn
 _ => ([]))
 in ( LrTable.NT 53, ( result, defaultPos, defaultPos), rest671)
end
|  ( 135, ( ( _, ( MlyValue.abi abi1, abi1left, abi1right)) :: rest671
)) => let val  result = MlyValue.maybe_abi (fn _ => let val  (abi as 
abi1) = abi1 ()
 in (SOME(abi))
end)
 in ( LrTable.NT 56, ( result, abi1left, abi1right), rest671)
end
|  ( 136, ( rest671)) => let val  result = MlyValue.maybe_abi (fn _ =>
 (NONE))
 in ( LrTable.NT 56, ( result, defaultPos, defaultPos), rest671)
end
|  ( 137, ( ( _, ( MlyValue.STR_LIT STR_LIT1, STR_LIT1left, 
STR_LIT1right)) :: rest671)) => let val  result = MlyValue.abi (fn _
 => let val  (STR_LIT as STR_LIT1) = STR_LIT1 ()
 in (Abi(STR_LIT))
end)
 in ( LrTable.NT 55, ( result, STR_LIT1left, STR_LIT1right), rest671)

end
|  ( 138, ( ( _, ( MlyValue.RAW_BYTE_STR_LIT RAW_BYTE_STR_LIT1, 
RAW_BYTE_STR_LIT1left, RAW_BYTE_STR_LIT1right)) :: rest671)) => let
 val  result = MlyValue.abi (fn _ => let val  (RAW_BYTE_STR_LIT as 
RAW_BYTE_STR_LIT1) = RAW_BYTE_STR_LIT1 ()
 in (Abi(RAW_BYTE_STR_LIT))
end)
 in ( LrTable.NT 55, ( result, RAW_BYTE_STR_LIT1left, 
RAW_BYTE_STR_LIT1right), rest671)
end
|  ( 139, ( ( _, ( MlyValue.func_parameters func_parameters1, 
func_parameters1left, func_parameters1right)) :: rest671)) => let val 
 result = MlyValue.maybe_func_parameters (fn _ => let val  (
func_parameters as func_parameters1) = func_parameters1 ()
 in (func_parameters)
end)
 in ( LrTable.NT 58, ( result, func_parameters1left, 
func_parameters1right), rest671)
end
|  ( 140, ( rest671)) => let val  result = 
MlyValue.maybe_func_parameters (fn _ => ([]))
 in ( LrTable.NT 58, ( result, defaultPos, defaultPos), rest671)
end
|  ( 141, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.func_parameters_expansion 
func_parameters_expansion1, _, _)) :: ( _, ( MlyValue.func_param 
func_param1, func_param1left, _)) :: rest671)) => let val  result = 
MlyValue.func_parameters (fn _ => let val  (func_param as func_param1)
 = func_param1 ()
 val  (func_parameters_expansion as func_parameters_expansion1) = 
func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in (func_param::func_parameters_expansion)
end)
 in ( LrTable.NT 57, ( result, func_param1left, maybe_comma1right), 
rest671)
end
|  ( 142, ( ( _, ( MlyValue.func_param func_param1, _, 
func_param1right)) :: _ :: ( _, ( MlyValue.func_parameters_expansion 
func_parameters_expansion1, func_parameters_expansion1left, _)) :: 
rest671)) => let val  result = MlyValue.func_parameters_expansion (fn
 _ => let val  (func_parameters_expansion as 
func_parameters_expansion1) = func_parameters_expansion1 ()
 val  (func_param as func_param1) = func_param1 ()
 in (func_param::func_parameters_expansion)
end)
 in ( LrTable.NT 60, ( result, func_parameters_expansion1left, 
func_param1right), rest671)
end
|  ( 143, ( rest671)) => let val  result = 
MlyValue.func_parameters_expansion (fn _ => (nil))
 in ( LrTable.NT 60, ( result, defaultPos, defaultPos), rest671)
end
|  ( 144, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _
, ( MlyValue.patterns patterns1, patterns1left, _)) :: rest671)) =>
 let val  result = MlyValue.func_param (fn _ => let val  (patterns as 
patterns1) = patterns1 ()
 val  (types as types1) = types1 ()
 in (FunctionParam (patterns, types))
end)
 in ( LrTable.NT 59, ( result, patterns1left, types1right), rest671)

end
|  ( 145, ( ( _, ( MlyValue.func_return_type func_return_type1, 
func_return_type1left, func_return_type1right)) :: rest671)) => let
 val  result = MlyValue.maybe_func_return_type (fn _ => let val  (
func_return_type as func_return_type1) = func_return_type1 ()
 in (SOME(func_return_type))
end)
 in ( LrTable.NT 62, ( result, func_return_type1left, 
func_return_type1right), rest671)
end
|  ( 146, ( rest671)) => let val  result = 
MlyValue.maybe_func_return_type (fn _ => (NONE))
 in ( LrTable.NT 62, ( result, defaultPos, defaultPos), rest671)
end
|  ( 147, ( ( _, ( MlyValue.types types1, _, types1right)) :: ( _, ( _
, RARROW1left, _)) :: rest671)) => let val  result = 
MlyValue.func_return_type (fn _ => let val  (types as types1) = types1
 ()
 in (types)
end)
 in ( LrTable.NT 61, ( result, RARROW1left, types1right), rest671)
end
|  ( 148, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( 
MlyValue.maybe_struct_fields maybe_struct_fields1, _, _)) :: _ :: ( _,
 ( MlyValue.maybe_where_clause maybe_where_clause1, _, _)) :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, STRUCT1left, _)) :: rest671
)) => let val  result = MlyValue.struct_struct (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 val  (maybe_generics as maybe_generics1) = maybe_generics1 ()
 val  (maybe_where_clause as maybe_where_clause1) = 
maybe_where_clause1 ()
 val  (maybe_struct_fields as maybe_struct_fields1) = 
maybe_struct_fields1 ()
 in (
StructStruct (Identifer(IDENT), maybe_generics, maybe_where_clause, maybe_struct_fields)
)
end)
 in ( LrTable.NT 66, ( result, STRUCT1left, RBRACE1right), rest671)

end
|  ( 149, ( ( _, ( _, _, SEMI1right)) :: ( _, ( 
MlyValue.maybe_where_clause maybe_where_clause1, _, _)) :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, STRUCT1left, _)) :: rest671
)) => let val  result = MlyValue.struct_struct (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 val  (maybe_generics as maybe_generics1) = maybe_generics1 ()
 val  (maybe_where_clause as maybe_where_clause1) = 
maybe_where_clause1 ()
 in (UnitStruct (Identifer(IDENT), maybe_generics, maybe_where_clause)
)
end)
 in ( LrTable.NT 66, ( result, STRUCT1left, SEMI1right), rest671)
end
|  ( 150, ( ( _, ( MlyValue.struct_fields struct_fields1, 
struct_fields1left, struct_fields1right)) :: rest671)) => let val  
result = MlyValue.maybe_struct_fields (fn _ => let val  (struct_fields
 as struct_fields1) = struct_fields1 ()
 in (struct_fields)
end)
 in ( LrTable.NT 69, ( result, struct_fields1left, struct_fields1right
), rest671)
end
|  ( 151, ( rest671)) => let val  result = 
MlyValue.maybe_struct_fields (fn _ => ([]))
 in ( LrTable.NT 69, ( result, defaultPos, defaultPos), rest671)
end
|  ( 152, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.struct_fields_expansion struct_fields_expansion1,
 _, _)) :: ( _, ( MlyValue.struct_field struct_field1, 
struct_field1left, _)) :: rest671)) => let val  result = 
MlyValue.struct_fields (fn _ => let val  (struct_field as 
struct_field1) = struct_field1 ()
 val  (struct_fields_expansion as struct_fields_expansion1) = 
struct_fields_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in (struct_field::struct_fields_expansion)
end)
 in ( LrTable.NT 67, ( result, struct_field1left, maybe_comma1right), 
rest671)
end
|  ( 153, ( ( _, ( MlyValue.struct_field struct_field1, _, 
struct_field1right)) :: _ :: ( _, ( MlyValue.struct_fields_expansion 
struct_fields_expansion1, struct_fields_expansion1left, _)) :: rest671
)) => let val  result = MlyValue.struct_fields_expansion (fn _ => let
 val  (struct_fields_expansion as struct_fields_expansion1) = 
struct_fields_expansion1 ()
 val  (struct_field as struct_field1) = struct_field1 ()
 in (struct_field::struct_fields_expansion)
end)
 in ( LrTable.NT 70, ( result, struct_fields_expansion1left, 
struct_field1right), rest671)
end
|  ( 154, ( rest671)) => let val  result = 
MlyValue.struct_fields_expansion (fn _ => (nil))
 in ( LrTable.NT 70, ( result, defaultPos, defaultPos), rest671)
end
|  ( 155, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _
, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( MlyValue.visibility 
visibility1, _, _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, 
outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.struct_field (fn _ => let val  (outer_attrs as outer_attrs1)
 = outer_attrs1 ()
 val  (visibility as visibility1) = visibility1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 val  (types as types1) = types1 ()
 in (StructField (outer_attrs, visibility, Identifer(IDENT), types))

end)
 in ( LrTable.NT 68, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 156, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _
, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( MlyValue.outer_attrs 
outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.struct_field (fn _ => let val  (outer_attrs as outer_attrs1)
 = outer_attrs1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 val  (types as types1) = types1 ()
 in (StructField (outer_attrs, DefaultVis, Identifer(IDENT), types))

end)
 in ( LrTable.NT 68, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 157, ( ( _, ( _, _, SEMI1right)) :: ( _, ( 
MlyValue.maybe_where_clause maybe_where_clause1, _, _)) :: _ :: ( _, (
 MlyValue.maybe_tuple_fields maybe_tuple_fields1, _, _)) :: _ :: ( _, 
( MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, STRUCT1left, _)) :: rest671
)) => let val  result = MlyValue.tuple_struct (fn _ => let val  (IDENT
 as IDENT1) = IDENT1 ()
 val  (maybe_generics as maybe_generics1) = maybe_generics1 ()
 val  (maybe_tuple_fields as maybe_tuple_fields1) = 
maybe_tuple_fields1 ()
 val  (maybe_where_clause as maybe_where_clause1) = 
maybe_where_clause1 ()
 in (
TupleStruct (Identifer(IDENT), maybe_generics, maybe_tuple_fields, maybe_where_clause)
)
end)
 in ( LrTable.NT 71, ( result, STRUCT1left, SEMI1right), rest671)
end
|  ( 158, ( ( _, ( MlyValue.tuple_fields tuple_fields1, 
tuple_fields1left, tuple_fields1right)) :: rest671)) => let val  
result = MlyValue.maybe_tuple_fields (fn _ => let val  (tuple_fields
 as tuple_fields1) = tuple_fields1 ()
 in (tuple_fields)
end)
 in ( LrTable.NT 74, ( result, tuple_fields1left, tuple_fields1right),
 rest671)
end
|  ( 159, ( rest671)) => let val  result = MlyValue.maybe_tuple_fields
 (fn _ => ([]))
 in ( LrTable.NT 74, ( result, defaultPos, defaultPos), rest671)
end
|  ( 160, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.tuple_fields_expansion tuple_fields_expansion1, _
, _)) :: ( _, ( MlyValue.tuple_field tuple_field1, tuple_field1left, _
)) :: rest671)) => let val  result = MlyValue.tuple_fields (fn _ =>
 let val  (tuple_field as tuple_field1) = tuple_field1 ()
 val  (tuple_fields_expansion as tuple_fields_expansion1) = 
tuple_fields_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in (tuple_field::tuple_fields_expansion)
end)
 in ( LrTable.NT 72, ( result, tuple_field1left, maybe_comma1right), 
rest671)
end
|  ( 161, ( ( _, ( MlyValue.tuple_field tuple_field1, _, 
tuple_field1right)) :: _ :: ( _, ( MlyValue.tuple_fields_expansion 
tuple_fields_expansion1, tuple_fields_expansion1left, _)) :: rest671))
 => let val  result = MlyValue.tuple_fields_expansion (fn _ => let
 val  (tuple_fields_expansion as tuple_fields_expansion1) = 
tuple_fields_expansion1 ()
 val  (tuple_field as tuple_field1) = tuple_field1 ()
 in (tuple_field::tuple_fields_expansion)
end)
 in ( LrTable.NT 75, ( result, tuple_fields_expansion1left, 
tuple_field1right), rest671)
end
|  ( 162, ( rest671)) => let val  result = 
MlyValue.tuple_fields_expansion (fn _ => (nil))
 in ( LrTable.NT 75, ( result, defaultPos, defaultPos), rest671)
end
|  ( 163, ( ( _, ( MlyValue.types types1, _, types1right)) :: ( _, ( 
MlyValue.visibility visibility1, _, _)) :: ( _, ( MlyValue.outer_attrs
 outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result =
 MlyValue.tuple_field (fn _ => let val  (outer_attrs as outer_attrs1)
 = outer_attrs1 ()
 val  (visibility as visibility1) = visibility1 ()
 val  (types as types1) = types1 ()
 in (TupleField (outer_attrs, visibility, types))
end)
 in ( LrTable.NT 73, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 164, ( ( _, ( MlyValue.types types1, _, types1right)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.tuple_field (fn _ => let val  (
outer_attrs as outer_attrs1) = outer_attrs1 ()
 val  (types as types1) = types1 ()
 in (TupleField (outer_attrs, DefaultVis, types))
end)
 in ( LrTable.NT 73, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 165, ( ( _, ( MlyValue.ntVOID enum_items1, enum_items1left, 
enum_items1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  enum_items1 = enum_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 77, ( result, enum_items1left, enum_items1right), 
rest671)
end
|  ( 166, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 77, ( result, defaultPos, defaultPos), rest671)
end
|  ( 167, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID enum_items_expansion1, _, _)) :: ( _, ( 
MlyValue.ntVOID enum_item1, enum_item1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  enum_item1 = 
enum_item1 ()
 val  enum_items_expansion1 = enum_items_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in (yaccLog("enum_items"))
end; ()))
 in ( LrTable.NT 76, ( result, enum_item1left, maybe_comma1right), 
rest671)
end
|  ( 168, ( ( _, ( MlyValue.ntVOID enum_item1, _, enum_item1right)) ::
 _ :: ( _, ( MlyValue.ntVOID enum_items_expansion1, 
enum_items_expansion1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  enum_items_expansion1 = 
enum_items_expansion1 ()
 val  enum_item1 = enum_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 78, ( result, enum_items_expansion1left, 
enum_item1right), rest671)
end
|  ( 169, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 78, ( result, defaultPos, defaultPos), rest671)
end
|  ( 170, ( ( _, ( MlyValue.ntVOID enum_item_tuple1, _, 
enum_item_tuple1right)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _
, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  enum_item_tuple1 = enum_item_tuple1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, enum_item_tuple1right
), rest671)
end
|  ( 171, ( ( _, ( MlyValue.ntVOID enum_item_struct1, _, 
enum_item_struct1right)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: (
 _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  enum_item_struct1 = enum_item_struct1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, 
enum_item_struct1right), rest671)
end
|  ( 172, ( ( _, ( MlyValue.ntVOID enum_item_discriminant1, _, 
enum_item_discriminant1right)) :: ( _, ( MlyValue.IDENT IDENT1, _, _))
 :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  enum_item_discriminant1 = enum_item_discriminant1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, 
enum_item_discriminant1right), rest671)
end
|  ( 173, ( ( _, ( MlyValue.IDENT IDENT1, _, IDENT1right)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 in (yaccLog("enum_item: branch 4"))
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, IDENT1right), rest671
)
end
|  ( 174, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( 
MlyValue.maybe_tuple_fields maybe_tuple_fields1, _, _)) :: ( _, ( _, 
LPARENT1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  maybe_tuple_fields1 = maybe_tuple_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 80, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 175, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( 
MlyValue.maybe_struct_fields maybe_struct_fields1, _, _)) :: ( _, ( _,
 LBRACE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  maybe_struct_fields1 = maybe_struct_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 81, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 176, ( ( _, ( MlyValue.ntVOID expression1, _, expression1right))
 :: ( _, ( _, EQ1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  expression1 = expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 82, ( result, EQ1left, expression1right), rest671)

end
|  ( 177, ( ( _, ( MlyValue.ntVOID trait_items1, _, trait_items1right)
) :: ( _, ( MlyValue.ntVOID trait_item1, trait_item1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
trait_item1 = trait_item1 ()
 val  trait_items1 = trait_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 98, ( result, trait_item1left, trait_items1right), 
rest671)
end
|  ( 178, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 98, ( result, defaultPos, defaultPos), rest671)
end
|  ( 179, ( ( _, ( MlyValue.ntVOID trait_func1, _, trait_func1right))
 :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  trait_func1 = trait_func1 ()
 in ()
end; ()))
 in ( LrTable.NT 99, ( result, outer_attrs1left, trait_func1right), 
rest671)
end
|  ( 180, ( ( _, ( MlyValue.ntVOID trait_method1, _, 
trait_method1right)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, 
outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  trait_method1 = trait_method1 ()
 in ()
end; ()))
 in ( LrTable.NT 99, ( result, outer_attrs1left, trait_method1right), 
rest671)
end
|  ( 181, ( ( _, ( MlyValue.ntVOID trait_const1, _, trait_const1right)
) :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 outer_attrs1 = outer_attrs1 ()
 val  trait_const1 = trait_const1 ()
 in ()
end; ()))
 in ( LrTable.NT 99, ( result, outer_attrs1left, trait_const1right), 
rest671)
end
|  ( 182, ( ( _, ( MlyValue.ntVOID trait_type1, _, trait_type1right))
 :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  trait_type1 = trait_type1 ()
 in ()
end; ()))
 in ( LrTable.NT 99, ( result, outer_attrs1left, trait_type1right), 
rest671)
end
|  ( 183, ( ( _, ( MlyValue.ntVOID marco_invocation_semi1, 
marco_invocation_semi1left, marco_invocation_semi1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
marco_invocation_semi1 = marco_invocation_semi1 ()
 in ()
end; ()))
 in ( LrTable.NT 99, ( result, marco_invocation_semi1left, 
marco_invocation_semi1right), rest671)
end
|  ( 184, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
trait_func_decl1, trait_func_decl1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  trait_func_decl1 = 
trait_func_decl1 ()
 in ()
end; ()))
 in ( LrTable.NT 100, ( result, trait_func_decl1left, SEMI1right), 
rest671)
end
|  ( 185, ( ( _, ( MlyValue.block_expression block_expression1, _, 
block_expression1right)) :: ( _, ( MlyValue.ntVOID trait_func_decl1, 
trait_func_decl1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  trait_func_decl1 = 
trait_func_decl1 ()
 val  block_expression1 = block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 100, ( result, trait_func_decl1left, 
block_expression1right), rest671)
end
|  ( 186, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
trait_method_decl1, trait_method_decl1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  trait_method_decl1
 = trait_method_decl1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, trait_method_decl1left, SEMI1right), 
rest671)
end
|  ( 187, ( ( _, ( MlyValue.block_expression block_expression1, 
block_expression1left, block_expression1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  block_expression1 =
 block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, block_expression1left, 
block_expression1right), rest671)
end
|  ( 188, ( ( _, ( MlyValue.where_clause where_clause1, _, 
where_clause1right)) :: ( _, ( MlyValue.maybe_func_return_type 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_trait_func_parameters1, _, _)) :: _ :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( MlyValue.func_qualifier 
func_qualifier1, func_qualifier1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  func_qualifier1 = 
func_qualifier1 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_trait_func_parameters1 = maybe_trait_func_parameters1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  where_clause1 = where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 105, ( result, func_qualifier1left, 
where_clause1right), rest671)
end
|  ( 189, ( ( _, ( MlyValue.ntVOID trait_func_parameters1, 
trait_func_parameters1left, trait_func_parameters1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
trait_func_parameters1 = trait_func_parameters1 ()
 in ()
end; ()))
 in ( LrTable.NT 109, ( result, trait_func_parameters1left, 
trait_func_parameters1right), rest671)
end
|  ( 190, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 109, ( result, defaultPos, defaultPos), rest671)
end
|  ( 191, ( ( _, ( MlyValue.maybe_where_clause maybe_where_clause1, _,
 maybe_where_clause1right)) :: ( _, ( MlyValue.maybe_func_return_type 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_comma1, _, _)) :: ( _, ( MlyValue.ntVOID 
trait_func_parameters_expansion1, _, _)) :: ( _, ( MlyValue.ntVOID 
self_param1, _, _)) :: _ :: ( _, ( MlyValue.maybe_generics 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _
 :: ( _, ( MlyValue.func_qualifier func_qualifier1, 
func_qualifier1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  func_qualifier1 = func_qualifier1
 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  self_param1 = self_param1 ()
 val  trait_func_parameters_expansion1 = 
trait_func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 106, ( result, func_qualifier1left, 
maybe_where_clause1right), rest671)
end
|  ( 192, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID trait_func_parameters_expansion1, _, _))
 :: ( _, ( MlyValue.ntVOID trait_func_param1, trait_func_param1left, _
)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  trait_func_param1 = trait_func_param1 ()
 val  trait_func_parameters_expansion1 = 
trait_func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 107, ( result, trait_func_param1left, 
maybe_comma1right), rest671)
end
|  ( 193, ( ( _, ( MlyValue.ntVOID trait_func_param1, _, 
trait_func_param1right)) :: _ :: ( _, ( MlyValue.ntVOID 
trait_func_parameters_expansion1, trait_func_parameters_expansion1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  trait_func_parameters_expansion1 = 
trait_func_parameters_expansion1 ()
 val  trait_func_param1 = trait_func_param1 ()
 in ()
end; ()))
 in ( LrTable.NT 110, ( result, trait_func_parameters_expansion1left, 
trait_func_param1right), rest671)
end
|  ( 194, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 110, ( result, defaultPos, defaultPos), rest671)
end
|  ( 195, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _
, ( MlyValue.patterns patterns1, patterns1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  patterns1 = 
patterns1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 108, ( result, patterns1left, types1right), rest671)

end
|  ( 196, ( ( _, ( MlyValue.types types1, types1left, types1right)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 108, ( result, types1left, types1right), rest671)
end
|  ( 197, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.types types1,
 _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
CONST1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 102, ( result, CONST1left, SEMI1right), rest671)
end
|  ( 198, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.types types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, CONST1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 102, ( result, CONST1left, SEMI1right), rest671)
end
|  ( 199, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
maybe_trait_super1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: 
( _, ( _, TYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_trait_super1 = maybe_trait_super1 ()
 in ()
end; ()))
 in ( LrTable.NT 103, ( result, TYPE1left, SEMI1right), rest671)
end
|  ( 200, ( ( _, ( MlyValue.maybe_type_param_bounds 
maybe_type_param_bounds1, _, maybe_type_param_bounds1right)) :: ( _, (
 _, COLON1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  maybe_type_param_bounds1 = 
maybe_type_param_bounds1 ()
 in ()
end; ()))
 in ( LrTable.NT 85, ( result, COLON1left, 
maybe_type_param_bounds1right), rest671)
end
|  ( 201, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 85, ( result, defaultPos, defaultPos), rest671)
end
|  ( 202, ( ( _, ( MlyValue.type_param_bounds type_param_bounds1, 
type_param_bounds1left, type_param_bounds1right)) :: rest671)) => let
 val  result = MlyValue.maybe_type_param_bounds (fn _ => let val  (
type_param_bounds as type_param_bounds1) = type_param_bounds1 ()
 in (SOME(type_param_bounds))
end)
 in ( LrTable.NT 86, ( result, type_param_bounds1left, 
type_param_bounds1right), rest671)
end
|  ( 203, ( rest671)) => let val  result = 
MlyValue.maybe_type_param_bounds (fn _ => (NONE))
 in ( LrTable.NT 86, ( result, defaultPos, defaultPos), rest671)
end
|  ( 204, ( ( _, ( MlyValue.type_param_bounds_expansion 
type_param_bounds_expansion1, _, type_param_bounds_expansion1right))
 :: ( _, ( MlyValue.type_param_bound type_param_bound1, 
type_param_bound1left, _)) :: rest671)) => let val  result = 
MlyValue.type_param_bounds (fn _ => let val  (type_param_bound as 
type_param_bound1) = type_param_bound1 ()
 val  (type_param_bounds_expansion as type_param_bounds_expansion1) = 
type_param_bounds_expansion1 ()
 in (TypeParamBounds(type_param_bound::type_param_bounds_expansion))

end)
 in ( LrTable.NT 87, ( result, type_param_bound1left, 
type_param_bounds_expansion1right), rest671)
end
|  ( 205, ( ( _, ( _, _, PLUS1right)) :: ( _, ( 
MlyValue.type_param_bounds_expansion type_param_bounds_expansion1, _,
 _)) :: ( _, ( MlyValue.type_param_bound type_param_bound1, 
type_param_bound1left, _)) :: rest671)) => let val  result = 
MlyValue.type_param_bounds (fn _ => let val  (type_param_bound as 
type_param_bound1) = type_param_bound1 ()
 val  (type_param_bounds_expansion as type_param_bounds_expansion1) = 
type_param_bounds_expansion1 ()
 in (TypeParamBounds(type_param_bound::type_param_bounds_expansion))

end)
 in ( LrTable.NT 87, ( result, type_param_bound1left, PLUS1right), 
rest671)
end
|  ( 206, ( ( _, ( MlyValue.type_param_bound type_param_bound1, _, 
type_param_bound1right)) :: _ :: ( _, ( 
MlyValue.type_param_bounds_expansion type_param_bounds_expansion1, 
type_param_bounds_expansion1left, _)) :: rest671)) => let val  result
 = MlyValue.type_param_bounds_expansion (fn _ => let val  (
type_param_bounds_expansion as type_param_bounds_expansion1) = 
type_param_bounds_expansion1 ()
 val  (type_param_bound as type_param_bound1) = type_param_bound1 ()
 in (type_param_bound::type_param_bounds_expansion)
end)
 in ( LrTable.NT 88, ( result, type_param_bounds_expansion1left, 
type_param_bound1right), rest671)
end
|  ( 207, ( rest671)) => let val  result = 
MlyValue.type_param_bounds_expansion (fn _ => (nil))
 in ( LrTable.NT 88, ( result, defaultPos, defaultPos), rest671)
end
|  ( 208, ( ( _, ( MlyValue.lifetime lifetime1, lifetime1left, 
lifetime1right)) :: rest671)) => let val  result = 
MlyValue.type_param_bound (fn _ => let val  (lifetime as lifetime1) = 
lifetime1 ()
 in (LTB(lifetime))
end)
 in ( LrTable.NT 89, ( result, lifetime1left, lifetime1right), rest671
)
end
|  ( 209, ( ( _, ( MlyValue.trait_bound trait_bound1, trait_bound1left
, trait_bound1right)) :: rest671)) => let val  result = 
MlyValue.type_param_bound (fn _ => let val  (trait_bound as 
trait_bound1) = trait_bound1 ()
 in (TB(trait_bound))
end)
 in ( LrTable.NT 89, ( result, trait_bound1left, trait_bound1right), 
rest671)
end
|  ( 210, ( ( _, ( MlyValue.lifetime_bounds_expansion 
lifetime_bounds_expansion1, lifetime_bounds_expansion1left, 
lifetime_bounds_expansion1right)) :: rest671)) => let val  result = 
MlyValue.lifetime_bounds (fn _ => let val  (lifetime_bounds_expansion
 as lifetime_bounds_expansion1) = lifetime_bounds_expansion1 ()
 in (LifetimeBounds(lifetime_bounds_expansion))
end)
 in ( LrTable.NT 91, ( result, lifetime_bounds_expansion1left, 
lifetime_bounds_expansion1right), rest671)
end
|  ( 211, ( ( _, ( MlyValue.lifetime lifetime1, _, lifetime1right)) ::
 ( _, ( MlyValue.lifetime_bounds_expansion lifetime_bounds_expansion1,
 lifetime_bounds_expansion1left, _)) :: rest671)) => let val  result =
 MlyValue.lifetime_bounds (fn _ => let val  (lifetime_bounds_expansion
 as lifetime_bounds_expansion1) = lifetime_bounds_expansion1 ()
 val  (lifetime as lifetime1) = lifetime1 ()
 in (LifetimeBounds(lifetime::lifetime_bounds_expansion))
end)
 in ( LrTable.NT 91, ( result, lifetime_bounds_expansion1left, 
lifetime1right), rest671)
end
|  ( 212, ( ( _, ( _, _, PLUS1right)) :: ( _, ( MlyValue.lifetime 
lifetime1, _, _)) :: ( _, ( MlyValue.lifetime_bounds_expansion 
lifetime_bounds_expansion1, lifetime_bounds_expansion1left, _)) :: 
rest671)) => let val  result = MlyValue.lifetime_bounds_expansion (fn
 _ => let val  (lifetime_bounds_expansion as 
lifetime_bounds_expansion1) = lifetime_bounds_expansion1 ()
 val  (lifetime as lifetime1) = lifetime1 ()
 in (lifetime::lifetime_bounds_expansion)
end)
 in ( LrTable.NT 92, ( result, lifetime_bounds_expansion1left, 
PLUS1right), rest671)
end
|  ( 213, ( rest671)) => let val  result = 
MlyValue.lifetime_bounds_expansion (fn _ => (nil))
 in ( LrTable.NT 92, ( result, defaultPos, defaultPos), rest671)
end
|  ( 214, ( ( _, ( MlyValue.lifetime lifetime1, lifetime1left, 
lifetime1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  lifetime1 = lifetime1 ()
 in ()
end; ()))
 in ( LrTable.NT 93, ( result, lifetime1left, lifetime1right), rest671
)
end
|  ( 215, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 93, ( result, defaultPos, defaultPos), rest671)
end
|  ( 216, ( ( _, ( MlyValue.LIFETIME_OR_LABEL LIFETIME_OR_LABEL1, 
LIFETIME_OR_LABEL1left, LIFETIME_OR_LABEL1right)) :: rest671)) => let
 val  result = MlyValue.lifetime (fn _ => let val  (LIFETIME_OR_LABEL
 as LIFETIME_OR_LABEL1) = LIFETIME_OR_LABEL1 ()
 in (LifetimeOrLabel(LIFETIME_OR_LABEL))
end)
 in ( LrTable.NT 90, ( result, LIFETIME_OR_LABEL1left, 
LIFETIME_OR_LABEL1right), rest671)
end
|  ( 217, ( ( _, ( _, STATICLIFETIME1left, STATICLIFETIME1right)) :: 
rest671)) => let val  result = MlyValue.lifetime (fn _ => (
StaticLifetime))
 in ( LrTable.NT 90, ( result, STATICLIFETIME1left, 
STATICLIFETIME1right), rest671)
end
|  ( 218, ( ( _, ( MlyValue.type_path type_path1, type_path1left, 
type_path1right)) :: rest671)) => let val  result = 
MlyValue.trait_bound (fn _ => let val  (type_path as type_path1) = 
type_path1 ()
 in (TraitBound(NONE, NONE, type_path))
end)
 in ( LrTable.NT 94, ( result, type_path1left, type_path1right), 
rest671)
end
|  ( 219, ( ( _, ( MlyValue.type_path type_path1, _, type_path1right))
 :: ( _, ( MlyValue.for_lifetimes for_lifetimes1, for_lifetimes1left,
 _)) :: rest671)) => let val  result = MlyValue.trait_bound (fn _ =>
 let val  (for_lifetimes as for_lifetimes1) = for_lifetimes1 ()
 val  (type_path as type_path1) = type_path1 ()
 in (TraitBound(NONE, SOME(for_lifetimes), type_path))
end)
 in ( LrTable.NT 94, ( result, for_lifetimes1left, type_path1right), 
rest671)
end
|  ( 220, ( ( _, ( MlyValue.type_path type_path1, _, type_path1right))
 :: ( _, ( MlyValue.maybe_for_lifetimes maybe_for_lifetimes1, _, _))
 :: ( _, ( _, QUESTION1left, _)) :: rest671)) => let val  result = 
MlyValue.trait_bound (fn _ => let val  (maybe_for_lifetimes as 
maybe_for_lifetimes1) = maybe_for_lifetimes1 ()
 val  (type_path as type_path1) = type_path1 ()
 in (TraitBound(SOME(Sized), maybe_for_lifetimes, type_path))
end)
 in ( LrTable.NT 94, ( result, QUESTION1left, type_path1right), 
rest671)
end
|  ( 221, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.type_path 
type_path1, _, _)) :: ( _, ( MlyValue.maybe_for_lifetimes 
maybe_for_lifetimes1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: rest671
)) => let val  result = MlyValue.trait_bound (fn _ => let val  (
maybe_for_lifetimes as maybe_for_lifetimes1) = maybe_for_lifetimes1 ()
 val  (type_path as type_path1) = type_path1 ()
 in (TraitBound(NONE, maybe_for_lifetimes, type_path))
end)
 in ( LrTable.NT 94, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 222, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.type_path 
type_path1, _, _)) :: ( _, ( MlyValue.maybe_for_lifetimes 
maybe_for_lifetimes1, _, _)) :: _ :: ( _, ( _, LPARENT1left, _)) :: 
rest671)) => let val  result = MlyValue.trait_bound (fn _ => let val 
 (maybe_for_lifetimes as maybe_for_lifetimes1) = maybe_for_lifetimes1
 ()
 val  (type_path as type_path1) = type_path1 ()
 in (TraitBound(SOME(Sized), maybe_for_lifetimes, type_path))
end)
 in ( LrTable.NT 94, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 223, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) ::
 rest671)) => let val  result = MlyValue.type_path (fn _ => let val  
IDENT1 = IDENT1 ()
 in (TypePath)
end)
 in ( LrTable.NT 96, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 224, ( ( _, ( _, _, SELFVALUE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_mut1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_and_or_lifetime1, 
maybe_and_or_lifetime1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  maybe_and_or_lifetime1 = 
maybe_and_or_lifetime1 ()
 val  maybe_mut1 = maybe_mut1 ()
 in ()
end; ()))
 in ( LrTable.NT 111, ( result, maybe_and_or_lifetime1left, 
SELFVALUE1right), rest671)
end
|  ( 225, ( ( _, ( _, _, SELFVALUE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_mut1, maybe_mut1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  maybe_mut1 = maybe_mut1 ()
 in ()
end; ()))
 in ( LrTable.NT 111, ( result, maybe_mut1left, SELFVALUE1right), 
rest671)
end
|  ( 226, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: _
 :: ( _, ( MlyValue.ntVOID maybe_mut1, maybe_mut1left, _)) :: rest671)
) => let val  result = MlyValue.ntVOID (fn _ => ( let val  maybe_mut1
 = maybe_mut1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 111, ( result, maybe_mut1left, types1right), rest671)

end
|  ( 227, ( ( _, ( _, AND1left, AND1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 112, ( result, AND1left, AND1right), rest671)
end
|  ( 228, ( ( _, ( MlyValue.lifetime lifetime1, _, lifetime1right)) ::
 ( _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  lifetime1 = lifetime1 ()
 in ()
end; ()))
 in ( LrTable.NT 112, ( result, AND1left, lifetime1right), rest671)

end
|  ( 229, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
inherent_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs 
inner_attrs1, _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.types types1, _, _)) ::
 ( _, ( MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( _, 
IMPL1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _
 => ( let val  maybe_generics1 = maybe_generics1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  inherent_impl_items1 = inherent_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 114, ( result, IMPL1left, RBRACE1right), rest671)
end
|  ( 230, ( ( _, ( MlyValue.ntVOID inherent_impl_items1, _, 
inherent_impl_items1right)) :: ( _, ( MlyValue.ntVOID 
inherent_impl_item1, inherent_impl_item1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  inherent_impl_item1
 = inherent_impl_item1 ()
 val  inherent_impl_items1 = inherent_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 116, ( result, inherent_impl_item1left, 
inherent_impl_items1right), rest671)
end
|  ( 231, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 116, ( result, defaultPos, defaultPos), rest671)
end
|  ( 232, ( ( _, ( MlyValue.ntVOID marco_invocation_semi1, _, 
marco_invocation_semi1right)) :: ( _, ( MlyValue.outer_attrs 
outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  marco_invocation_semi1 = marco_invocation_semi1 ()
 in ()
end; ()))
 in ( LrTable.NT 118, ( result, outer_attrs1left, 
marco_invocation_semi1right), rest671)
end
|  ( 233, ( ( _, ( MlyValue.ntVOID constant_item1, _, 
constant_item1right)) :: ( _, ( MlyValue.ntVOID maybe_visibility1, _,
 _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)
) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  outer_attrs1 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  constant_item1 = constant_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 118, ( result, outer_attrs1left, constant_item1right)
, rest671)
end
|  ( 234, ( ( _, ( MlyValue.function function1, _, function1right)) ::
 ( _, ( MlyValue.ntVOID maybe_visibility1, _, _)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  function1 = function1 ()
 in ()
end; ()))
 in ( LrTable.NT 118, ( result, outer_attrs1left, function1right), 
rest671)
end
|  ( 235, ( ( _, ( MlyValue.ntVOID method1, _, method1right)) :: ( _, 
( MlyValue.ntVOID maybe_visibility1, _, _)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  method1 = method1 ()
 in ()
end; ()))
 in ( LrTable.NT 118, ( result, outer_attrs1left, method1right), 
rest671)
end
|  ( 236, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.types types1, _, _)) :: _ :: ( _, ( 
MlyValue.type_path type_path1, _, _)) :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( _, IMPL1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  maybe_generics1 = maybe_generics1 ()
 val  type_path1 = type_path1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 115, ( result, IMPL1left, RBRACE1right), rest671)
end
|  ( 237, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.types types1, _, _)) :: _ :: ( _, ( 
MlyValue.type_path type_path1, _, _)) :: _ :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( _, IMPL1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  maybe_generics1 = maybe_generics1 ()
 val  type_path1 = type_path1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 115, ( result, IMPL1left, RBRACE1right), rest671)
end
|  ( 238, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.types types1, _, _)) :: _ :: ( _, ( 
MlyValue.type_path type_path1, _, _)) :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: _ :: ( _, ( _, 
UNSAFE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  maybe_generics1 = maybe_generics1 ()
 val  type_path1 = type_path1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 115, ( result, UNSAFE1left, RBRACE1right), rest671)

end
|  ( 239, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: _ :: ( _, ( MlyValue.maybe_where_clause maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.types types1, _, _)) :: _ :: ( _, ( 
MlyValue.type_path type_path1, _, _)) :: _ :: ( _, ( 
MlyValue.maybe_generics maybe_generics1, _, _)) :: _ :: ( _, ( _, 
UNSAFE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  maybe_generics1 = maybe_generics1 ()
 val  type_path1 = type_path1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 115, ( result, UNSAFE1left, RBRACE1right), rest671)

end
|  ( 240, ( ( _, ( MlyValue.ntVOID trait_impl_items1, _, 
trait_impl_items1right)) :: ( _, ( MlyValue.ntVOID trait_impl_item1, 
trait_impl_item1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  trait_impl_item1 = 
trait_impl_item1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 119, ( result, trait_impl_item1left, 
trait_impl_items1right), rest671)
end
|  ( 241, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 119, ( result, defaultPos, defaultPos), rest671)
end
|  ( 242, ( ( _, ( MlyValue.ntVOID marco_invocation_semi1, _, 
marco_invocation_semi1right)) :: ( _, ( MlyValue.outer_attrs 
outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  marco_invocation_semi1 = marco_invocation_semi1 ()
 in ()
end; ()))
 in ( LrTable.NT 121, ( result, outer_attrs1left, 
marco_invocation_semi1right), rest671)
end
|  ( 243, ( ( _, ( MlyValue.type_alias type_alias1, _, 
type_alias1right)) :: ( _, ( MlyValue.ntVOID maybe_visibility1, 
maybe_visibility1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  maybe_visibility1 = 
maybe_visibility1 ()
 val  type_alias1 = type_alias1 ()
 in ()
end; ()))
 in ( LrTable.NT 121, ( result, maybe_visibility1left, 
type_alias1right), rest671)
end
|  ( 244, ( ( _, ( MlyValue.ntVOID constant_item1, constant_item1left,
 constant_item1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  constant_item1 = constant_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 121, ( result, constant_item1left, 
constant_item1right), rest671)
end
|  ( 245, ( ( _, ( MlyValue.function function1, function1left, 
function1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  function1 = function1 ()
 in ()
end; ()))
 in ( LrTable.NT 121, ( result, function1left, function1right), 
rest671)
end
|  ( 246, ( ( _, ( MlyValue.ntVOID method1, method1left, method1right)
) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  method1 = method1 ()
 in ()
end; ()))
 in ( LrTable.NT 121, ( result, method1left, method1right), rest671)

end
|  ( 247, ( ( _, ( MlyValue.block_expression block_expression1, _, 
block_expression1right)) :: ( _, ( MlyValue.maybe_where_clause 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.maybe_func_return_type 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_comma1, _, _)) :: ( _, ( MlyValue.func_parameters_expansion 
func_parameters_expansion1, _, _)) :: ( _, ( MlyValue.ntVOID 
self_param1, _, _)) :: _ :: ( _, ( MlyValue.maybe_generics 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _
 :: ( _, ( MlyValue.func_qualifier func_qualifier1, 
func_qualifier1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  func_qualifier1 = func_qualifier1
 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  self_param1 = self_param1 ()
 val  func_parameters_expansion1 = func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  block_expression1 = block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 122, ( result, func_qualifier1left, 
block_expression1right), rest671)
end
|  ( 248, ( ( _, ( _, _, NOT1right)) :: ( _, ( MlyValue.simple_path 
simple_path1, simple_path1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  simple_path1 = simple_path1 ()
 in ()
end; ()))
 in ( LrTable.NT 104, ( result, simple_path1left, NOT1right), rest671)

end
|  ( 249, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
external_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1, _
, _)) :: _ :: ( _, ( MlyValue.maybe_abi maybe_abi1, _, _)) :: ( _, ( _
, EXTERN1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  maybe_abi1 = maybe_abi1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  external_items1 = external_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 123, ( result, EXTERN1left, RBRACE1right), rest671)

end
|  ( 250, ( ( _, ( MlyValue.ntVOID external_item1, _, 
external_item1right)) :: ( _, ( MlyValue.ntVOID external_items1, 
external_items1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  external_items1 = external_items1
 ()
 val  external_item1 = external_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 124, ( result, external_items1left, 
external_item1right), rest671)
end
|  ( 251, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 124, ( result, defaultPos, defaultPos), rest671)
end
|  ( 252, ( ( _, ( MlyValue.ntVOID external_static_item1, _, 
external_static_item1right)) :: ( _, ( MlyValue.ntVOID 
maybe_visibility1, _, _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1,
 outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  external_static_item1 = external_static_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 125, ( result, outer_attrs1left, 
external_static_item1right), rest671)
end
|  ( 253, ( ( _, ( MlyValue.ntVOID external_func_item1, _, 
external_func_item1right)) :: ( _, ( MlyValue.ntVOID maybe_visibility1
, _, _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  outer_attrs1 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  external_func_item1 = external_func_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 125, ( result, outer_attrs1left, 
external_func_item1right), rest671)
end
|  ( 254, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.types types1,
 _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( 
MlyValue.ntVOID maybe_mut1, _, _)) :: ( _, ( _, STATIC1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_mut1 = maybe_mut1 ()
 val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 126, ( result, STATIC1left, SEMI1right), rest671)
end
|  ( 255, ( ( _, ( _, _, SEMI1right)) :: ( _, ( 
MlyValue.maybe_where_clause maybe_where_clause1, _, _)) :: ( _, ( 
MlyValue.maybe_func_return_type maybe_func_return_type1, _, _)) :: _
 :: ( _, ( MlyValue.ntVOID maybe_named_func_parameters1, _, _)) :: _
 :: ( _, ( MlyValue.maybe_generics maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, FN1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENT1 = 
IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_named_func_parameters1 = maybe_named_func_parameters1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 127, ( result, FN1left, SEMI1right), rest671)
end
|  ( 256, ( ( _, ( _, _, SEMI1right)) :: ( _, ( 
MlyValue.maybe_where_clause maybe_where_clause1, _, _)) :: ( _, ( 
MlyValue.maybe_func_return_type maybe_func_return_type1, _, _)) :: _
 :: ( _, ( MlyValue.ntVOID named_func_parameters_with_variadics1, _, _
)) :: _ :: ( _, ( MlyValue.maybe_generics maybe_generics1, _, _)) :: (
 _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, FN1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  named_func_parameters_with_variadics1 = 
named_func_parameters_with_variadics1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 127, ( result, FN1left, SEMI1right), rest671)
end
|  ( 257, ( ( _, ( MlyValue.ntVOID named_func_parameters1, 
named_func_parameters1left, named_func_parameters1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
named_func_parameters1 = named_func_parameters1 ()
 in ()
end; ()))
 in ( LrTable.NT 128, ( result, named_func_parameters1left, 
named_func_parameters1right), rest671)
end
|  ( 258, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 128, ( result, defaultPos, defaultPos), rest671)
end
|  ( 259, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID named_func_parameters_expansion1, _, _))
 :: ( _, ( MlyValue.ntVOID named_func_param1, named_func_param1left, _
)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  named_func_param1 = named_func_param1 ()
 val  named_func_parameters_expansion1 = 
named_func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 129, ( result, named_func_param1left, 
maybe_comma1right), rest671)
end
|  ( 260, ( ( _, ( MlyValue.ntVOID named_func_param1, _, 
named_func_param1right)) :: _ :: ( _, ( MlyValue.ntVOID 
named_func_parameters_expansion1, named_func_parameters_expansion1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  named_func_parameters_expansion1 = 
named_func_parameters_expansion1 ()
 val  named_func_param1 = named_func_param1 ()
 in ()
end; ()))
 in ( LrTable.NT 130, ( result, named_func_parameters_expansion1left, 
named_func_param1right), rest671)
end
|  ( 261, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 130, ( result, defaultPos, defaultPos), rest671)
end
|  ( 262, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _
, ( MlyValue.IDENT IDENT1, IDENT1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 131, ( result, IDENT1left, types1right), rest671)
end
|  ( 263, ( ( _, ( MlyValue.types types1, _, types1right)) :: _ :: ( _
, ( _, UNDERSCORE1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 131, ( result, UNDERSCORE1left, types1right), rest671
)
end
|  ( 264, ( ( _, ( _, _, DOTDOTDOT1right)) :: _ :: ( _, ( 
MlyValue.ntVOID named_func_parameters_expansion1, _, _)) :: ( _, ( 
MlyValue.ntVOID named_func_param1, named_func_param1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
named_func_param1 = named_func_param1 ()
 val  named_func_parameters_expansion1 = 
named_func_parameters_expansion1 ()
 in ()
end; ()))
 in ( LrTable.NT 132, ( result, named_func_param1left, DOTDOTDOT1right
), rest671)
end
|  ( 265, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_statements1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let val  result
 = MlyValue.block_expression (fn _ => let val  inner_attrs1 = 
inner_attrs1 ()
 val  maybe_statements1 = maybe_statements1 ()
 in (BlockExpression)
end)
 in ( LrTable.NT 63, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 266, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 64, ( result, defaultPos, defaultPos), rest671)
end
|  ( 267, ( ( _, ( MlyValue.INTEGER_LIT INTEGER_LIT1, INTEGER_LIT1left
, INTEGER_LIT1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  INTEGER_LIT1 = INTEGER_LIT1 ()
 in ()
end; ()))
 in ( LrTable.NT 65, ( result, INTEGER_LIT1left, INTEGER_LIT1right), 
rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.crate x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Rust_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun CONST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun CONTINUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun CRATE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun ENUM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun EXTERN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun FALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun LOOP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun MATCH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun MOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun MOVE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun MUT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun PUB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun REF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun RETURN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun SELFVALUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun SELFTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun STATIC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun SUPER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun TRAIT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun TRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun UNSAFE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun USE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun WHERE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun DYN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun ABSTRACT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun BECOME (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun BOX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun FINAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun MACRO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERRIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun PRIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPEOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun UNSIZED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun VIRTUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun YIELD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun ASYNC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun AWAIT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun TRY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun UNION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun STATICLIFETIME (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun IDENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.IDENT (fn () => i),p1,p2))
fun CHAR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.CHAR_LIT (fn () => i),p1,p2))
fun STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.STR_LIT (fn () => i),p1,p2))
fun RAW_STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.RAW_STR_LIT (fn () => i),p1,p2))
fun BYTE_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.BYTE_LIT (fn () => i),p1,p2))
fun BYTE_STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.BYTE_STR_LIT (fn () => i),p1,p2))
fun RAW_BYTE_STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 60
,(ParserData.MlyValue.RAW_BYTE_STR_LIT (fn () => i),p1,p2))
fun INTEGER_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.INTEGER_LIT (fn () => i),p1,p2))
fun TUPLE_INDEX (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.TUPLE_INDEX (fn () => i),p1,p2))
fun FLOAT_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.FLOAT_LIT (fn () => i),p1,p2))
fun LIFETIME_OR_LABEL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 64
,(ParserData.MlyValue.LIFETIME_OR_LABEL (fn () => i),p1,p2))
fun LIFETIME_TOKEN (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.LIFETIME_TOKEN (fn () => i),p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun STAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun SLASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun PERCENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun CARET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun NOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDAND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun OROR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
fun SHL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun SHR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUSEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUSEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun STAREQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun SLASHEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun PERCENTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
fun CARETEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 84,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 85,(
ParserData.MlyValue.VOID,p1,p2))
fun OREQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 86,(
ParserData.MlyValue.VOID,p1,p2))
fun SHLEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 87,(
ParserData.MlyValue.VOID,p1,p2))
fun SHREQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 88,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 89,(
ParserData.MlyValue.VOID,p1,p2))
fun EQEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 90,(
ParserData.MlyValue.VOID,p1,p2))
fun NE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 91,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 92,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 93,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 94,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 95,(
ParserData.MlyValue.VOID,p1,p2))
fun AT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 96,(
ParserData.MlyValue.VOID,p1,p2))
fun UNDERSCORE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 97,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 98,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 99,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 100,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 101,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 102,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 103,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 104,(
ParserData.MlyValue.VOID,p1,p2))
fun PATHSEP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 105,(
ParserData.MlyValue.VOID,p1,p2))
fun RARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 106,(
ParserData.MlyValue.VOID,p1,p2))
fun FATARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 107,(
ParserData.MlyValue.VOID,p1,p2))
fun POUND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 108,(
ParserData.MlyValue.VOID,p1,p2))
fun DOLLAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 109,(
ParserData.MlyValue.VOID,p1,p2))
fun QUESTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 110,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 111,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 112,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 113,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 114,(
ParserData.MlyValue.VOID,p1,p2))
fun LPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 115,(
ParserData.MlyValue.VOID,p1,p2))
fun RPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 116,(
ParserData.MlyValue.VOID,p1,p2))
fun INNER_DOC_COMMENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 
117,(ParserData.MlyValue.INNER_DOC_COMMENT (fn () => i),p1,p2))
fun OUTER_DOC_COMMENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 
118,(ParserData.MlyValue.OUTER_DOC_COMMENT (fn () => i),p1,p2))
fun SHEBANG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 119,(
ParserData.MlyValue.VOID,p1,p2))
fun SHEBANG_LINE (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 120,(
ParserData.MlyValue.SHEBANG_LINE (fn () => i),p1,p2))
fun LOWER_THAN_LPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 121
,(ParserData.MlyValue.VOID,p1,p2))
fun LOWER_THAN_ABI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 122,(
ParserData.MlyValue.VOID,p1,p2))
fun ABI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 123,(
ParserData.MlyValue.VOID,p1,p2))
end
end
