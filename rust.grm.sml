functor RustLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Rust_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* rust.yacc *)
open DataTypes
fun yaccLog(msg) = ErrorMsg.yaccLog (msg)


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\181\001\004\000\196\001\008\000\196\001\009\000\196\001\
\\011\000\196\001\014\000\196\001\019\000\196\001\022\000\196\001\
\\027\000\196\001\028\000\196\001\030\000\196\001\032\000\196\001\
\\033\000\196\001\034\000\196\001\053\000\196\001\055\000\196\001\
\\108\000\012\000\000\000\
\\001\000\001\000\181\001\004\000\196\001\008\000\196\001\009\000\196\001\
\\011\000\196\001\014\000\196\001\019\000\196\001\022\000\196\001\
\\027\000\196\001\028\000\196\001\030\000\196\001\032\000\196\001\
\\033\000\196\001\034\000\196\001\053\000\196\001\055\000\196\001\
\\108\000\012\000\112\000\181\001\000\000\
\\001\000\002\000\142\000\103\000\141\000\000\000\
\\001\000\004\000\196\001\008\000\196\001\009\000\196\001\011\000\196\001\
\\014\000\196\001\019\000\196\001\022\000\196\001\027\000\196\001\
\\028\000\196\001\030\000\196\001\032\000\196\001\033\000\196\001\
\\034\000\196\001\053\000\196\001\055\000\196\001\108\000\012\000\
\\112\000\181\001\000\000\
\\001\000\004\000\196\001\011\000\196\001\022\000\196\001\025\000\196\001\
\\029\000\196\001\033\000\196\001\055\000\196\001\071\000\196\001\
\\105\000\196\001\108\000\012\000\109\000\196\001\112\000\099\002\000\000\
\\001\000\004\000\196\001\011\000\196\001\025\000\054\000\029\000\053\000\
\\032\000\196\001\033\000\196\001\055\000\052\000\071\000\051\000\
\\105\000\050\000\108\000\012\000\109\000\049\000\111\000\196\001\
\\112\000\053\002\000\000\
\\001\000\004\000\043\000\008\000\042\000\009\000\041\000\011\000\238\001\
\\014\000\040\000\019\000\039\000\022\000\038\000\027\000\037\000\
\\028\000\036\000\030\000\240\001\032\000\035\000\033\000\034\000\
\\034\000\033\000\053\000\032\000\055\000\031\000\000\000\
\\001\000\004\000\043\000\008\000\042\000\009\000\041\000\011\000\238\001\
\\014\000\040\000\019\000\039\000\027\000\037\000\028\000\036\000\
\\030\000\240\001\032\000\035\000\033\000\034\000\034\000\033\000\
\\053\000\032\000\055\000\031\000\000\000\
\\001\000\004\000\043\000\011\000\238\001\022\000\038\000\025\000\196\001\
\\029\000\196\001\032\000\222\001\033\000\238\001\055\000\196\001\
\\071\000\196\001\105\000\196\001\108\000\012\000\109\000\196\001\
\\112\000\106\002\000\000\
\\001\000\011\000\194\001\022\000\194\001\027\000\196\001\108\000\012\000\
\\112\000\116\002\119\000\006\000\000\000\
\\001\000\011\000\058\000\000\000\
\\001\000\011\000\248\000\000\000\
\\001\000\011\000\072\001\000\000\
\\001\000\011\000\079\001\000\000\
\\001\000\012\000\187\000\000\000\
\\001\000\014\000\056\000\030\000\055\000\000\000\
\\001\000\015\000\100\000\025\000\099\000\029\000\098\000\071\000\097\000\000\000\
\\001\000\021\000\066\000\055\000\065\000\000\000\
\\001\000\021\000\026\001\025\000\232\001\055\000\192\000\073\000\141\001\
\\116\000\015\002\000\000\
\\001\000\021\000\026\001\025\000\232\001\055\000\142\001\073\000\141\001\
\\116\000\065\002\000\000\
\\001\000\022\000\196\001\055\000\196\001\108\000\012\000\112\000\229\001\000\000\
\\001\000\022\000\196\001\055\000\196\001\108\000\012\000\112\000\026\002\000\000\
\\001\000\022\000\196\001\055\000\196\001\108\000\012\000\116\000\229\001\000\000\
\\001\000\022\000\196\001\055\000\196\001\108\000\012\000\116\000\034\002\000\000\
\\001\000\022\000\038\000\055\000\104\000\000\000\
\\001\000\022\000\038\000\055\000\233\000\000\000\
\\001\000\025\000\054\000\029\000\053\000\055\000\052\000\057\000\117\000\
\\071\000\051\000\105\000\050\000\109\000\049\000\000\000\
\\001\000\025\000\054\000\029\000\053\000\055\000\052\000\057\000\117\000\
\\071\000\051\000\105\000\050\000\109\000\049\000\116\000\116\000\000\000\
\\001\000\025\000\054\000\029\000\053\000\055\000\052\000\071\000\051\000\
\\105\000\050\000\109\000\049\000\000\000\
\\001\000\025\000\054\000\029\000\053\000\055\000\052\000\071\000\051\000\
\\109\000\049\000\000\000\
\\001\000\025\000\148\001\000\000\
\\001\000\025\000\160\001\000\000\
\\001\000\027\000\246\000\000\000\
\\001\000\032\000\035\000\000\000\
\\001\000\035\000\233\001\054\000\186\000\055\000\236\001\065\000\185\000\
\\103\000\233\001\110\000\184\000\111\000\233\001\115\000\183\000\000\000\
\\001\000\035\000\078\002\054\000\186\000\055\000\236\001\065\000\185\000\
\\103\000\078\002\110\000\184\000\111\000\078\002\115\000\183\000\000\000\
\\001\000\035\000\126\000\000\000\
\\001\000\055\000\196\001\108\000\012\000\112\000\229\001\000\000\
\\001\000\055\000\196\001\108\000\012\000\112\000\041\002\000\000\
\\001\000\055\000\060\000\000\000\
\\001\000\055\000\063\000\000\000\
\\001\000\055\000\064\000\000\000\
\\001\000\055\000\068\000\000\000\
\\001\000\055\000\077\000\000\000\
\\001\000\055\000\087\000\000\000\
\\001\000\055\000\089\000\000\000\
\\001\000\055\000\096\000\000\000\
\\001\000\055\000\104\000\000\000\
\\001\000\055\000\105\000\000\000\
\\001\000\055\000\107\000\000\000\
\\001\000\055\000\127\000\000\000\
\\001\000\055\000\152\000\000\000\
\\001\000\055\000\171\000\000\000\
\\001\000\055\000\224\000\000\000\
\\001\000\055\000\251\000\000\000\
\\001\000\055\000\016\001\000\000\
\\001\000\055\000\027\001\000\000\
\\001\000\055\000\063\001\000\000\
\\001\000\055\000\074\001\000\000\
\\001\000\055\000\084\001\000\000\
\\001\000\055\000\095\001\000\000\
\\001\000\055\000\103\001\097\000\102\001\000\000\
\\001\000\055\000\103\001\097\000\102\001\102\000\126\002\116\000\123\002\000\000\
\\001\000\055\000\103\001\097\000\102\001\102\000\117\001\000\000\
\\001\000\057\000\117\000\000\000\
\\001\000\062\000\204\000\000\000\
\\001\000\071\000\085\000\000\000\
\\001\000\089\000\155\000\000\000\
\\001\000\089\000\162\000\000\000\
\\001\000\089\000\173\000\000\000\
\\001\000\089\000\205\000\000\000\
\\001\000\089\000\123\001\103\000\122\001\000\000\
\\001\000\092\000\139\000\000\000\
\\001\000\100\000\146\001\000\000\
\\001\000\102\000\211\001\104\000\210\001\116\000\211\001\000\000\
\\001\000\102\000\175\000\000\000\
\\001\000\102\000\128\001\000\000\
\\001\000\103\000\091\000\000\000\
\\001\000\103\000\102\000\111\000\101\000\000\000\
\\001\000\103\000\157\000\111\000\156\000\000\000\
\\001\000\103\000\213\000\000\000\
\\001\000\103\000\234\000\000\000\
\\001\000\103\000\240\000\000\000\
\\001\000\103\000\252\000\000\000\
\\001\000\103\000\018\001\000\000\
\\001\000\103\000\020\001\000\000\
\\001\000\103\000\069\001\000\000\
\\001\000\103\000\071\001\111\000\047\001\000\000\
\\001\000\103\000\106\001\000\000\
\\001\000\103\000\113\001\000\000\
\\001\000\103\000\155\001\000\000\
\\001\000\103\000\157\001\000\000\
\\001\000\103\000\158\001\000\000\
\\001\000\104\000\095\000\000\000\
\\001\000\104\000\109\000\000\000\
\\001\000\104\000\132\000\000\000\
\\001\000\104\000\229\000\000\000\
\\001\000\104\000\017\001\000\000\
\\001\000\104\000\057\001\000\000\
\\001\000\104\000\080\001\000\000\
\\001\000\104\000\087\001\000\000\
\\001\000\104\000\119\001\000\000\
\\001\000\104\000\120\001\000\000\
\\001\000\104\000\153\001\000\000\
\\001\000\111\000\106\000\000\000\
\\001\000\111\000\154\000\000\000\
\\001\000\111\000\166\000\000\000\
\\001\000\111\000\172\000\000\000\
\\001\000\111\000\220\000\000\000\
\\001\000\111\000\047\001\000\000\
\\001\000\111\000\052\001\000\000\
\\001\000\112\000\206\000\000\000\
\\001\000\112\000\209\000\000\000\
\\001\000\112\000\231\000\000\000\
\\001\000\112\000\235\000\000\000\
\\001\000\112\000\250\000\000\000\
\\001\000\112\000\022\001\000\000\
\\001\000\112\000\038\001\000\000\
\\001\000\112\000\083\001\000\000\
\\001\000\112\000\105\001\000\000\
\\001\000\112\000\109\001\000\000\
\\001\000\113\000\014\000\000\000\
\\001\000\113\000\044\000\000\000\
\\001\000\114\000\084\000\000\000\
\\001\000\114\000\110\000\000\000\
\\001\000\115\000\153\000\000\000\
\\001\000\115\000\081\001\000\000\
\\001\000\115\000\121\001\000\000\
\\001\000\115\000\124\001\000\000\
\\001\000\116\000\133\000\000\000\
\\001\000\116\000\134\000\000\000\
\\001\000\116\000\135\000\000\000\
\\001\000\116\000\148\000\000\000\
\\001\000\116\000\164\000\000\000\
\\001\000\116\000\199\000\000\000\
\\001\000\116\000\228\000\000\000\
\\001\000\116\000\253\000\000\000\
\\001\000\116\000\082\001\000\000\
\\001\000\116\000\114\001\000\000\
\\001\000\116\000\118\001\000\000\
\\001\000\116\000\151\001\000\000\
\\001\000\116\000\168\001\000\000\
\\001\000\116\000\171\001\000\000\
\\178\001\000\000\
\\179\001\000\000\
\\180\001\000\000\
\\182\001\000\000\
\\183\001\000\000\
\\184\001\000\000\
\\185\001\115\000\067\000\000\000\
\\186\001\000\000\
\\187\001\000\000\
\\188\001\000\000\
\\189\001\000\000\
\\190\001\002\000\092\000\000\000\
\\191\001\000\000\
\\193\001\000\000\
\\194\001\119\000\006\000\000\000\
\\194\001\119\000\006\000\120\000\005\000\000\000\
\\195\001\000\000\
\\196\001\108\000\012\000\000\000\
\\197\001\000\000\
\\198\001\000\000\
\\199\001\000\000\
\\200\001\000\000\
\\201\001\000\000\
\\202\001\089\000\083\000\115\000\082\000\000\000\
\\203\001\000\000\
\\204\001\102\000\174\000\000\000\
\\205\001\000\000\
\\206\001\115\000\147\000\000\000\
\\207\001\000\000\
\\208\001\000\000\
\\209\001\000\000\
\\210\001\000\000\
\\211\001\000\000\
\\212\001\000\000\
\\213\001\000\000\
\\214\001\000\000\
\\215\001\105\000\081\000\000\000\
\\216\001\000\000\
\\217\001\000\000\
\\218\001\000\000\
\\219\001\000\000\
\\220\001\000\000\
\\221\001\000\000\
\\222\001\022\000\038\000\000\000\
\\222\001\022\000\038\000\025\000\054\000\029\000\053\000\055\000\052\000\
\\071\000\051\000\105\000\050\000\109\000\049\000\000\000\
\\223\001\000\000\
\\224\001\035\000\126\000\000\000\
\\224\001\035\000\126\000\115\000\130\000\000\000\
\\225\001\000\000\
\\226\001\000\000\
\\227\001\093\000\071\000\000\000\
\\228\001\000\000\
\\229\001\055\000\192\000\000\000\
\\229\001\055\000\103\001\097\000\102\001\000\000\
\\229\001\055\000\142\001\000\000\
\\230\001\102\000\238\000\000\000\
\\230\001\102\000\009\001\000\000\
\\230\001\102\000\015\001\000\000\
\\230\001\102\000\029\001\000\000\
\\230\001\102\000\127\001\000\000\
\\230\001\102\000\162\001\000\000\
\\231\001\000\000\
\\232\001\021\000\026\001\000\000\
\\234\001\066\000\004\001\000\000\
\\235\001\000\000\
\\236\001\110\000\184\000\000\000\
\\237\001\055\000\078\000\000\000\
\\237\001\055\000\075\001\000\000\
\\238\001\004\000\043\000\000\000\
\\238\001\004\000\049\001\032\000\048\001\111\000\047\001\000\000\
\\239\001\000\000\
\\240\001\033\000\034\000\000\000\
\\241\001\000\000\
\\242\001\072\000\122\000\000\000\
\\243\001\000\000\
\\244\001\000\000\
\\245\001\000\000\
\\246\001\000\000\
\\247\001\000\000\
\\248\001\000\000\
\\249\001\000\000\
\\250\001\000\000\
\\251\001\000\000\
\\252\001\000\000\
\\253\001\000\000\
\\254\001\000\000\
\\255\001\000\000\
\\000\002\000\000\
\\001\002\000\000\
\\002\002\000\000\
\\003\002\000\000\
\\004\002\000\000\
\\005\002\000\000\
\\006\002\000\000\
\\007\002\000\000\
\\008\002\000\000\
\\009\002\000\000\
\\010\002\000\000\
\\011\002\057\000\076\000\061\000\075\000\071\000\074\000\000\000\
\\012\002\000\000\
\\013\002\000\000\
\\014\002\000\000\
\\015\002\055\000\192\000\000\000\
\\016\002\000\000\
\\017\002\000\000\
\\018\002\000\000\
\\019\002\000\000\
\\020\002\000\000\
\\021\002\106\000\012\001\000\000\
\\022\002\000\000\
\\023\002\000\000\
\\024\002\000\000\
\\025\002\000\000\
\\027\002\000\000\
\\028\002\000\000\
\\029\002\000\000\
\\030\002\000\000\
\\031\002\000\000\
\\032\002\000\000\
\\033\002\000\000\
\\035\002\000\000\
\\036\002\000\000\
\\037\002\000\000\
\\038\002\000\000\
\\039\002\000\000\
\\040\002\000\000\
\\042\002\000\000\
\\043\002\000\000\
\\044\002\000\000\
\\045\002\000\000\
\\046\002\000\000\
\\047\002\000\000\
\\048\002\089\000\035\001\111\000\034\001\115\000\033\001\000\000\
\\049\002\000\000\
\\050\002\000\000\
\\051\002\000\000\
\\052\002\000\000\
\\054\002\000\000\
\\055\002\000\000\
\\056\002\000\000\
\\057\002\000\000\
\\058\002\000\000\
\\059\002\000\000\
\\060\002\000\000\
\\061\002\000\000\
\\062\002\000\000\
\\063\002\000\000\
\\064\002\000\000\
\\066\002\000\000\
\\067\002\000\000\
\\068\002\000\000\
\\069\002\000\000\
\\070\002\000\000\
\\071\002\000\000\
\\072\002\000\000\
\\073\002\000\000\
\\074\002\000\000\
\\075\002\000\000\
\\076\002\104\000\150\000\000\000\
\\077\002\000\000\
\\079\002\000\000\
\\080\002\000\000\
\\081\002\000\000\
\\082\002\000\000\
\\083\002\000\000\
\\084\002\000\000\
\\085\002\000\000\
\\086\002\000\000\
\\087\002\000\000\
\\088\002\000\000\
\\089\002\000\000\
\\091\002\000\000\
\\092\002\000\000\
\\093\002\104\000\159\001\000\000\
\\094\002\000\000\
\\095\002\054\000\186\000\065\000\185\000\000\000\
\\096\002\000\000\
\\097\002\000\000\
\\098\002\000\000\
\\100\002\000\000\
\\101\002\000\000\
\\102\002\000\000\
\\103\002\000\000\
\\104\002\000\000\
\\105\002\000\000\
\\107\002\000\000\
\\108\002\000\000\
\\109\002\000\000\
\\110\002\000\000\
\\111\002\000\000\
\\112\002\000\000\
\\113\002\000\000\
\\114\002\000\000\
\\115\002\000\000\
\\117\002\000\000\
\\118\002\000\000\
\\119\002\000\000\
\\120\002\000\000\
\\121\002\000\000\
\\122\002\000\000\
\\124\002\000\000\
\\125\002\000\000\
\\126\002\000\000\
\\127\002\000\000\
\\128\002\000\000\
\\129\002\000\000\
\\130\002\000\000\
\\131\002\000\000\
\\132\002\000\000\
\"
val actionRowNumbers =
"\159\000\158\000\001\000\158\000\
\\122\000\157\000\002\000\161\000\
\\007\000\145\000\123\000\001\000\
\\029\000\146\000\160\000\236\000\
\\235\000\234\000\230\000\225\000\
\\227\000\226\000\016\000\215\000\
\\011\000\224\000\148\000\008\000\
\\147\000\218\000\040\000\029\000\
\\214\000\041\000\042\000\018\000\
\\150\000\043\000\194\000\242\000\
\\044\000\210\000\029\000\144\000\
\\180\000\167\000\124\000\067\000\
\\030\000\184\000\181\000\182\000\
\\183\000\045\000\194\000\240\000\
\\046\000\149\000\194\000\078\000\
\\155\000\194\000\194\000\094\000\
\\047\000\017\000\079\000\048\000\
\\193\000\049\000\105\000\241\000\
\\050\000\244\000\243\000\194\000\
\\095\000\125\000\178\000\030\000\
\\028\000\065\000\162\000\185\000\
\\180\000\194\000\217\000\194\000\
\\190\000\223\000\051\000\190\000\
\\191\000\048\000\096\000\130\000\
\\131\000\132\000\029\000\158\000\
\\219\000\190\000\176\000\073\000\
\\158\000\003\000\190\000\048\000\
\\163\000\180\000\173\000\171\000\
\\133\000\172\000\166\000\174\000\
\\164\000\177\000\046\001\052\000\
\\216\000\126\000\106\000\189\000\
\\192\000\156\000\068\000\080\000\
\\024\000\069\000\048\000\151\000\
\\153\000\152\000\134\000\004\000\
\\107\000\195\000\010\000\221\000\
\\053\000\108\000\070\000\179\000\
\\169\000\076\000\165\000\190\000\
\\036\000\015\000\057\001\246\000\
\\161\000\048\000\022\000\255\000\
\\135\000\010\001\007\001\025\000\
\\066\000\071\000\154\000\112\000\
\\158\000\010\000\113\000\187\000\
\\187\000\081\000\039\000\066\000\
\\168\000\027\000\109\000\052\001\
\\051\001\050\001\047\001\045\001\
\\054\000\209\000\208\000\053\001\
\\054\001\048\000\249\000\136\000\
\\245\000\097\000\175\000\003\001\
\\114\000\026\000\082\000\115\000\
\\000\001\190\000\199\000\012\001\
\\048\000\083\000\096\001\066\000\
\\220\000\005\000\081\001\080\001\
\\033\000\186\000\012\000\222\000\
\\016\001\116\000\013\001\055\000\
\\084\000\137\000\006\000\207\000\
\\052\000\058\001\059\001\054\000\
\\190\000\200\000\252\000\048\000\
\\201\000\229\000\056\000\098\000\
\\237\000\254\000\085\000\008\001\
\\023\000\011\001\232\000\086\000\
\\005\000\117\000\188\000\082\001\
\\206\000\083\001\057\000\202\000\
\\228\000\020\001\238\000\171\000\
\\029\001\006\000\118\000\079\001\
\\213\000\048\001\035\000\055\001\
\\052\000\111\000\247\000\196\000\
\\190\000\251\000\048\000\250\000\
\\001\001\021\000\099\000\048\000\
\\006\001\009\001\231\000\066\001\
\\065\001\067\001\212\000\058\000\
\\205\000\194\000\014\001\038\000\
\\019\001\018\001\017\001\024\000\
\\022\000\066\000\170\000\024\001\
\\233\000\087\000\088\000\028\001\
\\027\001\026\001\025\001\033\001\
\\013\000\158\000\059\000\211\000\
\\049\001\056\001\158\000\248\000\
\\110\000\253\000\002\001\048\000\
\\005\001\070\001\068\001\014\000\
\\069\001\100\000\127\000\015\001\
\\138\000\119\000\023\001\032\001\
\\031\001\030\001\060\000\095\001\
\\046\001\101\000\009\000\239\000\
\\004\001\061\000\048\000\063\000\
\\021\001\022\001\194\000\120\000\
\\089\000\048\000\077\001\009\000\
\\121\000\075\001\076\001\034\000\
\\029\000\194\000\090\000\139\000\
\\090\001\064\000\087\001\140\000\
\\102\000\103\000\128\000\094\001\
\\044\001\072\000\072\001\071\001\
\\074\001\073\001\129\000\084\001\
\\252\000\203\000\077\000\062\000\
\\252\000\048\000\048\000\020\000\
\\042\001\066\000\019\000\190\000\
\\088\001\197\000\074\000\089\001\
\\190\000\092\001\091\001\031\000\
\\206\000\039\001\141\000\039\001\
\\035\001\041\001\104\000\063\001\
\\075\000\091\000\249\000\092\000\
\\093\001\093\000\061\001\032\000\
\\204\000\252\000\204\000\048\000\
\\064\001\043\001\200\000\086\001\
\\085\001\048\000\060\001\142\000\
\\198\000\037\000\037\001\040\001\
\\143\000\062\001\252\000\038\001\
\\034\001\252\000\190\000\190\000\
\\036\001\110\000\078\001\000\000"
val gotoT =
"\
\\001\000\175\001\002\000\002\000\005\000\001\000\000\000\
\\002\000\005\000\005\000\001\000\000\000\
\\003\000\009\000\004\000\008\000\006\000\007\000\018\000\006\000\000\000\
\\002\000\011\000\005\000\001\000\000\000\
\\000\000\
\\000\000\
\\003\000\013\000\004\000\008\000\006\000\007\000\018\000\006\000\000\000\
\\004\000\014\000\006\000\007\000\000\000\
\\019\000\028\000\021\000\027\000\022\000\026\000\035\000\025\000\
\\036\000\024\000\037\000\023\000\038\000\022\000\050\000\021\000\
\\051\000\020\000\067\000\019\000\068\000\018\000\095\000\017\000\
\\096\000\016\000\104\000\015\000\000\000\
\\000\000\
\\000\000\
\\003\000\043\000\004\000\008\000\006\000\007\000\018\000\006\000\000\000\
\\007\000\046\000\013\000\045\000\014\000\044\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\055\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\022\000\057\000\035\000\025\000\036\000\024\000\037\000\023\000\
\\038\000\022\000\050\000\021\000\051\000\020\000\067\000\019\000\
\\068\000\018\000\095\000\017\000\096\000\016\000\104\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\060\000\014\000\044\000\023\000\059\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\067\000\000\000\
\\039\000\071\000\040\000\070\000\000\000\
\\000\000\
\\000\000\
\\007\000\077\000\013\000\045\000\014\000\044\000\000\000\
\\000\000\
\\015\000\078\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\084\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\086\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\088\000\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\091\000\000\000\
\\026\000\068\000\028\000\092\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\101\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\106\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\109\000\000\000\
\\007\000\113\000\008\000\112\000\010\000\111\000\011\000\110\000\
\\013\000\045\000\014\000\044\000\000\000\
\\011\000\116\000\000\000\
\\000\000\
\\000\000\
\\015\000\117\000\000\000\
\\026\000\068\000\028\000\118\000\000\000\
\\034\000\119\000\000\000\
\\026\000\068\000\028\000\121\000\000\000\
\\027\000\123\000\029\000\122\000\000\000\
\\000\000\
\\000\000\
\\027\000\123\000\029\000\126\000\000\000\
\\027\000\123\000\029\000\127\000\000\000\
\\025\000\129\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\134\000\014\000\044\000\000\000\
\\002\000\135\000\005\000\001\000\000\000\
\\000\000\
\\027\000\123\000\029\000\136\000\000\000\
\\000\000\
\\000\000\
\\002\000\138\000\005\000\001\000\000\000\
\\000\000\
\\027\000\123\000\029\000\141\000\000\000\
\\025\000\142\000\000\000\
\\000\000\
\\015\000\143\000\000\000\
\\000\000\
\\009\000\144\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\069\000\147\000\000\000\
\\077\000\149\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\159\000\006\000\007\000\054\000\158\000\055\000\157\000\
\\057\000\156\000\000\000\
\\000\000\
\\025\000\161\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\163\000\004\000\008\000\006\000\007\000\018\000\006\000\000\000\
\\000\000\
\\000\000\
\\002\000\168\000\004\000\167\000\005\000\001\000\006\000\007\000\
\\105\000\166\000\106\000\165\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\123\000\029\000\174\000\000\000\
\\033\000\180\000\070\000\179\000\071\000\178\000\073\000\177\000\
\\074\000\176\000\075\000\175\000\000\000\
\\000\000\
\\000\000\
\\024\000\189\000\041\000\188\000\042\000\187\000\043\000\186\000\000\000\
\\004\000\193\000\006\000\007\000\052\000\192\000\053\000\191\000\000\000\
\\025\000\194\000\000\000\
\\004\000\193\000\006\000\007\000\052\000\196\000\053\000\191\000\
\\056\000\195\000\000\000\
\\000\000\
\\000\000\
\\059\000\198\000\000\000\
\\000\000\
\\021\000\200\000\025\000\199\000\000\000\
\\049\000\201\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\205\000\005\000\001\000\000\000\
\\002\000\168\000\004\000\167\000\005\000\001\000\006\000\007\000\
\\105\000\206\000\106\000\165\000\000\000\
\\000\000\
\\021\000\209\000\030\000\208\000\000\000\
\\021\000\209\000\030\000\210\000\000\000\
\\000\000\
\\004\000\215\000\006\000\007\000\060\000\214\000\061\000\213\000\
\\063\000\212\000\000\000\
\\049\000\216\000\000\000\
\\000\000\
\\007\000\113\000\010\000\217\000\011\000\110\000\013\000\045\000\
\\014\000\044\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\072\000\219\000\000\000\
\\000\000\
\\000\000\
\\076\000\221\000\078\000\220\000\000\000\
\\033\000\223\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\224\000\000\000\
\\044\000\225\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\058\000\228\000\000\000\
\\000\000\
\\021\000\230\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\123\000\029\000\234\000\000\000\
\\031\000\235\000\000\000\
\\000\000\
\\025\000\237\000\000\000\
\\000\000\
\\000\000\
\\049\000\239\000\000\000\
\\000\000\
\\004\000\242\000\006\000\007\000\097\000\241\000\099\000\240\000\000\000\
\\000\000\
\\000\000\
\\107\000\243\000\000\000\
\\000\000\
\\108\000\245\000\000\000\
\\000\000\
\\062\000\247\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\000\001\006\000\007\000\013\000\255\000\014\000\044\000\
\\079\000\254\000\080\000\253\000\085\000\252\000\000\000\
\\032\000\001\001\000\000\
\\077\000\003\001\000\000\
\\000\000\
\\000\000\
\\076\000\221\000\078\000\004\001\000\000\
\\027\000\123\000\029\000\005\001\000\000\
\\031\000\006\001\000\000\
\\045\000\009\001\046\000\008\001\000\000\
\\025\000\011\001\000\000\
\\031\000\012\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\159\000\006\000\007\000\055\000\017\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\242\000\006\000\007\000\097\000\019\001\099\000\240\000\000\000\
\\000\000\
\\013\000\255\000\014\000\044\000\021\000\209\000\030\000\022\001\
\\085\000\021\001\000\000\
\\000\000\
\\094\000\023\001\000\000\
\\000\000\
\\000\000\
\\031\000\026\001\000\000\
\\000\000\
\\064\000\030\001\065\000\029\001\066\000\028\001\000\000\
\\000\000\
\\009\000\034\001\000\000\
\\000\000\
\\004\000\000\001\006\000\007\000\013\000\255\000\014\000\044\000\
\\079\000\035\001\080\000\253\000\085\000\252\000\000\000\
\\000\000\
\\000\000\
\\036\000\044\001\037\000\023\000\047\000\043\001\081\000\042\001\
\\082\000\041\001\083\000\040\001\084\000\039\001\086\000\038\001\
\\087\000\037\001\000\000\
\\000\000\
\\033\000\180\000\073\000\048\001\074\000\176\000\075\000\175\000\000\000\
\\000\000\
\\077\000\049\001\000\000\
\\000\000\
\\000\000\
\\024\000\189\000\043\000\051\001\000\000\
\\027\000\123\000\029\000\052\001\000\000\
\\000\000\
\\025\000\053\001\000\000\
\\000\000\
\\000\000\
\\004\000\193\000\006\000\007\000\053\000\054\001\000\000\
\\000\000\
\\025\000\056\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\035\000\060\001\036\000\059\001\037\000\023\000\068\000\058\001\
\\103\000\057\001\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\062\001\000\000\
\\000\000\
\\004\000\215\000\006\000\007\000\063\000\063\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\159\000\006\000\007\000\054\000\158\000\055\000\157\000\
\\057\000\064\001\000\000\
\\004\000\193\000\006\000\007\000\052\000\196\000\053\000\191\000\
\\056\000\065\001\000\000\
\\049\000\066\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\068\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\071\001\005\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\074\001\005\000\001\000\000\000\
\\000\000\
\\047\000\075\001\000\000\
\\000\000\
\\000\000\
\\025\000\076\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\048\000\083\001\000\000\
\\069\000\084\001\000\000\
\\000\000\
\\004\000\092\001\006\000\007\000\021\000\209\000\030\000\091\001\
\\035\000\090\001\036\000\059\001\037\000\023\000\068\000\089\001\
\\100\000\088\001\102\000\087\001\103\000\086\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\094\001\000\000\
\\109\000\099\001\110\000\098\001\111\000\097\001\112\000\096\001\
\\113\000\095\001\000\000\
\\000\000\
\\000\000\
\\026\000\068\000\028\000\102\001\000\000\
\\000\000\
\\000\000\
\\025\000\105\001\000\000\
\\000\000\
\\004\000\092\001\006\000\007\000\021\000\209\000\030\000\091\001\
\\035\000\090\001\036\000\059\001\037\000\023\000\068\000\089\001\
\\100\000\106\001\102\000\087\001\103\000\086\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\067\000\108\001\000\000\
\\013\000\255\000\014\000\044\000\085\000\109\001\000\000\
\\026\000\068\000\028\000\110\001\000\000\
\\000\000\
\\000\000\
\\111\000\113\001\000\000\
\\112\000\114\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\045\000\009\001\046\000\123\001\000\000\
\\031\000\124\001\000\000\
\\000\000\
\\112\000\127\001\000\000\
\\045\000\009\001\046\000\128\001\000\000\
\\025\000\129\001\000\000\
\\025\000\130\001\000\000\
\\024\000\138\001\025\000\137\001\088\000\136\001\089\000\135\001\
\\090\000\134\001\092\000\133\001\093\000\132\001\094\000\131\001\000\000\
\\000\000\
\\049\000\141\001\000\000\
\\024\000\189\000\041\000\188\000\042\000\187\000\043\000\186\000\
\\092\000\142\001\093\000\132\001\094\000\131\001\000\000\
\\027\000\123\000\029\000\143\001\000\000\
\\000\000\
\\112\000\127\001\000\000\
\\000\000\
\\000\000\
\\027\000\123\000\029\000\145\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\094\000\147\001\000\000\
\\091\000\148\001\000\000\
\\000\000\
\\091\000\150\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\074\000\152\001\000\000\
\\000\000\
\\000\000\
\\044\000\154\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\159\001\000\000\
\\045\000\009\001\046\000\161\001\000\000\
\\031\000\162\001\000\000\
\\025\000\163\001\000\000\
\\000\000\
\\000\000\
\\031\000\164\001\000\000\
\\000\000\
\\000\000\
\\025\000\165\001\000\000\
\\000\000\
\\000\000\
\\024\000\138\001\025\000\137\001\089\000\167\001\000\000\
\\027\000\168\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\045\000\009\001\046\000\170\001\000\000\
\\000\000\
\\000\000\
\\045\000\009\001\046\000\171\001\000\000\
\\027\000\123\000\029\000\172\001\000\000\
\\027\000\123\000\029\000\173\001\000\000\
\\000\000\
\\047\000\174\001\000\000\
\\000\000\
\\000\000\
\"
val numstates = 432
val numrules = 211
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | SHEBANG_LINE of unit ->  (string)
 | OUTER_DOC_COMMENT of unit ->  (string)
 | INNER_DOC_COMMENT of unit ->  (string)
 | LIFETIME of unit ->  (string) | FLOAT_LIT of unit ->  (real)
 | TUPLE_INDEX of unit ->  (int)
 | INTEGER_LIT of unit ->  (LargeInt.int)
 | RAW_BYTE_STR_LIT of unit ->  (string)
 | BYTE_STR_LIT of unit ->  (string) | BYTE_LIT of unit ->  (int)
 | RAW_STR_LIT of unit ->  (string) | STR_LIT of unit ->  (string)
 | CHAR_LIT of unit ->  (int) | IDENT of unit ->  (string)
 | use_tree of unit ->  (UseTree) | item_type of unit ->  (ItemType)
 | visibility of unit ->  (Visibility)
 | macro_item of unit ->  (MarcoItem) | vis_item of unit ->  (VisItem)
 | item of unit ->  (Item)
 | simple_path_expansion of unit ->  (string list)
 | simple_path_segment of unit ->  (string)
 | simple_path of unit ->  (SimplePath)
 | lit_exp of unit ->  (LiteralExpression)
 | meta_item_inner of unit ->  (MetaItemInner)
 | meta_seq_expansion of unit ->  (MetaItemInner list)
 | meta_seq of unit ->  (MetaSeq) | meta_item of unit ->  (MetaItem)
 | outer_attr of unit ->  (OuterAttribute)
 | inner_attr of unit ->  (InnerAttribute)
 | outer_attrs of unit ->  (OuterAttribute list)
 | items of unit ->  (Item list)
 | inner_attrs of unit ->  (InnerAttribute list)
 | crate of unit ->  (Crate)
end
type svalue = MlyValue.svalue
type result = Crate
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 1) => true | (T 2) => true | (T 3) => true | (T 4) => true | (T 
5) => true | (T 6) => true | (T 7) => true | (T 8) => true | (T 9)
 => true | (T 10) => true | (T 11) => true | (T 12) => true | (T 13)
 => true | (T 14) => true | (T 15) => true | (T 16) => true | (T 17)
 => true | (T 18) => true | (T 19) => true | (T 20) => true | (T 21)
 => true | (T 22) => true | (T 23) => true | (T 24) => true | (T 25)
 => true | (T 26) => true | (T 27) => true | (T 28) => true | (T 29)
 => true | (T 30) => true | (T 31) => true | (T 32) => true | (T 33)
 => true | (T 34) => true | (T 35) => true | (T 37) => true | (T 38)
 => true | (T 39) => true | (T 40) => true | (T 41) => true | (T 42)
 => true | (T 43) => true | (T 44) => true | (T 45) => true | (T 46)
 => true | (T 47) => true | (T 48) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "AS"
  | (T 2) => "BREAK"
  | (T 3) => "CONST"
  | (T 4) => "CONTINUE"
  | (T 5) => "CRATE"
  | (T 6) => "ELSE"
  | (T 7) => "ENUM"
  | (T 8) => "EXTERN"
  | (T 9) => "FALSE"
  | (T 10) => "FN"
  | (T 11) => "FOR"
  | (T 12) => "IF"
  | (T 13) => "IMPL"
  | (T 14) => "IN"
  | (T 15) => "LET"
  | (T 16) => "LOOP"
  | (T 17) => "MATCH"
  | (T 18) => "MOD"
  | (T 19) => "MOVE"
  | (T 20) => "MUT"
  | (T 21) => "PUB"
  | (T 22) => "REF"
  | (T 23) => "RETURN"
  | (T 24) => "SELFVALUE"
  | (T 25) => "SELFTYPE"
  | (T 26) => "STATIC"
  | (T 27) => "STRUCT"
  | (T 28) => "SUPER"
  | (T 29) => "TRAIT"
  | (T 30) => "TRUE"
  | (T 31) => "TYPE"
  | (T 32) => "UNSAFE"
  | (T 33) => "USE"
  | (T 34) => "WHERE"
  | (T 35) => "WHILE"
  | (T 36) => "DYN"
  | (T 37) => "ABSTRACT"
  | (T 38) => "BECOME"
  | (T 39) => "BOX"
  | (T 40) => "DO"
  | (T 41) => "FINAL"
  | (T 42) => "MACRO"
  | (T 43) => "OVERRIDE"
  | (T 44) => "PRIV"
  | (T 45) => "TYPEOF"
  | (T 46) => "UNSIZED"
  | (T 47) => "VIRTUAL"
  | (T 48) => "YIELD"
  | (T 49) => "ASYNC"
  | (T 50) => "AWAIT"
  | (T 51) => "TRY"
  | (T 52) => "UNION"
  | (T 53) => "STATICLIFETIME"
  | (T 54) => "IDENT"
  | (T 55) => "CHAR_LIT"
  | (T 56) => "STR_LIT"
  | (T 57) => "RAW_STR_LIT"
  | (T 58) => "BYTE_LIT"
  | (T 59) => "BYTE_STR_LIT"
  | (T 60) => "RAW_BYTE_STR_LIT"
  | (T 61) => "INTEGER_LIT"
  | (T 62) => "TUPLE_INDEX"
  | (T 63) => "FLOAT_LIT"
  | (T 64) => "LIFETIME"
  | (T 65) => "PLUS"
  | (T 66) => "MINUS"
  | (T 67) => "STAR"
  | (T 68) => "SLASH"
  | (T 69) => "PERCENT"
  | (T 70) => "CARET"
  | (T 71) => "NOT"
  | (T 72) => "AND"
  | (T 73) => "OR"
  | (T 74) => "ANDAND"
  | (T 75) => "OROR"
  | (T 76) => "SHL"
  | (T 77) => "SHR"
  | (T 78) => "PLUSEQ"
  | (T 79) => "MINUSEQ"
  | (T 80) => "STAREQ"
  | (T 81) => "SLASHEQ"
  | (T 82) => "PERCENTEQ"
  | (T 83) => "CARETEQ"
  | (T 84) => "ANDEQ"
  | (T 85) => "OREQ"
  | (T 86) => "SHLEQ"
  | (T 87) => "SHREQ"
  | (T 88) => "EQ"
  | (T 89) => "EQEQ"
  | (T 90) => "NE"
  | (T 91) => "GT"
  | (T 92) => "LT"
  | (T 93) => "GE"
  | (T 94) => "LE"
  | (T 95) => "AT"
  | (T 96) => "UNDERSCORE"
  | (T 97) => "DOT"
  | (T 98) => "DOTDOT"
  | (T 99) => "DOTDOTDOT"
  | (T 100) => "DOTDOTEQ"
  | (T 101) => "COMMA"
  | (T 102) => "SEMI"
  | (T 103) => "COLON"
  | (T 104) => "PATHSEP"
  | (T 105) => "RARROW"
  | (T 106) => "FATARROW"
  | (T 107) => "POUND"
  | (T 108) => "DOLLAR"
  | (T 109) => "QUESTION"
  | (T 110) => "LBRACE"
  | (T 111) => "RBRACE"
  | (T 112) => "LBRACKET"
  | (T 113) => "RBRACKET"
  | (T 114) => "LPARENT"
  | (T 115) => "RPARENT"
  | (T 116) => "INNER_DOC_COMMENT"
  | (T 117) => "OUTER_DOC_COMMENT"
  | (T 118) => "SHEBANG"
  | (T 119) => "SHEBANG_LINE"
  | (T 120) => "LOWER_THAN_LPARENT"
  | (T 121) => "LOWER_THAN_ABI"
  | (T 122) => "ABI"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 122) $$ (T 121) $$ (T 120) $$ (T 118) $$ (T 115) $$ (T 114) $$ 
(T 113) $$ (T 112) $$ (T 111) $$ (T 110) $$ (T 109) $$ (T 108) $$ (T 
107) $$ (T 106) $$ (T 105) $$ (T 104) $$ (T 103) $$ (T 102) $$ (T 101)
 $$ (T 100) $$ (T 99) $$ (T 98) $$ (T 97) $$ (T 96) $$ (T 95) $$ (T 94
) $$ (T 93) $$ (T 92) $$ (T 91) $$ (T 90) $$ (T 89) $$ (T 88) $$ (T 87
) $$ (T 86) $$ (T 85) $$ (T 84) $$ (T 83) $$ (T 82) $$ (T 81) $$ (T 80
) $$ (T 79) $$ (T 78) $$ (T 77) $$ (T 76) $$ (T 75) $$ (T 74) $$ (T 73
) $$ (T 72) $$ (T 71) $$ (T 70) $$ (T 69) $$ (T 68) $$ (T 67) $$ (T 66
) $$ (T 65) $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 48
) $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41
) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34
) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27
) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20
) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13
) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6)
 $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.items items1, _, items1right)) :: ( _, ( 
MlyValue.inner_attrs inner_attrs1, _, _)) :: ( _, ( 
MlyValue.SHEBANG_LINE SHEBANG_LINE1, SHEBANG_LINE1left, _)) :: rest671
)) => let val  result = MlyValue.crate (fn _ => let val  (SHEBANG_LINE
 as SHEBANG_LINE1) = SHEBANG_LINE1 ()
 val  (inner_attrs as inner_attrs1) = inner_attrs1 ()
 val  (items as items1) = items1 ()
 in (Crate (Shebang (SOME SHEBANG_LINE), inner_attrs, items))
end)
 in ( LrTable.NT 0, ( result, SHEBANG_LINE1left, items1right), rest671
)
end
|  ( 1, ( ( _, ( MlyValue.items items1, _, items1right)) :: ( _, ( 
MlyValue.inner_attrs inner_attrs1, inner_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.crate (fn _ => let val  (inner_attrs
 as inner_attrs1) = inner_attrs1 ()
 val  (items as items1) = items1 ()
 in (Crate (Shebang (NONE), inner_attrs, items))
end)
 in ( LrTable.NT 0, ( result, inner_attrs1left, items1right), rest671)

end
|  ( 2, ( ( _, ( MlyValue.items items1, _, items1right)) :: ( _, ( 
MlyValue.item item1, item1left, _)) :: rest671)) => let val  result = 
MlyValue.items (fn _ => let val  (item as item1) = item1 ()
 val  (items as items1) = items1 ()
 in (item::items)
end)
 in ( LrTable.NT 2, ( result, item1left, items1right), rest671)
end
|  ( 3, ( rest671)) => let val  result = MlyValue.items (fn _ => ([]))
 in ( LrTable.NT 2, ( result, defaultPos, defaultPos), rest671)
end
|  ( 4, ( ( _, ( MlyValue.vis_item vis_item1, _, vis_item1right)) :: (
 _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: 
rest671)) => let val  result = MlyValue.item (fn _ => let val  (
outer_attrs as outer_attrs1) = outer_attrs1 ()
 val  (vis_item as vis_item1) = vis_item1 ()
 in (VisItemType (outer_attrs, vis_item))
end)
 in ( LrTable.NT 17, ( result, outer_attrs1left, vis_item1right), 
rest671)
end
|  ( 5, ( ( _, ( MlyValue.item_type item_type1, item_type1left, 
item_type1right)) :: rest671)) => let val  result = MlyValue.vis_item
 (fn _ => let val  (item_type as item_type1) = item_type1 ()
 in (VisItem(DefaultVis, item_type))
end)
 in ( LrTable.NT 18, ( result, item_type1left, item_type1right), 
rest671)
end
|  ( 6, ( ( _, ( MlyValue.item_type item_type1, _, item_type1right))
 :: ( _, ( MlyValue.visibility visibility1, visibility1left, _)) :: 
rest671)) => let val  result = MlyValue.vis_item (fn _ => let val  (
visibility as visibility1) = visibility1 ()
 val  (item_type as item_type1) = item_type1 ()
 in (VisItem(visibility, item_type))
end)
 in ( LrTable.NT 18, ( result, visibility1left, item_type1right), 
rest671)
end
|  ( 7, ( ( _, ( _, PUB1left, PUB1right)) :: rest671)) => let val  
result = MlyValue.visibility (fn _ => (PubVis))
 in ( LrTable.NT 20, ( result, PUB1left, PUB1right), rest671)
end
|  ( 8, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( _, PUB1left
, _)) :: rest671)) => let val  result = MlyValue.visibility (fn _ => (
CrateVis))
 in ( LrTable.NT 20, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 9, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( _, PUB1left
, _)) :: rest671)) => let val  result = MlyValue.visibility (fn _ => (
SelfVis))
 in ( LrTable.NT 20, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 10, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( _, 
PUB1left, _)) :: rest671)) => let val  result = MlyValue.visibility
 (fn _ => (SuperVis))
 in ( LrTable.NT 20, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 11, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.simple_path
 simple_path1, _, _)) :: _ :: _ :: ( _, ( _, PUB1left, _)) :: rest671)
) => let val  result = MlyValue.visibility (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 in (InVis (simple_path))
end)
 in ( LrTable.NT 20, ( result, PUB1left, RPARENT1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.simple_path simple_path1, simple_path1left,
 simple_path1right)) :: rest671)) => let val  result = 
MlyValue.use_tree (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 in (UseSingle ([simple_path]))
end)
 in ( LrTable.NT 22, ( result, simple_path1left, simple_path1right), 
rest671)
end
|  ( 13, ( ( _, ( MlyValue.IDENT IDENT1, _, IDENT1right)) :: _ :: ( _,
 ( MlyValue.simple_path simple_path1, simple_path1left, _)) :: rest671
)) => let val  result = MlyValue.use_tree (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 val  (IDENT as IDENT1) = IDENT1 ()
 in (UseAlias (simple_path, IDENT))
end)
 in ( LrTable.NT 22, ( result, simple_path1left, IDENT1right), rest671
)
end
|  ( 14, ( rest671)) => let val  result = MlyValue.macro_item (fn _ =>
 (MarcoItem))
 in ( LrTable.NT 19, ( result, defaultPos, defaultPos), rest671)
end
|  ( 15, ( ( _, ( MlyValue.inner_attrs inner_attrs1, _, 
inner_attrs1right)) :: ( _, ( MlyValue.inner_attr inner_attr1, 
inner_attr1left, _)) :: rest671)) => let val  result = 
MlyValue.inner_attrs (fn _ => let val  (inner_attr as inner_attr1) = 
inner_attr1 ()
 val  (inner_attrs as inner_attrs1) = inner_attrs1 ()
 in (yaccLog("inner_attrs"); inner_attr::inner_attrs)
end)
 in ( LrTable.NT 1, ( result, inner_attr1left, inner_attrs1right), 
rest671)
end
|  ( 16, ( rest671)) => let val  result = MlyValue.inner_attrs (fn _
 => ([]))
 in ( LrTable.NT 1, ( result, defaultPos, defaultPos), rest671)
end
|  ( 17, ( ( _, ( MlyValue.outer_attrs outer_attrs1, _, 
outer_attrs1right)) :: ( _, ( MlyValue.outer_attr outer_attr1, 
outer_attr1left, _)) :: rest671)) => let val  result = 
MlyValue.outer_attrs (fn _ => let val  (outer_attr as outer_attr1) = 
outer_attr1 ()
 val  (outer_attrs as outer_attrs1) = outer_attrs1 ()
 in (yaccLog("outer_attrs"); outer_attr::outer_attrs)
end)
 in ( LrTable.NT 3, ( result, outer_attr1left, outer_attrs1right), 
rest671)
end
|  ( 18, ( rest671)) => let val  result = MlyValue.outer_attrs (fn _
 => ([]))
 in ( LrTable.NT 3, ( result, defaultPos, defaultPos), rest671)
end
|  ( 19, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.meta_item 
meta_item1, _, _)) :: _ :: ( _, ( _, SHEBANG1left, _)) :: rest671)) =>
 let val  result = MlyValue.inner_attr (fn _ => let val  (meta_item
 as meta_item1) = meta_item1 ()
 in (yaccLog("inner_attr"); InnerAttribute(meta_item))
end)
 in ( LrTable.NT 4, ( result, SHEBANG1left, RBRACKET1right), rest671)

end
|  ( 20, ( ( _, ( _, _, RBRACKET1right)) :: ( _, ( MlyValue.meta_item 
meta_item1, _, _)) :: _ :: ( _, ( _, POUND1left, _)) :: rest671)) =>
 let val  result = MlyValue.outer_attr (fn _ => let val  (meta_item
 as meta_item1) = meta_item1 ()
 in (OuterAttribute meta_item)
end)
 in ( LrTable.NT 5, ( result, POUND1left, RBRACKET1right), rest671)

end
|  ( 21, ( ( _, ( MlyValue.lit_exp lit_exp1, _, lit_exp1right)) :: _
 :: ( _, ( MlyValue.simple_path simple_path1, simple_path1left, _)) ::
 rest671)) => let val  result = MlyValue.meta_item (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 val  (lit_exp as lit_exp1) = lit_exp1 ()
 in (AttrKVPair(simple_path, lit_exp))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, lit_exp1right), 
rest671)
end
|  ( 22, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.meta_seq 
meta_seq1, _, _)) :: _ :: ( _, ( MlyValue.simple_path simple_path1, 
simple_path1left, _)) :: rest671)) => let val  result = 
MlyValue.meta_item (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 val  (meta_seq as meta_seq1) = meta_seq1 ()
 in (AttrSubs(simple_path, SOME(meta_seq)))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, RPARENT1right), 
rest671)
end
|  ( 23, ( ( _, ( _, _, RPARENT1right)) :: _ :: ( _, ( 
MlyValue.simple_path simple_path1, simple_path1left, _)) :: rest671))
 => let val  result = MlyValue.meta_item (fn _ => let val  (
simple_path as simple_path1) = simple_path1 ()
 in (AttrSubs(simple_path, NONE))
end)
 in ( LrTable.NT 6, ( result, simple_path1left, RPARENT1right), 
rest671)
end
|  ( 24, ( ( _, ( MlyValue.simple_path simple_path1, simple_path1left,
 simple_path1right)) :: rest671)) => let val  result = 
MlyValue.meta_item (fn _ => let val  (simple_path as simple_path1) = 
simple_path1 ()
 in (AttrName simple_path)
end)
 in ( LrTable.NT 6, ( result, simple_path1left, simple_path1right), 
rest671)
end
|  ( 25, ( ( _, ( _, _, COMMA1right)) :: ( _, ( 
MlyValue.meta_seq_expansion meta_seq_expansion1, _, _)) :: ( _, ( 
MlyValue.meta_item_inner meta_item_inner1, meta_item_inner1left, _))
 :: rest671)) => let val  result = MlyValue.meta_seq (fn _ => let val 
 (meta_item_inner as meta_item_inner1) = meta_item_inner1 ()
 val  (meta_seq_expansion as meta_seq_expansion1) = 
meta_seq_expansion1 ()
 in (MetaSeq(meta_item_inner::meta_seq_expansion))
end)
 in ( LrTable.NT 7, ( result, meta_item_inner1left, COMMA1right), 
rest671)
end
|  ( 26, ( ( _, ( MlyValue.meta_seq_expansion meta_seq_expansion1, _, 
meta_seq_expansion1right)) :: ( _, ( MlyValue.meta_item_inner 
meta_item_inner1, meta_item_inner1left, _)) :: rest671)) => let val  
result = MlyValue.meta_seq (fn _ => let val  (meta_item_inner as 
meta_item_inner1) = meta_item_inner1 ()
 val  (meta_seq_expansion as meta_seq_expansion1) = 
meta_seq_expansion1 ()
 in (MetaSeq(meta_item_inner::meta_seq_expansion))
end)
 in ( LrTable.NT 7, ( result, meta_item_inner1left, 
meta_seq_expansion1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.meta_seq_expansion meta_seq_expansion1, _, 
meta_seq_expansion1right)) :: _ :: ( _, ( MlyValue.meta_item_inner 
meta_item_inner1, _, _)) :: _ :: ( _, ( _, LPARENT1left, _)) :: 
rest671)) => let val  result = MlyValue.meta_seq_expansion (fn _ =>
 let val  (meta_item_inner as meta_item_inner1) = meta_item_inner1 ()
 val  (meta_seq_expansion as meta_seq_expansion1) = 
meta_seq_expansion1 ()
 in (meta_item_inner::meta_seq_expansion)
end)
 in ( LrTable.NT 8, ( result, LPARENT1left, meta_seq_expansion1right),
 rest671)
end
|  ( 28, ( rest671)) => let val  result = MlyValue.meta_seq_expansion
 (fn _ => ([]))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 29, ( ( _, ( MlyValue.meta_item meta_item1, meta_item1left, 
meta_item1right)) :: rest671)) => let val  result = 
MlyValue.meta_item_inner (fn _ => let val  (meta_item as meta_item1) =
 meta_item1 ()
 in (MetaItem(meta_item))
end)
 in ( LrTable.NT 9, ( result, meta_item1left, meta_item1right), 
rest671)
end
|  ( 30, ( ( _, ( MlyValue.lit_exp lit_exp1, lit_exp1left, 
lit_exp1right)) :: rest671)) => let val  result = 
MlyValue.meta_item_inner (fn _ => let val  (lit_exp as lit_exp1) = 
lit_exp1 ()
 in (MetaLit(lit_exp))
end)
 in ( LrTable.NT 9, ( result, lit_exp1left, lit_exp1right), rest671)

end
|  ( 31, ( ( _, ( MlyValue.STR_LIT STR_LIT1, STR_LIT1left, 
STR_LIT1right)) :: rest671)) => let val  result = MlyValue.lit_exp (fn
 _ => let val  (STR_LIT as STR_LIT1) = STR_LIT1 ()
 in (yaccLog("lit_exp "^STR_LIT); LiteralExpression(STR_LIT))
end)
 in ( LrTable.NT 10, ( result, STR_LIT1left, STR_LIT1right), rest671)

end
|  ( 32, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
IDENT1 = IDENT1 ()
 in ()
end; ()))
 in ( LrTable.NT 23, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
IDENT1 = IDENT1 ()
 in ()
end; ()))
 in ( LrTable.NT 24, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.simple_path_expansion 
simple_path_expansion1, _, simple_path_expansion1right)) :: ( _, ( 
MlyValue.simple_path_segment simple_path_segment1, _, _)) :: ( _, ( _,
 PATHSEP1left, _)) :: rest671)) => let val  result = 
MlyValue.simple_path (fn _ => let val  (simple_path_segment as 
simple_path_segment1) = simple_path_segment1 ()
 val  (simple_path_expansion as simple_path_expansion1) = 
simple_path_expansion1 ()
 in (SimplePath(simple_path_segment::simple_path_expansion))
end)
 in ( LrTable.NT 12, ( result, PATHSEP1left, 
simple_path_expansion1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.simple_path_expansion 
simple_path_expansion1, _, simple_path_expansion1right)) :: ( _, ( 
MlyValue.simple_path_segment simple_path_segment1, 
simple_path_segment1left, _)) :: rest671)) => let val  result = 
MlyValue.simple_path (fn _ => let val  (simple_path_segment as 
simple_path_segment1) = simple_path_segment1 ()
 val  (simple_path_expansion as simple_path_expansion1) = 
simple_path_expansion1 ()
 in (SimplePath(simple_path_segment::simple_path_expansion))
end)
 in ( LrTable.NT 12, ( result, simple_path_segment1left, 
simple_path_expansion1right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.simple_path_expansion 
simple_path_expansion1, _, simple_path_expansion1right)) :: ( _, ( 
MlyValue.simple_path_segment simple_path_segment1, _, _)) :: ( _, ( _,
 PATHSEP1left, _)) :: rest671)) => let val  result = 
MlyValue.simple_path_expansion (fn _ => let val  (simple_path_segment
 as simple_path_segment1) = simple_path_segment1 ()
 val  (simple_path_expansion as simple_path_expansion1) = 
simple_path_expansion1 ()
 in (simple_path_segment::simple_path_expansion)
end)
 in ( LrTable.NT 14, ( result, PATHSEP1left, 
simple_path_expansion1right), rest671)
end
|  ( 37, ( rest671)) => let val  result = 
MlyValue.simple_path_expansion (fn _ => ([]))
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 38, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.simple_path_segment (fn _ =>
 let val  (IDENT as IDENT1) = IDENT1 ()
 in (IDENT)
end)
 in ( LrTable.NT 13, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 39, ( ( _, ( _, SUPER1left, SUPER1right)) :: rest671)) => let
 val  result = MlyValue.simple_path_segment (fn _ => ("super"))
 in ( LrTable.NT 13, ( result, SUPER1left, SUPER1right), rest671)
end
|  ( 40, ( ( _, ( _, SELFVALUE1left, SELFVALUE1right)) :: rest671)) =>
 let val  result = MlyValue.simple_path_segment (fn _ => ("self"))
 in ( LrTable.NT 13, ( result, SELFVALUE1left, SELFVALUE1right), 
rest671)
end
|  ( 41, ( ( _, ( _, CARET1left, CARET1right)) :: rest671)) => let
 val  result = MlyValue.simple_path_segment (fn _ => ("crate"))
 in ( LrTable.NT 13, ( result, CARET1left, CARET1right), rest671)
end
|  ( 42, ( ( _, ( _, _, CARET1right)) :: ( _, ( _, DOLLAR1left, _)) ::
 rest671)) => let val  result = MlyValue.simple_path_segment (fn _ =>
 ("$crate"))
 in ( LrTable.NT 13, ( result, DOLLAR1left, CARET1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.visibility visibility1, visibility1left, 
visibility1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  visibility1 = visibility1 ()
 in ()
end; ()))
 in ( LrTable.NT 29, ( result, visibility1left, visibility1right), 
rest671)
end
|  ( 44, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 29, ( result, defaultPos, defaultPos), rest671)
end
|  ( 45, ( ( _, ( MlyValue.ntVOID where_clause1, where_clause1left, 
where_clause1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  where_clause1 = where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 28, ( result, where_clause1left, where_clause1right),
 rest671)
end
|  ( 46, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 28, ( result, defaultPos, defaultPos), rest671)
end
|  ( 47, ( ( _, ( _, WHERE1left, WHERE1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 26, ( result, WHERE1left, WHERE1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.ntVOID generics1, generics1left, 
generics1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  generics1 = generics1 ()
 in ()
end; ()))
 in ( LrTable.NT 27, ( result, generics1left, generics1right), rest671
)
end
|  ( 49, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 27, ( result, defaultPos, defaultPos), rest671)
end
|  ( 50, ( ( _, ( _, _, GT1right)) :: ( _, ( MlyValue.IDENT IDENT1, _,
 _)) :: ( _, ( _, LT1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 in ()
end; ()))
 in ( LrTable.NT 25, ( result, LT1left, GT1right), rest671)
end
|  ( 51, ( ( _, ( _, COMMA1left, COMMA1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 30, ( result, COMMA1left, COMMA1right), rest671)
end
|  ( 52, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 30, ( result, defaultPos, defaultPos), rest671)
end
|  ( 53, ( ( _, ( _, MUT1left, MUT1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 93, ( result, MUT1left, MUT1right), rest671)
end
|  ( 54, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 93, ( result, defaultPos, defaultPos), rest671)
end
|  ( 55, ( ( _, ( _, PLUS1left, PLUS1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 31, ( result, PLUS1left, PLUS1right), rest671)
end
|  ( 56, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 31, ( result, defaultPos, defaultPos), rest671)
end
|  ( 57, ( ( _, ( _, QUESTION1left, QUESTION1right)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 32, ( result, QUESTION1left, QUESTION1right), rest671
)
end
|  ( 58, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 32, ( result, defaultPos, defaultPos), rest671)
end
|  ( 59, ( ( _, ( _, CONST1left, CONST1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 36, ( result, CONST1left, CONST1right), rest671)
end
|  ( 60, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 36, ( result, defaultPos, defaultPos), rest671)
end
|  ( 61, ( ( _, ( _, UNSAFE1left, UNSAFE1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 37, ( result, UNSAFE1left, UNSAFE1right), rest671)

end
|  ( 62, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 37, ( result, defaultPos, defaultPos), rest671)
end
|  ( 63, ( ( _, ( _, NOT1left, NOT1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 33, ( result, NOT1left, NOT1right), rest671)
end
|  ( 64, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 33, ( result, defaultPos, defaultPos), rest671)
end
|  ( 65, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) :: 
rest671)) => let val  result = MlyValue.item_type (fn _ => let val  
IDENT1 = IDENT1 ()
 in (Function)
end)
 in ( LrTable.NT 21, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 66, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDENT IDENT1,
 _, _)) :: ( _, ( _, MOD1left, _)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (IDENT as IDENT1) = IDENT1 ()
 in (Module (IDENT, NONE))
end)
 in ( LrTable.NT 21, ( result, MOD1left, SEMI1right), rest671)
end
|  ( 67, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.items items1
, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1, _, _)) :: _ :: (
 _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, MOD1left, _)) :: 
rest671)) => let val  result = MlyValue.item_type (fn _ => let val  (
IDENT as IDENT1) = IDENT1 ()
 val  (inner_attrs as inner_attrs1) = inner_attrs1 ()
 val  (items as items1) = items1 ()
 in (Module (IDENT, SOME(ModuleBody(inner_attrs, items))))
end)
 in ( LrTable.NT 21, ( result, MOD1left, RBRACE1right), rest671)
end
|  ( 68, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDENT IDENT1,
 _, _)) :: _ :: ( _, ( _, EXTERN1left, _)) :: rest671)) => let val  
result = MlyValue.item_type (fn _ => let val  (IDENT as IDENT1) = 
IDENT1 ()
 in (yaccLog("extern crate "^IDENT); ExternCrate (IDENT, NONE))
end)
 in ( LrTable.NT 21, ( result, EXTERN1left, SEMI1right), rest671)
end
|  ( 69, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDENT IDENT2,
 _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( _,
 EXTERN1left, _)) :: rest671)) => let val  result = MlyValue.item_type
 (fn _ => let val  IDENT1 = IDENT1 ()
 val  IDENT2 = IDENT2 ()
 in (
yaccLog("extern crate "^IDENT1^" as"^IDENT2); ExternCrate (IDENT1, SOME(IDENT2))
)
end)
 in ( LrTable.NT 21, ( result, EXTERN1left, SEMI1right), rest671)
end
|  ( 70, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.use_tree 
use_tree1, _, _)) :: ( _, ( _, USE1left, _)) :: rest671)) => let val  
result = MlyValue.item_type (fn _ => let val  (use_tree as use_tree1)
 = use_tree1 ()
 in (yaccLog("use_tree"); UseDeclaration(use_tree))
end)
 in ( LrTable.NT 21, ( result, USE1left, SEMI1right), rest671)
end
|  ( 71, ( ( _, ( MlyValue.ntVOID function1, function1left, 
function1right)) :: rest671)) => let val  result = MlyValue.item_type
 (fn _ => let val  (function as function1) = function1 ()
 in (yaccLog("function"); Function)
end)
 in ( LrTable.NT 21, ( result, function1left, function1right), rest671
)
end
|  ( 72, ( ( _, ( MlyValue.ntVOID type_alias1, type_alias1left, 
type_alias1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  type_alias1 = type_alias1 ()
 in (yaccLog("type alias"); TypeAlias)
end)
 in ( LrTable.NT 21, ( result, type_alias1left, type_alias1right), 
rest671)
end
|  ( 73, ( ( _, ( MlyValue.ntVOID struct_struct1, struct_struct1left, 
struct_struct1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  struct_struct1 = struct_struct1
 ()
 in (yaccLog("struct struct"); Struct)
end)
 in ( LrTable.NT 21, ( result, struct_struct1left, struct_struct1right
), rest671)
end
|  ( 74, ( ( _, ( MlyValue.ntVOID tuple_struct1, tuple_struct1left, 
tuple_struct1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  tuple_struct1 = tuple_struct1 ()
 in (yaccLog("tuple struct"); Struct)
end)
 in ( LrTable.NT 21, ( result, tuple_struct1left, tuple_struct1right),
 rest671)
end
|  ( 75, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_enum_items1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_generics1,
 _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, ENUM1left
, _)) :: rest671)) => let val  result = MlyValue.item_type (fn _ =>
 let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  maybe_enum_items1 = maybe_enum_items1 ()
 in (yaccLog("enumeration"); Enumeration)
end)
 in ( LrTable.NT 21, ( result, ENUM1left, RBRACE1right), rest671)
end
|  ( 76, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
struct_fields1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_generics1,
 _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
UNION1left, _)) :: rest671)) => let val  result = MlyValue.item_type
 (fn _ => let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  struct_fields1 = struct_fields1 ()
 in (yaccLog("Union"); Union)
end)
 in ( LrTable.NT 21, ( result, UNION1left, RBRACE1right), rest671)
end
|  ( 77, ( ( _, ( MlyValue.ntVOID constant_item1, constant_item1left, 
constant_item1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  constant_item1 = constant_item1
 ()
 in (yaccLog("ConstantItem"); ConstantItem)
end)
 in ( LrTable.NT 21, ( result, constant_item1left, constant_item1right
), rest671)
end
|  ( 78, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( _, STATIC1left
, _)) :: rest671)) => let val  result = MlyValue.item_type (fn _ =>
 let val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in (yaccLog("StaticItem"); StaticItem)
end)
 in ( LrTable.NT 21, ( result, STATIC1left, SEMI1right), rest671)
end
|  ( 79, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, STATIC1left, _))
 :: rest671)) => let val  result = MlyValue.item_type (fn _ => let
 val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in (yaccLog("StaticItem"); StaticItem)
end)
 in ( LrTable.NT 21, ( result, STATIC1left, SEMI1right), rest671)
end
|  ( 80, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_items1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID 
maybe_trait_super1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_generics1,
 _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( 
MlyValue.ntVOID maybe_unsafe1, maybe_unsafe1left, _)) :: rest671)) =>
 let val  result = MlyValue.item_type (fn _ => let val  maybe_unsafe1
 = maybe_unsafe1 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_trait_super1 = maybe_trait_super1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  trait_items1 = trait_items1 ()
 in (yaccLog("Trait"); Trait)
end)
 in ( LrTable.NT 21, ( result, maybe_unsafe1left, RBRACE1right), 
rest671)
end
|  ( 81, ( ( _, ( MlyValue.ntVOID inherent_impl1, inherent_impl1left, 
inherent_impl1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (inherent_impl as inherent_impl1)
 = inherent_impl1 ()
 in (yaccLog("inherent_impl"); Implementation)
end)
 in ( LrTable.NT 21, ( result, inherent_impl1left, inherent_impl1right
), rest671)
end
|  ( 82, ( ( _, ( MlyValue.ntVOID trait_impl1, trait_impl1left, 
trait_impl1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (trait_impl as trait_impl1) = 
trait_impl1 ()
 in (yaccLog("trait_impl"); Implementation)
end)
 in ( LrTable.NT 21, ( result, trait_impl1left, trait_impl1right), 
rest671)
end
|  ( 83, ( ( _, ( MlyValue.ntVOID extern_block1, extern_block1left, 
extern_block1right)) :: rest671)) => let val  result = 
MlyValue.item_type (fn _ => let val  (extern_block as extern_block1) =
 extern_block1 ()
 in (yaccLog("extern_block"); ExternBlock)
end)
 in ( LrTable.NT 21, ( result, extern_block1left, extern_block1right),
 rest671)
end
|  ( 84, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID types1,
 _, _)) :: _ :: ( _, ( MlyValue.ntVOID maybe_where_clause1, _, _)) :: 
( _, ( MlyValue.ntVOID maybe_generics1, _, _)) :: ( _, ( 
MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  IDENT1 = 
IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 66, ( result, TYPE1left, SEMI1right), rest671)
end
|  ( 85, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, CONST1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 67, ( result, CONST1left, SEMI1right), rest671)
end
|  ( 86, ( ( _, ( MlyValue.ntVOID block_expression1, _, 
block_expression1right)) :: ( _, ( MlyValue.ntVOID maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.ntVOID maybe_func_return_type1, _, _)) ::
 _ :: ( _, ( MlyValue.ntVOID maybe_func_parameters1, _, _)) :: _ :: (
 _, ( MlyValue.ntVOID maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT
 IDENT1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID func_qualifier1, 
func_qualifier1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  func_qualifier1 = func_qualifier1
 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_func_parameters1 = maybe_func_parameters1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  block_expression1 = block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 34, ( result, func_qualifier1left, 
block_expression1right), rest671)
end
|  ( 87, ( ( _, ( MlyValue.ntVOID maybe_unsafe1, _, maybe_unsafe1right
)) :: ( _, ( MlyValue.ntVOID maybe_const1, maybe_const1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_const1 = maybe_const1 ()
 val  maybe_unsafe1 = maybe_unsafe1 ()
 in ()
end; ()))
 in ( LrTable.NT 35, ( result, maybe_const1left, maybe_unsafe1right), 
rest671)
end
|  ( 88, ( ( _, ( MlyValue.ntVOID abi1, abi1left, abi1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
abi1 = abi1 ()
 in ()
end; ()))
 in ( LrTable.NT 39, ( result, abi1left, abi1right), rest671)
end
|  ( 89, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 39, ( result, defaultPos, defaultPos), rest671)
end
|  ( 90, ( ( _, ( MlyValue.STR_LIT STR_LIT1, STR_LIT1left, 
STR_LIT1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  STR_LIT1 = STR_LIT1 ()
 in ()
end; ()))
 in ( LrTable.NT 38, ( result, STR_LIT1left, STR_LIT1right), rest671)

end
|  ( 91, ( ( _, ( MlyValue.RAW_BYTE_STR_LIT RAW_BYTE_STR_LIT1, 
RAW_BYTE_STR_LIT1left, RAW_BYTE_STR_LIT1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  RAW_BYTE_STR_LIT1 =
 RAW_BYTE_STR_LIT1 ()
 in ()
end; ()))
 in ( LrTable.NT 38, ( result, RAW_BYTE_STR_LIT1left, 
RAW_BYTE_STR_LIT1right), rest671)
end
|  ( 92, ( ( _, ( MlyValue.ntVOID func_parameters1, 
func_parameters1left, func_parameters1right)) :: rest671)) => let val 
 result = MlyValue.ntVOID (fn _ => ( let val  func_parameters1 = 
func_parameters1 ()
 in ()
end; ()))
 in ( LrTable.NT 41, ( result, func_parameters1left, 
func_parameters1right), rest671)
end
|  ( 93, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 41, ( result, defaultPos, defaultPos), rest671)
end
|  ( 94, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right))
 :: ( _, ( MlyValue.ntVOID func_parameters_expansion1, _, _)) :: ( _, 
( MlyValue.ntVOID func_param1, func_param1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  func_param1 = 
func_param1 ()
 val  func_parameters_expansion1 = func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 40, ( result, func_param1left, maybe_comma1right), 
rest671)
end
|  ( 95, ( ( _, ( MlyValue.ntVOID func_param1, _, func_param1right))
 :: _ :: ( _, ( MlyValue.ntVOID func_parameters_expansion1, 
func_parameters_expansion1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  func_parameters_expansion1 = 
func_parameters_expansion1 ()
 val  func_param1 = func_param1 ()
 in ()
end; ()))
 in ( LrTable.NT 43, ( result, func_parameters_expansion1left, 
func_param1right), rest671)
end
|  ( 96, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 43, ( result, defaultPos, defaultPos), rest671)
end
|  ( 97, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: ( _
, ( MlyValue.ntVOID patterns1, patterns1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  patterns1 = 
patterns1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 42, ( result, patterns1left, types1right), rest671)

end
|  ( 98, ( ( _, ( MlyValue.ntVOID func_return_type1, 
func_return_type1left, func_return_type1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  func_return_type1 =
 func_return_type1 ()
 in ()
end; ()))
 in ( LrTable.NT 45, ( result, func_return_type1left, 
func_return_type1right), rest671)
end
|  ( 99, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 45, ( result, defaultPos, defaultPos), rest671)
end
|  ( 100, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: ( _, (
 _, RARROW1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 44, ( result, RARROW1left, types1right), rest671)
end
|  ( 101, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_struct_fields1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_generics1,
 _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
STRUCT1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  maybe_struct_fields1 = maybe_struct_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 49, ( result, STRUCT1left, RBRACE1right), rest671)

end
|  ( 102, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_generics1,
 _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
STRUCT1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 49, ( result, STRUCT1left, SEMI1right), rest671)
end
|  ( 103, ( ( _, ( MlyValue.ntVOID struct_fields1, struct_fields1left,
 struct_fields1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  struct_fields1 = struct_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 55, ( result, struct_fields1left, struct_fields1right
), rest671)
end
|  ( 104, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 55, ( result, defaultPos, defaultPos), rest671)
end
|  ( 105, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID struct_fields_expansion1, _, _)) :: ( _, (
 MlyValue.ntVOID struct_field1, struct_field1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  struct_field1 =
 struct_field1 ()
 val  struct_fields_expansion1 = struct_fields_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 51, ( result, struct_field1left, maybe_comma1right), 
rest671)
end
|  ( 106, ( ( _, ( MlyValue.ntVOID struct_field1, _, 
struct_field1right)) :: _ :: ( _, ( MlyValue.ntVOID 
struct_fields_expansion1, struct_fields_expansion1left, _)) :: rest671
)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
struct_fields_expansion1 = struct_fields_expansion1 ()
 val  struct_field1 = struct_field1 ()
 in ()
end; ()))
 in ( LrTable.NT 57, ( result, struct_fields_expansion1left, 
struct_field1right), rest671)
end
|  ( 107, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 57, ( result, defaultPos, defaultPos), rest671)
end
|  ( 108, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: (
 _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( MlyValue.visibility 
visibility1, _, _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, 
outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  visibility1 = visibility1 ()
 val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 52, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 109, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: (
 _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( MlyValue.outer_attrs 
outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 52, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 110, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_tuple_fields1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _
, ( _, STRUCT1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_tuple_fields1 = maybe_tuple_fields1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 50, ( result, STRUCT1left, SEMI1right), rest671)
end
|  ( 111, ( ( _, ( MlyValue.ntVOID tuple_fields1, tuple_fields1left, 
tuple_fields1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  tuple_fields1 = tuple_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 56, ( result, tuple_fields1left, tuple_fields1right),
 rest671)
end
|  ( 112, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 56, ( result, defaultPos, defaultPos), rest671)
end
|  ( 113, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID tuple_fields_expansion1, _, _)) :: ( _, ( 
MlyValue.ntVOID tuple_field1, tuple_field1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  tuple_field1 = 
tuple_field1 ()
 val  tuple_fields_expansion1 = tuple_fields_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 53, ( result, tuple_field1left, maybe_comma1right), 
rest671)
end
|  ( 114, ( ( _, ( MlyValue.ntVOID tuple_field1, _, tuple_field1right)
) :: _ :: ( _, ( MlyValue.ntVOID tuple_fields_expansion1, 
tuple_fields_expansion1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  tuple_fields_expansion1 = 
tuple_fields_expansion1 ()
 val  tuple_field1 = tuple_field1 ()
 in ()
end; ()))
 in ( LrTable.NT 58, ( result, tuple_fields_expansion1left, 
tuple_field1right), rest671)
end
|  ( 115, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 58, ( result, defaultPos, defaultPos), rest671)
end
|  ( 116, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: ( _, ( 
MlyValue.visibility visibility1, _, _)) :: ( _, ( MlyValue.outer_attrs
 outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result =
 MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  visibility1 = visibility1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 54, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 117, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 54, ( result, outer_attrs1left, types1right), rest671
)
end
|  ( 118, ( ( _, ( MlyValue.ntVOID enum_items1, enum_items1left, 
enum_items1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  enum_items1 = enum_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 60, ( result, enum_items1left, enum_items1right), 
rest671)
end
|  ( 119, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 60, ( result, defaultPos, defaultPos), rest671)
end
|  ( 120, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID enum_items_expansion1, _, _)) :: ( _, ( 
MlyValue.ntVOID enum_item1, enum_item1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  enum_item1 = 
enum_item1 ()
 val  enum_items_expansion1 = enum_items_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in (yaccLog("enum_items"))
end; ()))
 in ( LrTable.NT 59, ( result, enum_item1left, maybe_comma1right), 
rest671)
end
|  ( 121, ( ( _, ( MlyValue.ntVOID enum_item1, _, enum_item1right)) ::
 _ :: ( _, ( MlyValue.ntVOID enum_items_expansion1, 
enum_items_expansion1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  enum_items_expansion1 = 
enum_items_expansion1 ()
 val  enum_item1 = enum_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 61, ( result, enum_items_expansion1left, 
enum_item1right), rest671)
end
|  ( 122, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 61, ( result, defaultPos, defaultPos), rest671)
end
|  ( 123, ( ( _, ( MlyValue.ntVOID enum_item_tuple1, _, 
enum_item_tuple1right)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _
, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  enum_item_tuple1 = enum_item_tuple1 ()
 in ()
end; ()))
 in ( LrTable.NT 62, ( result, outer_attrs1left, enum_item_tuple1right
), rest671)
end
|  ( 124, ( ( _, ( MlyValue.ntVOID enum_item_struct1, _, 
enum_item_struct1right)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: (
 _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  enum_item_struct1 = enum_item_struct1 ()
 in ()
end; ()))
 in ( LrTable.NT 62, ( result, outer_attrs1left, 
enum_item_struct1right), rest671)
end
|  ( 125, ( ( _, ( MlyValue.ntVOID enum_item_discriminant1, _, 
enum_item_discriminant1right)) :: ( _, ( MlyValue.IDENT IDENT1, _, _))
 :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 val  enum_item_discriminant1 = enum_item_discriminant1 ()
 in ()
end; ()))
 in ( LrTable.NT 62, ( result, outer_attrs1left, 
enum_item_discriminant1right), rest671)
end
|  ( 126, ( ( _, ( MlyValue.IDENT IDENT1, _, IDENT1right)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  IDENT1 = IDENT1 ()
 in (yaccLog("enum_item: branch 4"))
end; ()))
 in ( LrTable.NT 62, ( result, outer_attrs1left, IDENT1right), rest671
)
end
|  ( 127, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.ntVOID 
maybe_tuple_fields1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: rest671)
) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_tuple_fields1 = maybe_tuple_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 63, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 128, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_struct_fields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)
) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_struct_fields1 = maybe_struct_fields1 ()
 in ()
end; ()))
 in ( LrTable.NT 64, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 129, ( ( _, ( MlyValue.ntVOID expression1, _, expression1right))
 :: ( _, ( _, EQ1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  expression1 = expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 65, ( result, EQ1left, expression1right), rest671)

end
|  ( 130, ( ( _, ( MlyValue.ntVOID trait_items1, _, trait_items1right)
) :: ( _, ( MlyValue.ntVOID trait_item1, trait_item1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
trait_item1 = trait_item1 ()
 val  trait_items1 = trait_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 78, ( result, trait_item1left, trait_items1right), 
rest671)
end
|  ( 131, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 78, ( result, defaultPos, defaultPos), rest671)
end
|  ( 132, ( ( _, ( MlyValue.ntVOID trait_func1, _, trait_func1right))
 :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  trait_func1 = trait_func1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, trait_func1right), 
rest671)
end
|  ( 133, ( ( _, ( MlyValue.ntVOID trait_method1, _, 
trait_method1right)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, 
outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  trait_method1 = trait_method1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, trait_method1right), 
rest671)
end
|  ( 134, ( ( _, ( MlyValue.ntVOID trait_const1, _, trait_const1right)
) :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 outer_attrs1 = outer_attrs1 ()
 val  trait_const1 = trait_const1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, trait_const1right), 
rest671)
end
|  ( 135, ( ( _, ( MlyValue.ntVOID trait_type1, _, trait_type1right))
 :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
outer_attrs1 = outer_attrs1 ()
 val  trait_type1 = trait_type1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, outer_attrs1left, trait_type1right), 
rest671)
end
|  ( 136, ( ( _, ( MlyValue.ntVOID marco_invocation_semi1, 
marco_invocation_semi1left, marco_invocation_semi1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
marco_invocation_semi1 = marco_invocation_semi1 ()
 in ()
end; ()))
 in ( LrTable.NT 79, ( result, marco_invocation_semi1left, 
marco_invocation_semi1right), rest671)
end
|  ( 137, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
trait_func_decl1, trait_func_decl1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  trait_func_decl1 = 
trait_func_decl1 ()
 in ()
end; ()))
 in ( LrTable.NT 80, ( result, trait_func_decl1left, SEMI1right), 
rest671)
end
|  ( 138, ( ( _, ( MlyValue.ntVOID block_expression1, _, 
block_expression1right)) :: ( _, ( MlyValue.ntVOID trait_func_decl1, 
trait_func_decl1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  trait_func_decl1 = 
trait_func_decl1 ()
 val  block_expression1 = block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 80, ( result, trait_func_decl1left, 
block_expression1right), rest671)
end
|  ( 139, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
trait_method_decl1, trait_method_decl1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  trait_method_decl1
 = trait_method_decl1 ()
 in ()
end; ()))
 in ( LrTable.NT 81, ( result, trait_method_decl1left, SEMI1right), 
rest671)
end
|  ( 140, ( ( _, ( MlyValue.ntVOID block_expression1, 
block_expression1left, block_expression1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  block_expression1 =
 block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 81, ( result, block_expression1left, 
block_expression1right), rest671)
end
|  ( 141, ( ( _, ( MlyValue.ntVOID where_clause1, _, 
where_clause1right)) :: ( _, ( MlyValue.ntVOID maybe_func_return_type1
, _, _)) :: _ :: ( _, ( MlyValue.ntVOID maybe_trait_func_parameters1,
 _, _)) :: _ :: ( _, ( MlyValue.ntVOID maybe_generics1, _, _)) :: ( _,
 ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
func_qualifier1, func_qualifier1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  func_qualifier1 = 
func_qualifier1 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_trait_func_parameters1 = maybe_trait_func_parameters1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  where_clause1 = where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 85, ( result, func_qualifier1left, where_clause1right
), rest671)
end
|  ( 142, ( ( _, ( MlyValue.ntVOID trait_func_parameters1, 
trait_func_parameters1left, trait_func_parameters1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
trait_func_parameters1 = trait_func_parameters1 ()
 in ()
end; ()))
 in ( LrTable.NT 89, ( result, trait_func_parameters1left, 
trait_func_parameters1right), rest671)
end
|  ( 143, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 89, ( result, defaultPos, defaultPos), rest671)
end
|  ( 144, ( ( _, ( MlyValue.ntVOID maybe_where_clause1, _, 
maybe_where_clause1right)) :: ( _, ( MlyValue.ntVOID 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_comma1, _, _)) :: ( _, ( MlyValue.ntVOID 
trait_func_parameters_expansion1, _, _)) :: ( _, ( MlyValue.ntVOID 
self_param1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID maybe_generics1, _,
 _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _ :: ( _, ( 
MlyValue.ntVOID func_qualifier1, func_qualifier1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
func_qualifier1 = func_qualifier1 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  self_param1 = self_param1 ()
 val  trait_func_parameters_expansion1 = 
trait_func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 86, ( result, func_qualifier1left, 
maybe_where_clause1right), rest671)
end
|  ( 145, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID trait_func_parameters_expansion1, _, _))
 :: ( _, ( MlyValue.ntVOID trait_func_param1, trait_func_param1left, _
)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  trait_func_param1 = trait_func_param1 ()
 val  trait_func_parameters_expansion1 = 
trait_func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 87, ( result, trait_func_param1left, 
maybe_comma1right), rest671)
end
|  ( 146, ( ( _, ( MlyValue.ntVOID trait_func_param1, _, 
trait_func_param1right)) :: _ :: ( _, ( MlyValue.ntVOID 
trait_func_parameters_expansion1, trait_func_parameters_expansion1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  trait_func_parameters_expansion1 = 
trait_func_parameters_expansion1 ()
 val  trait_func_param1 = trait_func_param1 ()
 in ()
end; ()))
 in ( LrTable.NT 90, ( result, trait_func_parameters_expansion1left, 
trait_func_param1right), rest671)
end
|  ( 147, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 90, ( result, defaultPos, defaultPos), rest671)
end
|  ( 148, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: (
 _, ( MlyValue.ntVOID patterns1, patterns1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  patterns1 = 
patterns1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 88, ( result, patterns1left, types1right), rest671)

end
|  ( 149, ( ( _, ( MlyValue.ntVOID types1, types1left, types1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 88, ( result, types1left, types1right), rest671)
end
|  ( 150, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID types1
, _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, 
CONST1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 82, ( result, CONST1left, SEMI1right), rest671)
end
|  ( 151, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
expression1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID types1, _, _)) :: _
 :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( _, CONST1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 val  expression1 = expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 82, ( result, CONST1left, SEMI1right), rest671)
end
|  ( 152, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
maybe_trait_super1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: 
( _, ( _, TYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_trait_super1 = maybe_trait_super1 ()
 in ()
end; ()))
 in ( LrTable.NT 83, ( result, TYPE1left, SEMI1right), rest671)
end
|  ( 153, ( ( _, ( MlyValue.ntVOID maybe_type_param_bounds1, _, 
maybe_type_param_bounds1right)) :: ( _, ( _, COLON1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_type_param_bounds1 = maybe_type_param_bounds1 ()
 in ()
end; ()))
 in ( LrTable.NT 68, ( result, COLON1left, 
maybe_type_param_bounds1right), rest671)
end
|  ( 154, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 68, ( result, defaultPos, defaultPos), rest671)
end
|  ( 155, ( ( _, ( MlyValue.ntVOID type_param_bounds1, 
type_param_bounds1left, type_param_bounds1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  type_param_bounds1
 = type_param_bounds1 ()
 in ()
end; ()))
 in ( LrTable.NT 69, ( result, type_param_bounds1left, 
type_param_bounds1right), rest671)
end
|  ( 156, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 69, ( result, defaultPos, defaultPos), rest671)
end
|  ( 157, ( ( _, ( MlyValue.ntVOID maybe_plus1, _, maybe_plus1right))
 :: ( _, ( MlyValue.ntVOID type_param_bounds_expansion1, _, _)) :: ( _
, ( MlyValue.ntVOID type_param_bound1, type_param_bound1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
type_param_bound1 = type_param_bound1 ()
 val  type_param_bounds_expansion1 = type_param_bounds_expansion1 ()
 val  maybe_plus1 = maybe_plus1 ()
 in ()
end; ()))
 in ( LrTable.NT 70, ( result, type_param_bound1left, maybe_plus1right
), rest671)
end
|  ( 158, ( ( _, ( MlyValue.ntVOID type_param_bound1, _, 
type_param_bound1right)) :: _ :: ( _, ( MlyValue.ntVOID 
type_param_bounds_expansion1, type_param_bounds_expansion1left, _)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
type_param_bounds_expansion1 = type_param_bounds_expansion1 ()
 val  type_param_bound1 = type_param_bound1 ()
 in ()
end; ()))
 in ( LrTable.NT 71, ( result, type_param_bounds_expansion1left, 
type_param_bound1right), rest671)
end
|  ( 159, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 71, ( result, defaultPos, defaultPos), rest671)
end
|  ( 160, ( ( _, ( MlyValue.ntVOID lifetime1, lifetime1left, 
lifetime1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  lifetime1 = lifetime1 ()
 in ()
end; ()))
 in ( LrTable.NT 72, ( result, lifetime1left, lifetime1right), rest671
)
end
|  ( 161, ( ( _, ( MlyValue.ntVOID trait_bound1, trait_bound1left, 
trait_bound1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  trait_bound1 = trait_bound1 ()
 in ()
end; ()))
 in ( LrTable.NT 72, ( result, trait_bound1left, trait_bound1right), 
rest671)
end
|  ( 162, ( ( _, ( MlyValue.LIFETIME LIFETIME1, LIFETIME1left, 
LIFETIME1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  LIFETIME1 = LIFETIME1 ()
 in ()
end; ()))
 in ( LrTable.NT 73, ( result, LIFETIME1left, LIFETIME1right), rest671
)
end
|  ( 163, ( ( _, ( _, STATICLIFETIME1left, STATICLIFETIME1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 73, ( result, STATICLIFETIME1left, 
STATICLIFETIME1right), rest671)
end
|  ( 164, ( ( _, ( MlyValue.ntVOID type_path1, _, type_path1right)) ::
 ( _, ( MlyValue.ntVOID maybe_for_lifetimes1, _, _)) :: ( _, ( 
MlyValue.ntVOID maybe_ques1, maybe_ques1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  maybe_ques1 = 
maybe_ques1 ()
 val  maybe_for_lifetimes1 = maybe_for_lifetimes1 ()
 val  type_path1 = type_path1 ()
 in ()
end; ()))
 in ( LrTable.NT 74, ( result, maybe_ques1left, type_path1right), 
rest671)
end
|  ( 165, ( ( _, ( MlyValue.ntVOID type_path1, _, type_path1right)) ::
 ( _, ( MlyValue.ntVOID maybe_for_lifetimes1, _, _)) :: ( _, ( 
MlyValue.ntVOID maybe_ques1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_ques1 = maybe_ques1 ()
 val  maybe_for_lifetimes1 = maybe_for_lifetimes1 ()
 val  type_path1 = type_path1 ()
 in ()
end; ()))
 in ( LrTable.NT 74, ( result, LPARENT1left, type_path1right), rest671
)
end
|  ( 166, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
IDENT1 = IDENT1 ()
 in ()
end; ()))
 in ( LrTable.NT 76, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 167, ( ( _, ( MlyValue.ntVOID for_lifetimes1, for_lifetimes1left,
 for_lifetimes1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  for_lifetimes1 = for_lifetimes1 ()
 in ()
end; ()))
 in ( LrTable.NT 77, ( result, for_lifetimes1left, for_lifetimes1right
), rest671)
end
|  ( 168, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 77, ( result, defaultPos, defaultPos), rest671)
end
|  ( 169, ( ( _, ( MlyValue.IDENT IDENT1, IDENT1left, IDENT1right)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
IDENT1 = IDENT1 ()
 in ()
end; ()))
 in ( LrTable.NT 75, ( result, IDENT1left, IDENT1right), rest671)
end
|  ( 170, ( ( _, ( _, _, SELFVALUE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_mut1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_and_or_lifetime1, 
maybe_and_or_lifetime1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  maybe_and_or_lifetime1 = 
maybe_and_or_lifetime1 ()
 val  maybe_mut1 = maybe_mut1 ()
 in ()
end; ()))
 in ( LrTable.NT 91, ( result, maybe_and_or_lifetime1left, 
SELFVALUE1right), rest671)
end
|  ( 171, ( ( _, ( _, _, SELFVALUE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_mut1, maybe_mut1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  maybe_mut1 = maybe_mut1 ()
 in ()
end; ()))
 in ( LrTable.NT 91, ( result, maybe_mut1left, SELFVALUE1right), 
rest671)
end
|  ( 172, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: _
 :: ( _, ( MlyValue.ntVOID maybe_mut1, maybe_mut1left, _)) :: rest671)
) => let val  result = MlyValue.ntVOID (fn _ => ( let val  maybe_mut1
 = maybe_mut1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 91, ( result, maybe_mut1left, types1right), rest671)

end
|  ( 173, ( ( _, ( _, AND1left, AND1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 92, ( result, AND1left, AND1right), rest671)
end
|  ( 174, ( ( _, ( MlyValue.ntVOID lifetime1, _, lifetime1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  lifetime1 = lifetime1 ()
 in ()
end; ()))
 in ( LrTable.NT 92, ( result, AND1left, lifetime1right), rest671)
end
|  ( 175, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
inherent_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs 
inner_attrs1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID types1, _, _))
 :: ( _, ( MlyValue.ntVOID maybe_generics1, _, _)) :: ( _, ( _, 
IMPL1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _
 => ( let val  maybe_generics1 = maybe_generics1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  inherent_impl_items1 = inherent_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 94, ( result, IMPL1left, RBRACE1right), rest671)
end
|  ( 176, ( ( _, ( MlyValue.ntVOID inherent_impl_items1, _, 
inherent_impl_items1right)) :: ( _, ( MlyValue.ntVOID 
inherent_impl_item1, inherent_impl_item1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  inherent_impl_item1
 = inherent_impl_item1 ()
 val  inherent_impl_items1 = inherent_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 96, ( result, inherent_impl_item1left, 
inherent_impl_items1right), rest671)
end
|  ( 177, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 96, ( result, defaultPos, defaultPos), rest671)
end
|  ( 178, ( ( _, ( MlyValue.ntVOID marco_invocation_semi1, _, 
marco_invocation_semi1right)) :: ( _, ( MlyValue.outer_attrs 
outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  marco_invocation_semi1 = marco_invocation_semi1 ()
 in ()
end; ()))
 in ( LrTable.NT 98, ( result, outer_attrs1left, 
marco_invocation_semi1right), rest671)
end
|  ( 179, ( ( _, ( MlyValue.ntVOID constant_item1, _, 
constant_item1right)) :: ( _, ( MlyValue.ntVOID maybe_visibility1, _,
 _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)
) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  outer_attrs1 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  constant_item1 = constant_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 98, ( result, outer_attrs1left, constant_item1right),
 rest671)
end
|  ( 180, ( ( _, ( MlyValue.ntVOID function1, _, function1right)) :: (
 _, ( MlyValue.ntVOID maybe_visibility1, _, _)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  function1 = function1 ()
 in ()
end; ()))
 in ( LrTable.NT 98, ( result, outer_attrs1left, function1right), 
rest671)
end
|  ( 181, ( ( _, ( MlyValue.ntVOID method1, _, method1right)) :: ( _, 
( MlyValue.ntVOID maybe_visibility1, _, _)) :: ( _, ( 
MlyValue.outer_attrs outer_attrs1, outer_attrs1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  outer_attrs1
 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  method1 = method1 ()
 in ()
end; ()))
 in ( LrTable.NT 98, ( result, outer_attrs1left, method1right), 
rest671)
end
|  ( 182, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
trait_impl_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: _ :: ( _, ( MlyValue.ntVOID maybe_where_clause1, _, _)) :: 
( _, ( MlyValue.ntVOID types1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
type_path1, _, _)) :: ( _, ( MlyValue.ntVOID maybe_not1, _, _)) :: ( _
, ( MlyValue.ntVOID maybe_generics1, _, _)) :: _ :: ( _, ( 
MlyValue.ntVOID maybe_unsafe1, maybe_unsafe1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  maybe_unsafe1 =
 maybe_unsafe1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_not1 = maybe_not1 ()
 val  type_path1 = type_path1 ()
 val  types1 = types1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 95, ( result, maybe_unsafe1left, RBRACE1right), 
rest671)
end
|  ( 183, ( ( _, ( MlyValue.ntVOID trait_impl_items1, _, 
trait_impl_items1right)) :: ( _, ( MlyValue.ntVOID trait_impl_item1, 
trait_impl_item1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  trait_impl_item1 = 
trait_impl_item1 ()
 val  trait_impl_items1 = trait_impl_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 99, ( result, trait_impl_item1left, 
trait_impl_items1right), rest671)
end
|  ( 184, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 99, ( result, defaultPos, defaultPos), rest671)
end
|  ( 185, ( ( _, ( MlyValue.ntVOID marco_invocation_semi1, _, 
marco_invocation_semi1right)) :: ( _, ( MlyValue.outer_attrs 
outer_attrs1, outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  marco_invocation_semi1 = marco_invocation_semi1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, outer_attrs1left, 
marco_invocation_semi1right), rest671)
end
|  ( 186, ( ( _, ( MlyValue.ntVOID type_alias1, _, type_alias1right))
 :: ( _, ( MlyValue.ntVOID maybe_visibility1, maybe_visibility1left, _
)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  maybe_visibility1 = maybe_visibility1 ()
 val  type_alias1 = type_alias1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, maybe_visibility1left, 
type_alias1right), rest671)
end
|  ( 187, ( ( _, ( MlyValue.ntVOID constant_item1, constant_item1left,
 constant_item1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  constant_item1 = constant_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, constant_item1left, 
constant_item1right), rest671)
end
|  ( 188, ( ( _, ( MlyValue.ntVOID function1, function1left, 
function1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  function1 = function1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, function1left, function1right), 
rest671)
end
|  ( 189, ( ( _, ( MlyValue.ntVOID method1, method1left, method1right)
) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  method1 = method1 ()
 in ()
end; ()))
 in ( LrTable.NT 101, ( result, method1left, method1right), rest671)

end
|  ( 190, ( ( _, ( MlyValue.ntVOID block_expression1, _, 
block_expression1right)) :: ( _, ( MlyValue.ntVOID maybe_where_clause1
, _, _)) :: ( _, ( MlyValue.ntVOID maybe_func_return_type1, _, _)) ::
 _ :: ( _, ( MlyValue.ntVOID maybe_comma1, _, _)) :: ( _, ( 
MlyValue.ntVOID func_parameters_expansion1, _, _)) :: ( _, ( 
MlyValue.ntVOID self_param1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: _
 :: ( _, ( MlyValue.ntVOID func_qualifier1, func_qualifier1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 func_qualifier1 = func_qualifier1 ()
 val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  self_param1 = self_param1 ()
 val  func_parameters_expansion1 = func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 val  block_expression1 = block_expression1 ()
 in ()
end; ()))
 in ( LrTable.NT 102, ( result, func_qualifier1left, 
block_expression1right), rest671)
end
|  ( 191, ( ( _, ( MlyValue.simple_path simple_path1, simple_path1left
, simple_path1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  simple_path1 = simple_path1 ()
 in ()
end; ()))
 in ( LrTable.NT 84, ( result, simple_path1left, simple_path1right), 
rest671)
end
|  ( 192, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
external_items1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1, _
, _)) :: _ :: ( _, ( MlyValue.ntVOID maybe_abi1, _, _)) :: ( _, ( _, 
EXTERN1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  maybe_abi1 = maybe_abi1 ()
 val  inner_attrs1 = inner_attrs1 ()
 val  external_items1 = external_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 103, ( result, EXTERN1left, RBRACE1right), rest671)

end
|  ( 193, ( ( _, ( MlyValue.ntVOID external_items1, _, 
external_items1right)) :: ( _, ( MlyValue.ntVOID external_item1, 
external_item1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  external_item1 = external_item1 ()
 val  external_items1 = external_items1 ()
 in ()
end; ()))
 in ( LrTable.NT 104, ( result, external_item1left, 
external_items1right), rest671)
end
|  ( 194, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 104, ( result, defaultPos, defaultPos), rest671)
end
|  ( 195, ( ( _, ( MlyValue.ntVOID external_static_item1, _, 
external_static_item1right)) :: ( _, ( MlyValue.ntVOID 
maybe_visibility1, _, _)) :: ( _, ( MlyValue.outer_attrs outer_attrs1,
 outer_attrs1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  outer_attrs1 = outer_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  external_static_item1 = external_static_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 105, ( result, outer_attrs1left, 
external_static_item1right), rest671)
end
|  ( 196, ( ( _, ( MlyValue.ntVOID external_func_item1, _, 
external_func_item1right)) :: ( _, ( MlyValue.ntVOID maybe_visibility1
, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1, inner_attrs1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  inner_attrs1 = inner_attrs1 ()
 val  maybe_visibility1 = maybe_visibility1 ()
 val  external_func_item1 = external_func_item1 ()
 in ()
end; ()))
 in ( LrTable.NT 105, ( result, inner_attrs1left, 
external_func_item1right), rest671)
end
|  ( 197, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID types1
, _, _)) :: _ :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _, ( 
MlyValue.ntVOID maybe_mut1, _, _)) :: ( _, ( _, STATIC1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
maybe_mut1 = maybe_mut1 ()
 val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 106, ( result, STATIC1left, SEMI1right), rest671)
end
|  ( 198, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_named_func_parameters1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT IDENT1, _, _)) :: ( _
, ( _, FN1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  maybe_named_func_parameters1 = maybe_named_func_parameters1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 107, ( result, FN1left, SEMI1right), rest671)
end
|  ( 199, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.ntVOID 
maybe_where_clause1, _, _)) :: ( _, ( MlyValue.ntVOID 
maybe_func_return_type1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
named_func_parameters_with_variadics1, _, _)) :: _ :: ( _, ( 
MlyValue.ntVOID maybe_generics1, _, _)) :: ( _, ( MlyValue.IDENT 
IDENT1, _, _)) :: ( _, ( _, FN1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  maybe_generics1 = maybe_generics1 ()
 val  named_func_parameters_with_variadics1 = 
named_func_parameters_with_variadics1 ()
 val  maybe_func_return_type1 = maybe_func_return_type1 ()
 val  maybe_where_clause1 = maybe_where_clause1 ()
 in ()
end; ()))
 in ( LrTable.NT 107, ( result, FN1left, SEMI1right), rest671)
end
|  ( 200, ( ( _, ( MlyValue.ntVOID named_func_parameters1, 
named_func_parameters1left, named_func_parameters1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  
named_func_parameters1 = named_func_parameters1 ()
 in ()
end; ()))
 in ( LrTable.NT 108, ( result, named_func_parameters1left, 
named_func_parameters1right), rest671)
end
|  ( 201, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 108, ( result, defaultPos, defaultPos), rest671)
end
|  ( 202, ( ( _, ( MlyValue.ntVOID maybe_comma1, _, maybe_comma1right)
) :: ( _, ( MlyValue.ntVOID named_func_parameters_expansion1, _, _))
 :: ( _, ( MlyValue.ntVOID named_func_param1, named_func_param1left, _
)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  named_func_param1 = named_func_param1 ()
 val  named_func_parameters_expansion1 = 
named_func_parameters_expansion1 ()
 val  maybe_comma1 = maybe_comma1 ()
 in ()
end; ()))
 in ( LrTable.NT 109, ( result, named_func_param1left, 
maybe_comma1right), rest671)
end
|  ( 203, ( ( _, ( MlyValue.ntVOID named_func_param1, _, 
named_func_param1right)) :: _ :: ( _, ( MlyValue.ntVOID 
named_func_parameters_expansion1, named_func_parameters_expansion1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  named_func_parameters_expansion1 = 
named_func_parameters_expansion1 ()
 val  named_func_param1 = named_func_param1 ()
 in ()
end; ()))
 in ( LrTable.NT 110, ( result, named_func_parameters_expansion1left, 
named_func_param1right), rest671)
end
|  ( 204, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 110, ( result, defaultPos, defaultPos), rest671)
end
|  ( 205, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: (
 _, ( MlyValue.IDENT IDENT1, IDENT1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  IDENT1 = IDENT1 ()
 val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 111, ( result, IDENT1left, types1right), rest671)
end
|  ( 206, ( ( _, ( MlyValue.ntVOID types1, _, types1right)) :: _ :: (
 _, ( _, UNDERSCORE1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  types1 = types1 ()
 in ()
end; ()))
 in ( LrTable.NT 111, ( result, UNDERSCORE1left, types1right), rest671
)
end
|  ( 207, ( ( _, ( _, _, DOTDOTDOT1right)) :: _ :: ( _, ( 
MlyValue.ntVOID named_func_param1, _, _)) :: ( _, ( MlyValue.ntVOID 
named_func_parameters_expansion1, named_func_parameters_expansion1left
, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  named_func_parameters_expansion1 = 
named_func_parameters_expansion1 ()
 val  named_func_param1 = named_func_param1 ()
 in ()
end; ()))
 in ( LrTable.NT 112, ( result, named_func_parameters_expansion1left, 
DOTDOTDOT1right), rest671)
end
|  ( 208, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
maybe_statements1, _, _)) :: ( _, ( MlyValue.inner_attrs inner_attrs1,
 _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let val  result
 = MlyValue.ntVOID (fn _ => ( let val  inner_attrs1 = inner_attrs1 ()
 val  maybe_statements1 = maybe_statements1 ()
 in ()
end; ()))
 in ( LrTable.NT 46, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 209, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ()
)
 in ( LrTable.NT 47, ( result, defaultPos, defaultPos), rest671)
end
|  ( 210, ( ( _, ( MlyValue.INTEGER_LIT INTEGER_LIT1, INTEGER_LIT1left
, INTEGER_LIT1right)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  INTEGER_LIT1 = INTEGER_LIT1 ()
 in ()
end; ()))
 in ( LrTable.NT 48, ( result, INTEGER_LIT1left, INTEGER_LIT1right), 
rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.crate x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Rust_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun CONST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun CONTINUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun CRATE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun ENUM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun EXTERN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun FALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun LOOP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun MATCH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun MOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun MOVE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun MUT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun PUB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun REF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun RETURN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun SELFVALUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun SELFTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun STATIC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun SUPER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun TRAIT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun TRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun UNSAFE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun USE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun WHERE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun DYN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun ABSTRACT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun BECOME (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun BOX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun FINAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun MACRO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERRIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun PRIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPEOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun UNSIZED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun VIRTUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun YIELD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun ASYNC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun AWAIT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun TRY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun UNION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun STATICLIFETIME (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun IDENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.IDENT (fn () => i),p1,p2))
fun CHAR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.CHAR_LIT (fn () => i),p1,p2))
fun STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.STR_LIT (fn () => i),p1,p2))
fun RAW_STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.RAW_STR_LIT (fn () => i),p1,p2))
fun BYTE_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.BYTE_LIT (fn () => i),p1,p2))
fun BYTE_STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.BYTE_STR_LIT (fn () => i),p1,p2))
fun RAW_BYTE_STR_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 60
,(ParserData.MlyValue.RAW_BYTE_STR_LIT (fn () => i),p1,p2))
fun INTEGER_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.INTEGER_LIT (fn () => i),p1,p2))
fun TUPLE_INDEX (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.TUPLE_INDEX (fn () => i),p1,p2))
fun FLOAT_LIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.FLOAT_LIT (fn () => i),p1,p2))
fun LIFETIME (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.LIFETIME (fn () => i),p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun STAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun SLASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun PERCENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun CARET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun NOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDAND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun OROR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun SHL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
fun SHR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUSEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUSEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun STAREQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun SLASHEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun PERCENTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun CARETEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 84,(
ParserData.MlyValue.VOID,p1,p2))
fun OREQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 85,(
ParserData.MlyValue.VOID,p1,p2))
fun SHLEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 86,(
ParserData.MlyValue.VOID,p1,p2))
fun SHREQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 87,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 88,(
ParserData.MlyValue.VOID,p1,p2))
fun EQEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 89,(
ParserData.MlyValue.VOID,p1,p2))
fun NE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 90,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 91,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 92,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 93,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 94,(
ParserData.MlyValue.VOID,p1,p2))
fun AT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 95,(
ParserData.MlyValue.VOID,p1,p2))
fun UNDERSCORE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 96,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 97,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 98,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 99,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 100,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 101,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 102,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 103,(
ParserData.MlyValue.VOID,p1,p2))
fun PATHSEP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 104,(
ParserData.MlyValue.VOID,p1,p2))
fun RARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 105,(
ParserData.MlyValue.VOID,p1,p2))
fun FATARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 106,(
ParserData.MlyValue.VOID,p1,p2))
fun POUND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 107,(
ParserData.MlyValue.VOID,p1,p2))
fun DOLLAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 108,(
ParserData.MlyValue.VOID,p1,p2))
fun QUESTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 109,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 110,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 111,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 112,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 113,(
ParserData.MlyValue.VOID,p1,p2))
fun LPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 114,(
ParserData.MlyValue.VOID,p1,p2))
fun RPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 115,(
ParserData.MlyValue.VOID,p1,p2))
fun INNER_DOC_COMMENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 
116,(ParserData.MlyValue.INNER_DOC_COMMENT (fn () => i),p1,p2))
fun OUTER_DOC_COMMENT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 
117,(ParserData.MlyValue.OUTER_DOC_COMMENT (fn () => i),p1,p2))
fun SHEBANG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 118,(
ParserData.MlyValue.VOID,p1,p2))
fun SHEBANG_LINE (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 119,(
ParserData.MlyValue.SHEBANG_LINE (fn () => i),p1,p2))
fun LOWER_THAN_LPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 120
,(ParserData.MlyValue.VOID,p1,p2))
fun LOWER_THAN_ABI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 121,(
ParserData.MlyValue.VOID,p1,p2))
fun ABI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 122,(
ParserData.MlyValue.VOID,p1,p2))
end
end
