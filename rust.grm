(* rust.yacc *)
open DataTypes
fun yaccLog(msg) = ErrorMsg.yaccLog (msg)

%%
%term EOF
    | AS | BREAK | CONST | CONTINUE | CRATE | ELSE | ENUM | EXTERN     
        | FALSE | FN | FOR | IF | IMPL | IN | LET | LOOP | MATCH | MOD | MOVE
        | MUT | PUB | REF | RETURN | SELFVALUE | SELFTYPE | STATIC | STRUCT 
        | SUPER | TRAIT | TRUE | TYPE | UNSAFE | USE | WHERE | WHILE | DYN
    | ABSTRACT | BECOME | BOX | DO | FINAL | MACRO | OVERRIDE
        | PRIV | TYPEOF | UNSIZED | VIRTUAL | YIELD
        | ASYNC | AWAIT | TRY
    | UNION | STATICLIFETIME
    | IDENT of string
    | CHAR_LIT of int 
        | STR_LIT of string | RAW_STR_LIT of string
        | BYTE_LIT of int | BYTE_STR_LIT of string | RAW_BYTE_STR_LIT of string
        | INTEGER_LIT of LargeInt.int | TUPLE_INDEX of int 
        | FLOAT_LIT of real
    | LIFETIME_OR_LABEL of string | LIFETIME_TOKEN of string
    | PLUS | MINUS | STAR | SLASH | PERCENT | CARET
        | NOT | AND | OR | ANDAND | OROR | SHL | SHR
        | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ | CARETEQ | ANDEQ | OREQ
        | SHLEQ | SHREQ | EQ | EQEQ
        | NE | GT | LT | GE | LE
        | AT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ
        | COMMA | SEMI | COLON | PATHSEP | RARROW | FATARROW | POUND | DOLLAR | QUESTION
        | LBRACE | RBRACE | LBRACKET | RBRACKET | LPARENT | RPARENT
        | INNER_DOC_COMMENT of string | OUTER_DOC_COMMENT of string
        | SHEBANG | SHEBANG_LINE of string
        | LOWER_THAN_LPARENT | LOWER_THAN_ABI | ABI
%nonterm crate of Crate | inner_attrs of InnerAttribute list | items of Item list
        | outer_attrs of OuterAttribute list
        | inner_attr of InnerAttribute | outer_attr of OuterAttribute | meta_item of MetaItem 
        | meta_seq of MetaSeq | meta_seq_expansion of MetaItemInner list | meta_item_inner of MetaItemInner 
        | lit_exp of LiteralExpression
        | path | simple_path of SimplePath | simple_path_segment of string | simple_path_expansion of string list
        | exp | program
        | item of Item | vis_item of VisItem | macro_item of MarcoItem
        | visibility of Visibility | item_type of ItemType
        | use_tree of UseTree
        | patterns | types
        | generics | where_clause | maybe_generics | maybe_where_clause | maybe_visibility
        | generic_params | lifetime_params | lifetime_param | lifetime_params_expansion 
        | type_params | type_params_expansion | type_param | maybe_type_param
        | maybe_lifetime_param | maybe_colon_lifetime_bounds | lifetime_param_tail | maybe_colon_type_bounds
        | maybe_comma | maybe_plus | maybe_ques | maybe_not | maybe_outer_attr
        | function | func_qualifier | maybe_const | maybe_unsafe | abi | maybe_abi | maybe_path_sep
        | func_parameters | maybe_func_parameters | func_param | func_parameters_expansion
        | func_return_type | maybe_func_return_type
        | block_expression | maybe_statements | expression
        | struct_struct | tuple_struct | struct_fields | struct_field | tuple_fields | tuple_field 
        | maybe_struct_fields | maybe_tuple_fields | struct_fields_expansion | tuple_fields_expansion
        | enum_items | maybe_enum_items | enum_items_expansion | enum_item | enum_item_tuple | enum_item_struct 
        | enum_item_discriminant
        | type_alias
        | constant_item
        | maybe_trait_super | maybe_type_param_bounds | type_param_bounds | type_param_bounds_expansion | type_param_bound
        | lifetime | lifetime_bounds | lifetime_bounds_expansion | maybe_lifetime
        | trait_bound | for_lifetimes | type_path | maybe_for_lifetimes
        | trait_items | trait_item 
        | trait_func | trait_method | trait_const | trait_type | marco_invocation_semi
        | trait_func_decl | trait_method_decl | trait_func_parameters 
        | trait_func_param | maybe_trait_func_parameters | trait_func_parameters_expansion
        | self_param | maybe_and_or_lifetime | maybe_mut
        | inherent_impl | trait_impl | inherent_impl_items | inherent_impl_items_expansion | inherent_impl_item
        | trait_impl_items | trait_impl_items_expansion | trait_impl_item
        | method
        | extern_block | external_items | external_item | external_static_item | external_func_item | maybe_named_func_parameters
        | named_func_parameters | named_func_parameters_expansion | named_func_param | named_func_parameters_with_variadics 
%pos int
%eop EOF
%noshift EOF
%name Rust
%keyword AS BREAK CONST CONTINUE CRATE ELSE ENUM EXTERN
        FALSE FN FOR IF IMPL IN LET LOOP MATCH MOD MOVE
        MUT PUB REF RETURN SELFVALUE SELFTYPE STATIC STRUCT
        SUPER TRAIT TRUE TYPE UNSAFE USE WHERE WHILE
        ABSTRACT BECOME BOX DO FINAL MACRO OVERRIDE
        PRIV TYPEOF UNSIZED VIRTUAL YIELD

%nonassoc LOWER_THAN_LPARENT
%nonassoc LPARENT
%nonassoc LOWER_THAN_ABI
%nonassoc ABI

%verbose

%%
crate: SHEBANG_LINE inner_attrs items                          (Crate (Shebang (SOME SHEBANG_LINE), inner_attrs, items))
        | inner_attrs items                                    (Crate (Shebang (NONE), inner_attrs, items))

items: item items                                              (item::items)
        |                                                      ([])

item: outer_attrs vis_item                                      (VisItemType (outer_attrs, vis_item))
        (* | macro_item                                            (MarcoItemType (macro_item)) *)

vis_item: item_type                                             (VisItem(DefaultVis, item_type))
        | visibility item_type                                  (VisItem(visibility, item_type))

maybe_visibility: visibility                                    ()
                    |                                           ()

visibility: PUB                                                 (PubVis)
        | PUB LPARENT CARET RPARENT                             (CrateVis)
        | PUB LPARENT SELFVALUE RPARENT                         (SelfVis)
        | PUB LPARENT SUPER RPARENT                             (SuperVis)
        | PUB LPARENT IN simple_path RPARENT                    (InVis (simple_path))

use_tree: simple_path                                           (UseSingle ([simple_path]))
        | simple_path AS IDENT                                  (UseAlias (simple_path, IDENT))
        (* Some recursion use tree need to add *)

macro_item:                                                     (MarcoItem)

inner_attrs: inner_attrs inner_attr                             (yaccLog("inner_attrs"); inner_attr::inner_attrs)
            |                                                   ([])
outer_attrs: outer_attrs outer_attr                             (yaccLog("outer_attrs"); outer_attr::outer_attrs)
            |                                                   ([])

maybe_outer_attr: outer_attr                                    ()
                |                                               ()
inner_attr: SHEBANG LBRACKET meta_item RBRACKET                 (yaccLog("inner_attr"); InnerAttribute(meta_item))
outer_attr: POUND LBRACKET meta_item RBRACKET                   (OuterAttribute meta_item)

meta_item: simple_path EQ lit_exp                               (AttrKVPair(simple_path, lit_exp))
        | simple_path LPARENT meta_seq RPARENT                  (AttrSubs(simple_path, SOME(meta_seq)))
        | simple_path LPARENT RPARENT                           (AttrSubs(simple_path, NONE))
        | simple_path %prec LOWER_THAN_LPARENT                  (AttrName simple_path)

meta_seq: meta_item_inner meta_seq_expansion COMMA              (MetaSeq(meta_item_inner::meta_seq_expansion))
            | meta_item_inner meta_seq_expansion                (MetaSeq(meta_item_inner::meta_seq_expansion))
            
meta_seq_expansion: LPARENT COMMA meta_item_inner RPARENT
                    meta_seq_expansion                          (meta_item_inner::meta_seq_expansion)
                    |                                           ([])
meta_item_inner: meta_item                                      (MetaItem(meta_item))
                | lit_exp                                       (MetaLit(lit_exp))

lit_exp:STR_LIT                                                 (yaccLog("lit_exp "^STR_LIT); LiteralExpression(STR_LIT))

patterns: IDENT                                                 ()
types: IDENT                                                    ()

simple_path: maybe_path_sep
                simple_path_segment simple_path_expansion       (SimplePath([simple_path_segment]))(*::simple_path_expansion))*)
simple_path_expansion:  simple_path_expansion PATHSEP simple_path_segment 
                                           (simple_path_segment::simple_path_expansion)
                    |                                           ([])
simple_path_segment: IDENT                                      (IDENT)
                    | SUPER                                     ("super")
                    | SELFVALUE                                 ("self")
                    | CARET                                     ("crate")
                    | DOLLAR CARET                              ("$crate")

maybe_path_sep: PATHSEP                                         ()
                |                                               ()

maybe_where_clause: where_clause                                ()
                    |                                           ()
where_clause: WHERE                                             ()
maybe_generics: generics                                        ()
                |                                               ()

generics: LT generic_params GT                                  ()
generic_params: lifetime_params                                 ()
                | lifetime_params_expansion type_params         ()
lifetime_params: lifetime_params_expansion 
                maybe_lifetime_param                            ()
maybe_lifetime_param: lifetime_param                            ()
                    |                                           ()
lifetime_params_expansion: lifetime_params_expansion
                            lifetime_param COMMA                ()
                        |                                       ()
lifetime_param: maybe_outer_attr
            LIFETIME_OR_LABEL maybe_colon_lifetime_bounds       ()
maybe_colon_lifetime_bounds: COLON lifetime_bounds              ()
                        |                                       ()
type_params: type_params_expansion maybe_type_param             ()
type_params_expansion: type_params_expansion 
                    type_param COMMA                            ()
                    |                                           ()
maybe_type_param: type_param                                    ()
                |                                               ()
type_param: maybe_outer_attr IDENT maybe_colon_type_bounds      ()
            | maybe_outer_attr IDENT maybe_colon_type_bounds
                EQ types                                        ()
maybe_colon_type_bounds: COLON                                  ()
                        | COLON type_param_bounds               ()
                        |                                       ()

maybe_comma: COMMA                                              ()
            |                                                   ()
maybe_mut: MUT                                                  ()
            |                                                   ()
maybe_plus: PLUS                                                ()
            |                                                   ()
maybe_ques: QUESTION                                            ()
            |                                                   ()
maybe_const: CONST                                              ()
            |                                                   ()
maybe_unsafe: UNSAFE                                            ()
            |                                                   ()
maybe_not: NOT                                                  ()
            |                                                   ()

item_type: IDENT                                                (Function)
        | MOD IDENT SEMI                                        (Module (IDENT, NONE))
        | MOD IDENT LBRACE inner_attrs items RBRACE             (Module (IDENT, SOME(ModuleBody(inner_attrs, items))))
        | EXTERN CARET IDENT SEMI                               (yaccLog("extern crate "^IDENT); ExternCrate (IDENT, NONE))
        | EXTERN CARET IDENT AS IDENT SEMI                      (yaccLog("extern crate "^IDENT1^" as"^IDENT2); ExternCrate (IDENT1, SOME(IDENT2)))
        | USE use_tree SEMI                                     (yaccLog("use_tree"); UseDeclaration(use_tree))
        | function                                              (yaccLog("function"); Function)
        | type_alias                                            (yaccLog("type alias"); TypeAlias)
        | struct_struct                                         (yaccLog("struct struct"); Struct)
        | tuple_struct                                          (yaccLog("tuple struct"); Struct)
        | ENUM IDENT maybe_generics maybe_where_clause
            LBRACE maybe_enum_items RBRACE                      (yaccLog("enumeration"); Enumeration)
        | UNION IDENT maybe_generics maybe_where_clause 
            LBRACE struct_fields RBRACE                         (yaccLog("Union"); Union)
        | constant_item                                         (yaccLog("ConstantItem"); ConstantItem)
        | STATIC MUT IDENT COLON types EQ expression SEMI       (yaccLog("StaticItem"); StaticItem)
        | STATIC IDENT COLON types EQ expression SEMI           (yaccLog("StaticItem"); StaticItem)
        | maybe_unsafe TRAIT IDENT maybe_generics
            maybe_trait_super maybe_where_clause
            LBRACE trait_items RBRACE                           (yaccLog("Trait"); Trait)
        | inherent_impl                                         (yaccLog("inherent_impl"); Implementation)
        | trait_impl                                            (yaccLog("trait_impl"); Implementation)
        | extern_block                                          (yaccLog("extern_block"); ExternBlock)

type_alias: TYPE IDENT maybe_generics maybe_where_clause
            EQ types SEMI                                       ()        
constant_item: CONST IDENT COLON types EQ expression SEMI       ()

function: func_qualifier FN IDENT maybe_generics
            LPARENT maybe_func_parameters RPARENT
            maybe_func_return_type
            maybe_where_clause
            block_expression                                    ()      

func_qualifier: (* 
                    The problem is lalr reads 1 token, there are two productions 
                    which can produce epsilon, the parser can not 
                    distinct function and trait.
                *)
                (*maybe_const*) maybe_unsafe                         ()
                (*| maybe_const maybe_unsafe EXTERN 
                %prec LOWER_THAN_ABI                            ()*)
                (*| maybe_const maybe_unsafe EXTERN abi
                %prec ABI                                       ()*)

maybe_abi: abi                                                  ()
        |                                                       ()

abi: STR_LIT                                                    ()
    | RAW_BYTE_STR_LIT                                          ()

maybe_func_parameters: func_parameters                            ()
                    |                                              ()

func_parameters: func_param func_parameters_expansion maybe_comma  ()

func_parameters_expansion: 
                        (* This is a left recursion to solve COMMA conflicts *)
                        func_parameters_expansion 
                        COMMA func_param                         ()
                        |                                       ()

func_param: patterns COLON types                                 ()

maybe_func_return_type: func_return_type                          ()
                        |                                       ()
func_return_type: RARROW types                                   ()

struct_struct: STRUCT IDENT maybe_generics maybe_where_clause
                LBRACE maybe_struct_fields RBRACE               ()
            | STRUCT IDENT maybe_generics maybe_where_clause
                SEMI                                            ()

maybe_struct_fields: struct_fields                              ()
                    |                                           ()
struct_fields: struct_field struct_fields_expansion maybe_comma ()

struct_fields_expansion:
                        (* This is a left recursion to solve COMMA conflicts *)
                        struct_fields_expansion
                        COMMA struct_field                      ()
                        |                                       ()
struct_field: outer_attrs visibility IDENT COLON types          ()
                | outer_attrs IDENT COLON types                 ()

tuple_struct: STRUCT IDENT maybe_generics 
                LPARENT maybe_tuple_fields 
                RPARENT maybe_where_clause SEMI                 ()
maybe_tuple_fields: tuple_fields                                ()
                    |                                           ()
tuple_fields: tuple_field tuple_fields_expansion maybe_comma    ()
tuple_fields_expansion: 
                        (* This is a left recursion to solve COMMA conflicts *)
                        tuple_fields_expansion 
                        COMMA tuple_field                       ()
                        |                                       ()
tuple_field: outer_attrs visibility types                       ()
            | outer_attrs types                                 ()

maybe_enum_items: enum_items                                    ()
                |                                               ()
enum_items: enum_item enum_items_expansion maybe_comma          (yaccLog("enum_items"))
enum_items_expansion: 
                    (* This is a left recursion to solve COMMA conflicts *)
                    enum_items_expansion COMMA enum_item        ()
                    |                                           ()
enum_item: outer_attrs IDENT enum_item_tuple                    ()
            | outer_attrs IDENT enum_item_struct                ()
            | outer_attrs IDENT enum_item_discriminant          ()
            | outer_attrs IDENT                                 (yaccLog("enum_item: branch 4"))

enum_item_tuple: LPARENT maybe_tuple_fields RPARENT             ()
enum_item_struct: LBRACE maybe_struct_fields RBRACE             ()
enum_item_discriminant: EQ expression                           ()

trait_items: trait_item trait_items                             ()
            |                                                   ()
trait_item: outer_attrs trait_func                              ()
            | outer_attrs trait_method                          ()
            | outer_attrs trait_const                           ()
            | outer_attrs trait_type                            ()
            | marco_invocation_semi                             ()

trait_func: trait_func_decl SEMI                                ()
            | trait_func_decl block_expression                  ()
trait_method: trait_method_decl SEMI                            ()
            | block_expression                                  ()
trait_func_decl: func_qualifier FN IDENT maybe_generics
                    LPARENT maybe_trait_func_parameters 
                    RPARENT maybe_func_return_type where_clause ()
maybe_trait_func_parameters: trait_func_parameters              ()
                                |                               ()
trait_method_decl: func_qualifier FN IDENT maybe_generics
                    LPARENT self_param 
                    trait_func_parameters_expansion maybe_comma
                    RPARENT maybe_func_return_type
                    maybe_where_clause                          ()
trait_func_parameters: trait_func_param 
                trait_func_parameters_expansion maybe_comma     ()
trait_func_parameters_expansion: 
    trait_func_parameters_expansion COMMA trait_func_param      ()
                            |                                   ()
trait_func_param:  patterns COLON types                         ()
                | types                                         ()
trait_const: CONST IDENT COLON types SEMI                       ()
            | CONST IDENT COLON types EQ expression SEMI        ()
trait_type: TYPE IDENT maybe_trait_super SEMI                   ()
maybe_trait_super: COLON maybe_type_param_bounds                ()
                    |                                           ()
maybe_type_param_bounds: type_param_bounds                      ()
                        |                                       ()
type_param_bounds: type_param_bound type_param_bounds_expansion
                    maybe_plus                                  ()
type_param_bounds_expansion: type_param_bounds_expansion
                            PLUS type_param_bound               ()
                        |                                       ()
type_param_bound: lifetime                                      ()
                | trait_bound                                   ()

lifetime_bounds: lifetime_bounds_expansion maybe_lifetime       ()
lifetime_bounds_expansion: lifetime_bounds_expansion
                    lifetime PLUS                               ()
maybe_lifetime: lifetime                                        ()
                |                                               ()

lifetime: (* here are some questions *)
          LIFETIME_OR_LABEL                                     ()
        | STATICLIFETIME                                        ()
trait_bound: maybe_ques maybe_for_lifetimes type_path           ()
            | LPARENT maybe_ques maybe_for_lifetimes type_path  ()
type_path: IDENT (* need to be completed *)                     ()
maybe_for_lifetimes: for_lifetimes                              ()
                    |                                           ()
for_lifetimes: (* There is no definition in reference, 
            and following production comes from rust repository *)                
                FOR LT lifetime GT                              ()
self_param: maybe_and_or_lifetime maybe_mut SELFVALUE           ()
            | maybe_mut SELFVALUE                               ()
            | maybe_mut SELFVALUE COLON types                   ()
maybe_and_or_lifetime: AND                                      ()
                    | AND lifetime                              ()

inherent_impl: IMPL maybe_generics types maybe_where_clause
                LBRACE inner_attrs inherent_impl_items RBRACE   ()
inherent_impl_items: inherent_impl_item inherent_impl_items     ()
                    |                                           ()
inherent_impl_item: outer_attrs marco_invocation_semi           ()
                    | outer_attrs maybe_visibility 
                        constant_item                           ()
                    | outer_attrs maybe_visibility function     ()
                    | outer_attrs maybe_visibility method       ()
trait_impl: maybe_unsafe IMPL maybe_generics maybe_not type_path
            FOR types maybe_where_clause LBRACE
            inner_attrs trait_impl_items RBRACE                 ()
trait_impl_items: trait_impl_item trait_impl_items              ()
                |                                               ()
trait_impl_item: outer_attrs marco_invocation_semi              ()
                | maybe_visibility type_alias                   ()
                | constant_item                                 ()
                | function                                      ()
                | method                                        ()
method: func_qualifier FN IDENT maybe_generics LPARENT
        self_param func_parameters_expansion maybe_comma RPARENT
        maybe_func_return_type maybe_where_clause 
        block_expression                                        ()
marco_invocation_semi: simple_path (* need to be completed*)    ()

extern_block: EXTERN maybe_abi LBRACE inner_attrs
            external_items RBRACE                               ()
external_items: external_items external_item                    ()
            |                                                   ()
external_item: outer_attrs 
                maybe_visibility external_static_item           ()
            | outer_attrs
                maybe_visibility external_func_item             ()
external_static_item: STATIC maybe_mut IDENT COLON types SEMI   ()
external_func_item: FN IDENT maybe_generics LPARENT
                maybe_named_func_parameters RPARENT
                maybe_func_return_type maybe_where_clause
                SEMI                                            ()
            |   FN IDENT maybe_generics LPARENT
                named_func_parameters_with_variadics RPARENT
                maybe_func_return_type maybe_where_clause
                SEMI                                            ()

maybe_named_func_parameters: named_func_parameters              ()
                        |                                       ()
named_func_parameters: named_func_param 
                named_func_parameters_expansion maybe_comma     ()
named_func_parameters_expansion: 
    named_func_parameters_expansion COMMA named_func_param      ()
                    |                                           ()
named_func_param: IDENT COLON types                             ()
                 |UNDERSCORE COLON types                        ()
named_func_parameters_with_variadics:
                (* For convenient, this production is rewrote *)
                named_func_param named_func_parameters_expansion 
                COMMA DOTDOTDOT                                 ()
block_expression: LBRACE inner_attrs maybe_statements RBRACE    ()
maybe_statements:                                               ()
expression: INTEGER_LIT                                         ()