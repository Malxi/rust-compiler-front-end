(* rust.yacc *)
open DataTypes

fun yaccLog(msg) = ErrorMsg.yaccLog (msg)
fun error(pos, msg) = ErrorMsg.error pos

%%
%term EOF
    | AS | BREAK | CONST | CONTINUE | CRATE | ELSE | ENUM | EXTERN     
        | FALSE | FN | FOR | IF | IMPL | IN | LET | LOOP | MATCH | MOD | MOVE
        | MUT | PUB | REF | RETURN | SELFVALUE | SELFTYPE | STATIC | STRUCT 
        | SUPER | TRAIT | TRUE | TYPE | UNSAFE | USE | WHERE | WHILE | DYN
    | ABSTRACT | BECOME | BOX | DO | FINAL | MACRO | OVERRIDE
        | PRIV | TYPEOF | UNSIZED | VIRTUAL | YIELD
        | ASYNC | AWAIT | TRY
    | UNION | STATICLIFETIME
    | IDENT of string
    | CHAR_LIT of string 
        | STR_LIT of string | RAW_STR_LIT of string
        | BYTE_LIT of string | BYTE_STR_LIT of string | RAW_BYTE_STR_LIT of string
        | INTEGER_LIT of string | TUPLE_INDEX of string 
        | FLOAT_LIT of string
        | INTEGER_SUFFIX of string | FLOAT_SUFFIX of string
    | LIFETIME_OR_LABEL of string | LIFETIME_TOKEN of string
    | PLUS | MINUS | STAR | SLASH | PERCENT | CARET
        | NOT | AND | OR | ANDAND | OROR | SHL | SHR
        | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ | CARETEQ | ANDEQ | OREQ
        | SHLEQ | SHREQ | EQ | EQEQ
        | NE | GT | LT | GE | LE
        | AT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ
        | COMMA | SEMI | COLON | PATHSEP | RARROW | FATARROW | POUND | DOLLAR | QUESTION
        | LBRACE | RBRACE | LBRACKET | RBRACKET | LPARENT | RPARENT
        | INNER_DOC_COMMENT of string | OUTER_DOC_COMMENT of string
        | SHEBANG | SHEBANG_LINE of string
    | LOWER_THAN_LPARENT | LOWER_THAN_PATHSEP | LOWER_THAN_EXPR | LOWER_THAN_COLON
    | LAMBDA | SHIFTPLUS | FORTYPE | RANGE
%nonterm crate of Crate | inner_attrs of InnerAttribute list | items of Item list
        | outer_attrs of OuterAttribute list
        | inner_attr of InnerAttribute | outer_attr of OuterAttribute | meta_item of MetaItem 
        | meta_seq of MetaSeq | meta_seq_expansion of MetaItemInner list | meta_item_inner of MetaItemInner
        | path | simple_path of PathSeg list | simple_path_segment of PathSeg | path_segment of PathSeg
        | path_exp | path_in_exp | path_in_exp_with_generic | path_exp_segment
        | qualified_path_in_exp | qualified_path_in_exp_expansion | qualified_path_type | qualified_path_in_type | qualified_path_in_type_expansion
        | type_path of TypePath | type_path_segment | type_path_fn | type_path_fn_inputs | type_path_fn_inputs_expansion
        | item of Item | vis_item of VisItem | macro_item
        | visibility of Visibility | item_type of ItemType
        | use_tree of UseTree | use_tree_multi of UseTree list | use_tree_multi_expansion of UseTree list
        | patterns of Pattern| types of Type
        | generics of Generics | maybe_generics of Generics option | generic_params of GenericParams | maybe_visibility of Visibility
        | where_clause of WhereClause | maybe_where_clause of WhereClause option | where_clause_expansion of WhereClauseItem list
        | where_clause_item of WhereClauseItem | lifetime_where_clause_item of WhereClauseItem | type_bound_where_clause_item of WhereClauseItem
        | lifetime_params of LifetimeParam list | lifetime_param of LifetimeParam | lifetime_params_expansion of LifetimeParam list
        | type_params of TypeParam list | type_params_expansion of TypeParam list | type_param of TypeParam | maybe_type_param
        | maybe_lifetime_param | maybe_colon_lifetime_bounds of LifetimeBounds option | lifetime_param_tail | maybe_colon_type_bounds of TypeParamBounds option
        | maybe_comma | maybe_plus | maybe_ques | maybe_not | maybe_outer_attr of OuterAttribute option
        | function of ItemType | func_qualifier of FunctionQualifier list | maybe_unsafe of Unsafe option | abi of Abi | maybe_abi of Abi option
        | func_parameters of FunctionParam list | maybe_func_parameters of FunctionParam list| func_param of FunctionParam | func_parameters_expansion of FunctionParam list
        | func_return_type of Type | maybe_func_return_type of Type option
        | struct_struct of StructType| struct_fields of StructField list | struct_field of StructField 
        | maybe_struct_fields of StructField list | struct_fields_expansion of StructField list
        | tuple_struct of StructType | tuple_fields of TupleField list | tuple_field of TupleField 
        | maybe_tuple_fields of TupleField list | tuple_fields_expansion of TupleField list
        | enum_items of EnumItem list | maybe_enum_items of EnumItem list | enum_items_expansion of EnumItem list 
        | enum_item of EnumItem | enum_item_tuple of EnumItemType | enum_item_struct of EnumItemType | enum_item_discriminant of EnumItemType
        | type_alias of ItemType | constant_item of ItemType
        | maybe_type_param_bounds of TypeParamBounds option | type_param_bounds of TypeParamBounds
        | type_param_bounds_expansion of TypeParamBound list | type_param_bound of TypeParamBound
        | lifetime of Lifetime | lifetime_bounds of LifetimeBounds | lifetime_bounds_expansion of Lifetime list | maybe_lifetime
        | trait_bound of TraitBound | for_lifetimes of ForLifetimes | maybe_for_lifetimes of ForLifetimes option
        | trait_items of TraitItem list | trait_item of TraitItem 
        | trait_func of TraitItemType | trait_method of TraitItemType | trait_const of TraitItemType | trait_type of TraitItemType
        | trait_func_decl of TraitFuncDecl | trait_method_decl of TraitMethodDecl
        | macro_invocation | macro_invocation_semi of MacroInvocationSemi | macro_rules_definition | macro_rules_def
        | macro_rules | macro_rules_expansion | macro_rule | macro_matcher | macro_transcriber | macro_match | macro_matches
        | macro_frag_spec | macro_rep_sep | macro_kleene_op
        | trait_func_parameters of TraitFunctionParam list | trait_func_param of TraitFunctionParam 
        | maybe_trait_func_parameters of TraitFunctionParam list | trait_func_parameters_expansion of TraitFunctionParam list
        | self_param of SelfParam| maybe_and_or_lifetime | maybe_mut of Mutability
        | inherent_impl of ItemType | trait_impl of ItemType
        | inherent_impl_items of InherentImplItem list | inherent_impl_items_expansion of InherentImplItem list | inherent_impl_item of InherentImplItem
        | trait_impl_items  of TraitImplItem list | trait_impl_items_expansion of TraitImplItem list | trait_impl_item of TraitImplItem
        | method of Method
        | extern_block of ItemType | external_items of ExternalItem list| external_item of ExternalItem 
        | external_static_item of ExternalItemType | external_func_item of ExternalItemType
        | maybe_named_func_parameters of ExternFunctionParameter
        | named_func_parameters of ExternFunctionParameter | named_func_parameters_expansion of NamedFunctionParam list
        | named_func_parameters_with_variadics of ExternFunctionParameter| named_func_param of NamedFunctionParam

        | maybe_statements | statements |statements_expansion | statement | let_statement | exp_statement 
        | expressions | expression of Expression | exp_nostruct | exp_nostruct_nolazybop
        | exp_without_block | lit_exp of LiteralExpression | str_lit of TokenType | bool_lit of TokenType
        | generic_args | generic_args_lifetimes | generic_args_types | generic_args_bindings | generic_args_binding
        | op_exp | grouped_exp 
        | array_exp | array_elements | array_elements_expansion | index_exp 
        | tuple_exp | tuple_elements | tuple_elements_expansion | tuple_index_exp 
        | struct_exp | struct_exp_struct | struct_exp_tuple | struct_exp_unit
        | struct_exp_fields | struct_exp_fields_expansion | struct_base | struct_exp_field
        | enum_var_exp | enum_exp_struct | enum_exp_tuple | enum_exp_field_less 
        | enum_exp_fields | enum_exp_fields_expansion | enum_exp_field
        | call_exp | call_params | maybe_call_params | call_params_expansion 
        | method_call_exp | field_exp 
        | closure_exp | closure_parameters | closure_param | closure_parameters_expansion
        | continue_exp | break_exp | range_exp 
        | return_exp
        | exp_with_block | block_exp of BlockExpression | unsafe_block_exp 
        | loop_exp | if_exp | if_let_exp 
        | match_exp | match_arms | match_arms_expansion | match_arm | match_arm_patterns | match_arm_guard
        | type_no_bounds

        | token_trees | token_tree | delim_token_tree
        | token_ep_delim | token_ep_delim_kleene | token_ep_delim_dollar | token_ep_delim_kleene_dollar
%pos int
%eop EOF
%noshift EOF
%name Rust
%keyword AS BREAK CONST CONTINUE CRATE ELSE ENUM EXTERN
        FALSE FN FOR IF IMPL IN LET LOOP MATCH MOD MOVE
        MUT PUB REF RETURN SELFVALUE SELFTYPE STATIC STRUCT
        SUPER TRAIT TRUE TYPE UNSAFE USE WHERE WHILE
        ABSTRACT BECOME BOX DO FINAL MACRO OVERRIDE
        PRIV TYPEOF UNSIZED VIRTUAL YIELD

%nonassoc LAMBDA
%nonassoc SELFVALUE
%nonassoc MUT
%nonassoc IDENT
%nonassoc SHIFTPLUS
%nonassoc LOWER_THAN_PATHSEP
%nonassoc PATHSEP
%nonassoc LOWER_THAN_COLON
%nonassoc RARROW COLON
%nonassoc FORTYPE
%nonassoc FOR
%nonassoc QUESTION
%nonassoc BOX
%nonassoc DOTDOT
%nonassoc RETURN YIELD

%nonassoc LOWER_THAN_EXPR

%right EQ SHLEQ SHREQ PLUSEQ MINUSEQ ANDEQ OREQ STAREQ SLASHEQ CARETEQ PERCENTEQ DOTDOTEQ
%left OROR
%left ANDAND
%left EQEQ NE
%left LT GT LE GE
%left OR
%left CARET
%left AND
%left SHL SHR
%left PLUS MINUS
%nonassoc AS
%left STAR SLASH PERCENT

%nonassoc NOT
%nonassoc LOWER_THAN_LPARENT
%nonassoc LBRACE LBRACKET LPARENT DOT

%nonassoc RANGE

%verbose

%%
crate: SHEBANG_LINE inner_attrs items                          (Crate (Shebang (SOME SHEBANG_LINE), rev(inner_attrs), rev(items)))
        | inner_attrs items                                    (Crate (Shebang (NONE), rev(inner_attrs), rev(items)))

items: items item                                              (item::items)
        |                                                      ([])

item: outer_attrs vis_item                                      (VisItemType (rev(outer_attrs), vis_item))
        | macro_item                                            (MacroItemType (MacroItem))

(* -----Macro------ *)
(* macro_invocation: simple_path NOT delim_token_tree              () *)
macro_invocation: path_in_exp NOT delim_token_tree              ()

macro_item: macro_invocation_semi                               (yaccLog("macro_invocation_semi"))
            | macro_rules_definition                            (yaccLog("macro_rules_definition"))

(* macro_invocation_semi: simple_path NOT 
                        LPARENT token_trees RPARENT SEMI        (MacroInvocationSemi)
                    | simple_path NOT 
                        LBRACKET token_trees RBRACKET SEMI      (MacroInvocationSemi)
                    | simple_path NOT 
                        LBRACE token_trees RBRACE               (MacroInvocationSemi) *)

macro_invocation_semi: path_in_exp NOT 
                        LPARENT token_trees RPARENT SEMI        (MacroInvocationSemi)
                    | path_in_exp NOT 
                        LBRACKET token_trees RBRACKET SEMI      (MacroInvocationSemi)
                    | path_in_exp NOT 
                        LBRACE token_trees RBRACE               (MacroInvocationSemi)

token_trees: token_trees token_tree                             ()
            |                                                   ()
token_tree: token_ep_delim                                      ()
            | delim_token_tree                                  ()
delim_token_tree: LPARENT token_trees RPARENT                   ()
                | LBRACKET token_trees RBRACKET                 ()
                | LBRACE token_trees RBRACE                     ()

(* the simple_path must be [macro_rules] *)
(* macro_rules_definition: simple_path NOT IDENT macro_rules_def   () *)
macro_rules_definition: path_in_exp NOT IDENT macro_rules_def   ()
macro_rules_def: LPARENT macro_rules RPARENT SEMI               ()
            | LBRACKET macro_rules RBRACKET SEMI                ()
            | LBRACE macro_rules RBRACE                         ()
macro_rules: macro_rule macro_rules_expansion SEMI              ()
            | macro_rule macro_rules_expansion                  ()
macro_rules_expansion: macro_rules_expansion SEMI macro_rule    ()
                    |                                           ()
macro_rule: macro_matcher FATARROW macro_transcriber            (yaccLog("macro_rule"))
macro_matcher: LPARENT macro_matches RPARENT                    ()
            | LBRACKET macro_matches RBRACKET                   ()
            | LBRACE macro_matches RBRACE                       ()
macro_matches: macro_matches macro_match                        ()
            |                                                   ()
macro_match: token_ep_delim_dollar                              ()
            | macro_matcher                                     ()
            | DOLLAR IDENT COLON macro_frag_spec                ()
            | DOLLAR LPARENT macro_match macro_matches RPARENT 
                macro_kleene_op                                 ()
            | DOLLAR LPARENT macro_match macro_matches RPARENT 
                macro_rep_sep macro_kleene_op                   ()     
macro_frag_spec: IDENT                                          ()
macro_rep_sep: token_ep_delim_kleene                            ()
macro_kleene_op: STAR                                           ()
                | PLUS                                          ()
                | QUESTION                                      ()
macro_transcriber: delim_token_tree                             ()

(* ------VisItem------ *)
vis_item: maybe_visibility item_type                            (VisItem(DefaultVis, item_type))

maybe_visibility: visibility                                    (visibility)
                    |                                           (DefaultVis)

visibility: PUB                                                 (PubVis)
        | PUB LPARENT CARET RPARENT                             (CrateVis)
        | PUB LPARENT SELFVALUE RPARENT                         (SelfVis)
        | PUB LPARENT SUPER RPARENT                             (SuperVis)
        | PUB LPARENT IN simple_path RPARENT                    (InVis (SimplePath(rev(simple_path))))

use_tree: simple_path                                           (yaccLog("use_tree:branch 1"); UseAlias (SimplePath(rev(simple_path)), NONE))
        | simple_path AS IDENT                                  (yaccLog("use_tree:branch 2"); UseAlias (SimplePath(rev(simple_path)), SOME(Identifer(IDENT))))
        | STAR                                                  (yaccLog("use_tree:branch 3"); UseAll (NONE))
        | PATHSEP STAR                                          (yaccLog("use_tree:branch 4"); UseAll (SOME(SimplePath([DefaultPat]))))
        | simple_path PATHSEP STAR                              (yaccLog("use_tree:branch 5"); UseAll (SOME(SimplePath(rev(simple_path)))))
        | use_tree_multi                                        (yaccLog("use_tree:branch 6"); UseList (NONE, use_tree_multi))
        | PATHSEP use_tree_multi                                (yaccLog("use_tree:branch 7"); UseList (SOME(SimplePath([DefaultPat])), use_tree_multi))
        | simple_path PATHSEP use_tree_multi                    (yaccLog("use_tree:branch 8"); UseList (SOME(SimplePath(rev(simple_path))), use_tree_multi))
use_tree_multi: LBRACE use_tree 
                use_tree_multi_expansion maybe_comma RBRACE     (use_tree::rev(use_tree_multi_expansion))
                | LBRACE RBRACE                                 ([])
use_tree_multi_expansion: use_tree_multi_expansion
                            COMMA use_tree                      (use_tree::use_tree_multi_expansion)
                        |                                       (nil)                       

inner_attrs: inner_attrs inner_attr                             (yaccLog("inner_attrs"); inner_attr::inner_attrs)
            |                                                   ([])
outer_attrs: outer_attrs outer_attr                             (yaccLog("outer_attrs"); outer_attr::outer_attrs)
            |                                                   ([])

maybe_outer_attr: outer_attr                                    (SOME(outer_attr))
                |                                               (NONE)
inner_attr: SHEBANG LBRACKET meta_item RBRACKET                 (yaccLog("inner_attr"); InnerAttribute(meta_item))
outer_attr: POUND LBRACKET meta_item RBRACKET                   (OuterAttribute meta_item)

meta_item: simple_path EQ lit_exp                               (AttrKVPair(SimplePath(rev(simple_path)), lit_exp))
        | simple_path LPARENT meta_seq RPARENT                  (AttrSubs(SimplePath(rev(simple_path)), SOME(meta_seq)))
        | simple_path LPARENT RPARENT                           (AttrSubs(SimplePath(rev(simple_path)), NONE))
        | simple_path %prec LOWER_THAN_LPARENT                  (AttrName (SimplePath(rev(simple_path))))

meta_seq: meta_item_inner meta_seq_expansion COMMA              (MetaSeq(meta_item_inner::rev(meta_seq_expansion)))
            | meta_item_inner meta_seq_expansion                (MetaSeq(meta_item_inner::rev(meta_seq_expansion)))
            
meta_seq_expansion: LPARENT COMMA meta_item_inner RPARENT
                    meta_seq_expansion                          (meta_item_inner::meta_seq_expansion)
                    |                                           (nil)
meta_item_inner: meta_item                                      (MetaItem(meta_item))
                | lit_exp                                       (MetaLit(lit_exp))

patterns: IDENT                                                 (Pattern)
types: IDENT                                                    (Type)

(* rewrite simple path production*)
simple_path:  simple_path_segment                               ([simple_path_segment])
            | PATHSEP simple_path_segment                       ([DefaultPat, simple_path_segment])
            | simple_path PATHSEP simple_path_segment           (simple_path_segment::simple_path)
(* simple_path: path_in_exp %prec LOWER_THAN_PATHSEP               ([]) *)
(* simple_path_segment: IDENT                                      (IDPat(Identifer(IDENT)))
                    | SUPER                                     (SuperPat)
                    | SELFVALUE                                 (SelfPat)
                    | CRATE                                     (CratePat)
                    | DOLLAR CRATE                              (DCratePat) *)
simple_path_segment: path_segment  %prec LOWER_THAN_PATHSEP     (path_segment)
path_segment: IDENT                                             (IDPat(Identifer(IDENT)))
            | SUPER                                             (SuperPat)
            | SELFVALUE                                         (SelfPat)
            | CRATE                                             (CratePat)
            | DOLLAR CRATE                                      (DCratePat)

path_in_exp: path_exp_segment                                   ()
            | PATHSEP path_exp_segment                          ()
            | path_in_exp PATHSEP path_exp_segment              ()
path_exp_segment: path_segment PATHSEP generic_args 
                %prec PATHSEP                                   ()
                | SELFTYPE PATHSEP generic_args 
                %prec PATHSEP                                   ()
                | path_segment %prec LOWER_THAN_PATHSEP         ()
                | SELFTYPE %prec LOWER_THAN_PATHSEP             ()

generic_args: LT GT                                             ()
            | LT generic_args_lifetimes maybe_comma GT          ()
            | LT generic_args_types maybe_comma GT              ()
            | LT generic_args_bindings maybe_comma GT           ()
            | LT generic_args_types 
                COMMA generic_args_bindings maybe_comma GT      ()
            | LT generic_args_lifetimes 
                COMMA generic_args_types GT                     ()
            | LT generic_args_lifetimes 
                COMMA generic_args_bindings GT                  ()
            | LT generic_args_lifetimes 
                COMMA generic_args_types 
                COMMA generic_args_bindings GT                  ()
generic_args_lifetimes: generic_args_lifetimes COMMA lifetime   ()
                        | lifetime                              ()
generic_args_types: generic_args_types COMMA types              ()
                    | types                                     ()
generic_args_bindings: generic_args_bindings 
                    COMMA generic_args_binding                  ()
                    | generic_args_binding                      ()
generic_args_binding: IDENT EQ types                            ()

qualified_path_in_exp: qualified_path_type 
                    qualified_path_in_exp_expansion             ()
qualified_path_in_exp_expansion: qualified_path_in_exp_expansion
                                PATHSEP path_exp_segment        ()
                            | PATHSEP path_exp_segment          ()
qualified_path_type: LT types GT                                ()
                    | LT types AS type_path GT                  ()

qualified_path_in_type: qualified_path_type
                    qualified_path_in_type_expansion            ()
qualified_path_in_type_expansion: qualified_path_in_type_expansion
                                PATHSEP type_path_segment       ()
                                | PATHSEP type_path_segment     ()

type_path: type_path_segment                                    (TypePath)
        | PATHSEP type_path_segment                             (TypePath) 
        | type_path PATHSEP type_path_segment                   (TypePath)
type_path_segment: path_segment PATHSEP generic_args 
                %prec PATHSEP                                   ()
                | SELFTYPE PATHSEP generic_args 
                %prec PATHSEP                                   ()
                | path_segment  generic_args                    ()
                | SELFTYPE generic_args                         ()
                | path_segment PATHSEP type_path_fn 
                %prec PATHSEP                                   ()
                | SELFTYPE PATHSEP type_path_fn 
                %prec PATHSEP                                   ()
                | path_segment  type_path_fn                    ()
                | SELFTYPE type_path_fn                         ()
                | path_segment %prec LOWER_THAN_PATHSEP         ()
                | SELFTYPE %prec LOWER_THAN_PATHSEP             ()   
type_path_fn: LPARENT RPARENT                                   ()
            | LPARENT RPARENT RARROW types                      ()
            | LPARENT type_path_fn_inputs RPARENT               ()
            | LPARENT type_path_fn_inputs RPARENT RARROW types  ()
type_path_fn_inputs: type_path_fn_inputs_expansion              ()
                    | type_path_fn_inputs_expansion COMMA       ()
type_path_fn_inputs_expansion: type_path_fn_inputs_expansion 
                            COMMA types                         ()
                            | types                             ()
                
maybe_where_clause: where_clause                                (SOME(where_clause))
                    |                                           (NONE)
where_clause: WHERE where_clause_expansion                      (WhereClause (rev (where_clause_expansion)))
            | WHERE where_clause_expansion where_clause_item    (WhereClause (where_clause_item::rev(where_clause_expansion)))
where_clause_expansion: where_clause_expansion 
                    where_clause_item COMMA                     (where_clause_item::where_clause_expansion)
                    |                                           (nil)
where_clause_item: lifetime_where_clause_item                   (lifetime_where_clause_item)
                    | type_bound_where_clause_item              (type_bound_where_clause_item)
lifetime_where_clause_item: lifetime COLON lifetime_bounds      (LifetimeWhereClauseItem(lifetime, lifetime_bounds))
type_bound_where_clause_item: maybe_for_lifetimes types COLON 
                            maybe_type_param_bounds             (TypeBoundWhereClauseItem(maybe_for_lifetimes, types, maybe_type_param_bounds))
maybe_generics: generics                                        (SOME(generics))
                |                                               (NONE)
maybe_for_lifetimes: for_lifetimes                              (SOME(for_lifetimes))
                    |                                           (NONE)
for_lifetimes: (* There is no definition in reference, 
            and following production comes from rust repository *)                
            FOR LT lifetime_params GT                           (ForLifetimes(LifetimeParams(rev(lifetime_params))))
            | FOR LT GT                                         (ForLifetimes(LifetimeParams([])))

(* There is a ambiguous token, SHR *)
generics: LT generic_params GT                                  (yaccLog("generics"); Generics(generic_params))
generic_params: lifetime_params                                 (GenericParams (LifetimeParams(rev(lifetime_params)), TypeParams([])))
                | lifetime_params COMMA                         (GenericParams (LifetimeParams(rev(lifetime_params)), TypeParams([])))
                | type_params                                   (GenericParams (LifetimeParams([]), TypeParams(rev(type_params))))
                | type_params COMMA                             (GenericParams (LifetimeParams([]), TypeParams(rev(type_params))))
                | lifetime_params COMMA type_params             (GenericParams (LifetimeParams(rev(lifetime_params)), TypeParams(rev(type_params))))
                | lifetime_params COMMA type_params COMMA       (GenericParams (LifetimeParams(rev(lifetime_params)), TypeParams(rev(type_params))))
                |                                               (GenericParams (LifetimeParams([]), TypeParams([])))
lifetime_params: lifetime_param                                 ([lifetime_param])
                | lifetime_params COMMA lifetime_param          (lifetime_param::lifetime_params)
type_params: type_param                                         ([type_param])
            | type_params COMMA type_param                      (type_param::type_params)
(* generic_params: lifetime_params                                 (yaccLog("generic_params:branch 1"))
                | lifetime_params_expansion type_params         (yaccLog("generic_params:branch 2")) *)
(* lifetime_params: lifetime_params_expansion 
                maybe_lifetime_param                            ()
maybe_lifetime_param: lifetime_param                            ()
                    |                                           ()
lifetime_params_expansion: lifetime_params_expansion
                            lifetime_param COMMA                (yaccLog("lifetime_params_expansion:branch 1"))
                        |                                       (yaccLog("lifetime_params_expansion:branch 2")) *)
(* type_params: type_params_expansion maybe_type_param             ()
type_params_expansion: type_params_expansion 
                    type_param COMMA                            (yaccLog("type_params_expansion:branch 1"))
                    |                                           (yaccLog("type_params_expansion:branch 2"))
maybe_type_param: type_param                                    ()
                |                                               () *)
lifetime_param: maybe_outer_attr
            LIFETIME_OR_LABEL maybe_colon_lifetime_bounds       (yaccLog("lifetime_param"); 
                                                                    LifetimeParam(maybe_outer_attr, 
                                                                            LifetimeOrLabel(LIFETIME_OR_LABEL), 
                                                                            maybe_colon_lifetime_bounds)
                                                                )
maybe_colon_lifetime_bounds: COLON lifetime_bounds              (SOME(lifetime_bounds))
                        |                                       (NONE)
type_param: maybe_outer_attr IDENT maybe_colon_type_bounds      (yaccLog("type_param:branch 1");
                                                                    TypeParam(maybe_outer_attr, Identifer(IDENT), maybe_colon_type_bounds, NONE)
                                                                )
            | maybe_outer_attr IDENT maybe_colon_type_bounds
                EQ types                                        (yaccLog("type_param:branch 2");
                                                                    TypeParam(maybe_outer_attr, Identifer(IDENT), maybe_colon_type_bounds, SOME(types))
                                                                )
maybe_colon_type_bounds: COLON                                  (NONE)
                        | COLON type_param_bounds               (SOME(type_param_bounds))
                        |                                       (NONE)

maybe_comma: COMMA                                              ()
            |                                                   ()
maybe_mut: MUT                                                  (Mut)
            |                                                   (NonMut)
maybe_plus: PLUS                                                ()
            |                                                   ()
maybe_ques: QUESTION                                            ()
            |                                                   ()
maybe_unsafe: UNSAFE                                            (SOME(Unsafe))
            |                                                   (NONE)

item_type: 
        MOD IDENT SEMI                                       (Module (Identifer(IDENT), NONE))
        | MOD IDENT LBRACE inner_attrs items RBRACE             (Module (Identifer(IDENT), SOME(ModuleBody(rev(inner_attrs), rev(items)))))
        | EXTERN CARET IDENT SEMI                               (yaccLog("extern crate "^IDENT); ExternCrate (Identifer(IDENT), NONE))
        | EXTERN CARET IDENT AS IDENT SEMI                      (yaccLog("extern crate "^IDENT1^" as"^IDENT2); ExternCrate (Identifer(IDENT1), SOME(Identifer(IDENT2))))
        | USE use_tree SEMI                                     (yaccLog("use_tree"); UseDeclaration(use_tree))
        | function                                              (yaccLog("function"); function)
        | type_alias                                            (yaccLog("type alias"); type_alias)
        | struct_struct                                         (yaccLog("struct struct"); Struct (struct_struct))
        | tuple_struct                                          (yaccLog("tuple struct"); Struct (tuple_struct))
        | ENUM IDENT maybe_generics maybe_where_clause
            LBRACE maybe_enum_items RBRACE                      (yaccLog("enumeration"); 
                                                                Enumeration (Identifer(IDENT), maybe_generics, 
                                                                maybe_where_clause, maybe_enum_items))
        | UNION IDENT maybe_generics maybe_where_clause 
            LBRACE struct_fields RBRACE                         (yaccLog("Union"); Union (Identifer(IDENT), maybe_generics, 
                                                                                        maybe_where_clause, struct_fields))
        | constant_item                                         (yaccLog("ConstantItem"); constant_item)
        | STATIC MUT IDENT COLON types EQ expression SEMI       (yaccLog("StaticItem"); StaticItem (Mut, Identifer(IDENT), types, expression))
        | STATIC IDENT COLON types EQ expression SEMI           (yaccLog("StaticItem"); StaticItem (NonMut, Identifer(IDENT), types, expression))
        | maybe_unsafe TRAIT IDENT maybe_generics
            maybe_colon_type_bounds maybe_where_clause
            LBRACE trait_items RBRACE                           (yaccLog("Trait"); Trait ({
                                                                    unsafe=maybe_unsafe, name=Identifer(IDENT), generic=maybe_generics, 
                                                                    tyb=maybe_colon_type_bounds, wh=maybe_where_clause, 
                                                                    traitItems=rev(trait_items)
                                                                }))
        | inherent_impl                                         (yaccLog("inherent_impl"); inherent_impl)
        | trait_impl                                            (yaccLog("trait_impl"); trait_impl)
        | extern_block                                          (yaccLog("extern_block"); extern_block)

type_alias: TYPE IDENT maybe_generics maybe_where_clause
            EQ types SEMI                                       (TypeAlias (Identifer(IDENT), maybe_generics, maybe_where_clause, types))        
constant_item: CONST IDENT COLON types EQ expression SEMI       (ConstantItem (Identifer(IDENT), types, expression))

function: func_qualifier FN IDENT maybe_generics
            LPARENT maybe_func_parameters RPARENT
            maybe_func_return_type
            maybe_where_clause
            block_exp                                           (Function({ qualifier=func_qualifier, generic=maybe_generics,
                                                                            name=Identifer(IDENT), params=maybe_func_parameters,
                                                                            ret=maybe_func_return_type, wh=maybe_where_clause,
                                                                            be=block_exp
                                                                        })
                                                                )

func_qualifier: CONST                                           ([ConstFQ])
                | CONST UNSAFE                                  ([ConstFQ, UnsafeFQ])
                | CONST EXTERN                                  ([ConstFQ, ExternFQ(NONE)])
                | CONST EXTERN abi                              ([ConstFQ, ExternFQ(SOME(abi))])
                | CONST UNSAFE EXTERN                           ([ConstFQ, UnsafeFQ, ExternFQ(NONE)])
                | CONST UNSAFE EXTERN abi                       ([ConstFQ, UnsafeFQ, ExternFQ(SOME(abi))])
                | UNSAFE                                        ([UnsafeFQ])
                | UNSAFE EXTERN                                 ([UnsafeFQ, ExternFQ(NONE)])
                | UNSAFE EXTERN abi                             ([UnsafeFQ, ExternFQ(SOME(abi))])
                | EXTERN                                        ([ExternFQ(NONE)])
                | EXTERN abi                                    ([ExternFQ(SOME(abi))])
                |                                               ([])

maybe_abi: abi                                                  (SOME(abi))
        |                                                       (NONE)

abi: STR_LIT                                                    (Abi(STR_LIT))
    | RAW_STR_LIT                                               (Abi(RAW_STR_LIT))

maybe_func_parameters: func_parameters                          (func_parameters)
                    |                                           ([])

func_parameters: func_param func_parameters_expansion 
                maybe_comma                                     (func_param::rev(func_parameters_expansion))

func_parameters_expansion: 
                        (* This is a left recursion to solve COMMA conflicts *)
                        func_parameters_expansion 
                        COMMA func_param                        (func_param::func_parameters_expansion)
                        |                                       (nil)

func_param: patterns COLON types                                (FunctionParam (patterns, types))

maybe_func_return_type: func_return_type                        (SOME(func_return_type))
                        |                                       (NONE)
func_return_type: RARROW types                                  (types)

struct_struct: STRUCT IDENT maybe_generics maybe_where_clause
                LBRACE maybe_struct_fields RBRACE               (StructStruct (Identifer(IDENT), maybe_generics, maybe_where_clause, maybe_struct_fields))
            | STRUCT IDENT maybe_generics maybe_where_clause
                SEMI                                            (UnitStruct (Identifer(IDENT), maybe_generics, maybe_where_clause))

maybe_struct_fields: struct_fields                              (struct_fields)
                    |                                           ([])
struct_fields: struct_field struct_fields_expansion maybe_comma (struct_field::rev(struct_fields_expansion))

struct_fields_expansion:
                        (* This is a left recursion to solve COMMA conflicts *)
                        struct_fields_expansion
                        COMMA struct_field                      (struct_field::struct_fields_expansion)
                        |                                       (nil)
struct_field: outer_attrs visibility IDENT COLON types          (StructField (rev(outer_attrs), visibility, Identifer(IDENT), types))
                | outer_attrs IDENT COLON types                 (StructField (rev(outer_attrs), DefaultVis, Identifer(IDENT), types))

tuple_struct: STRUCT IDENT maybe_generics 
                LPARENT maybe_tuple_fields 
                RPARENT maybe_where_clause SEMI                 (TupleStruct (Identifer(IDENT), maybe_generics, maybe_tuple_fields, maybe_where_clause))
maybe_tuple_fields: tuple_fields                                (tuple_fields)
                    |                                           ([])
tuple_fields: tuple_field tuple_fields_expansion maybe_comma    (tuple_field::rev(tuple_fields_expansion))
tuple_fields_expansion: 
                        (* This is a left recursion to solve COMMA conflicts *)
                        tuple_fields_expansion 
                        COMMA tuple_field                       (tuple_field::tuple_fields_expansion)
                        |                                       (nil)
tuple_field: outer_attrs visibility types                       (TupleField (rev(outer_attrs), visibility, types))
            | outer_attrs types                                 (TupleField (rev(outer_attrs), DefaultVis, types))

maybe_enum_items: enum_items                                    (enum_items)
                |                                               ([])
enum_items: enum_item enum_items_expansion maybe_comma          (yaccLog("enum_items"); enum_item::rev(enum_items_expansion))
enum_items_expansion: 
                    (* This is a left recursion to solve COMMA conflicts *)
                    enum_items_expansion COMMA enum_item        (enum_item::enum_items_expansion)
                    |                                           (nil)
enum_item: outer_attrs IDENT enum_item_tuple                    (EnumItem (rev(outer_attrs), Identifer(IDENT), SOME(enum_item_tuple)))
            | outer_attrs IDENT enum_item_struct                (EnumItem (rev(outer_attrs), Identifer(IDENT), SOME(enum_item_struct)))
            | outer_attrs IDENT enum_item_discriminant          (EnumItem (rev(outer_attrs), Identifer(IDENT), SOME(enum_item_discriminant)))
            | outer_attrs IDENT                                 (yaccLog("enum_item: branch 4"); EnumItem (rev(outer_attrs), Identifer(IDENT), NONE))

enum_item_tuple: LPARENT maybe_tuple_fields RPARENT             (EnumItemTuple (maybe_tuple_fields))
enum_item_struct: LBRACE maybe_struct_fields RBRACE             (EnumItemStruct (maybe_struct_fields))
enum_item_discriminant: EQ expression                           (EnumItemDiscriminant (expression))

trait_items: trait_items trait_item                             (trait_item::trait_items)
            |                                                   (nil)
trait_item: outer_attrs trait_func                              (TraitItem (outer_attrs, trait_func))
            | outer_attrs trait_method                          (TraitItem (outer_attrs, trait_method))
            | outer_attrs trait_const                           (TraitItem (outer_attrs, trait_const))
            | outer_attrs trait_type                            (TraitItem (outer_attrs, trait_type))
            | outer_attrs macro_invocation_semi                 (TraitItem (outer_attrs, TraitMIS(macro_invocation_semi)))

trait_func: trait_func_decl SEMI                                (TraitFunc (trait_func_decl, NONE))
            | trait_func_decl block_exp                         (TraitFunc (trait_func_decl, SOME (block_exp)))
trait_method: trait_method_decl SEMI                            (TraitMethod (trait_method_decl, NONE))
            | trait_method_decl block_exp                       (TraitMethod (trait_method_decl, SOME (block_exp)))
trait_func_decl: func_qualifier FN IDENT maybe_generics
                    LPARENT maybe_trait_func_parameters 
                    RPARENT maybe_func_return_type 
                    maybe_where_clause                          (TraitFuncDecl ({
                                                                    qualifier=func_qualifier, name=Identifer(IDENT), generic=maybe_generics, 
                                                                    params=maybe_trait_func_parameters, ret=maybe_func_return_type, 
                                                                    wh=maybe_where_clause
                                                                }))
maybe_trait_func_parameters: trait_func_parameters              (trait_func_parameters)
                                |                               ([])
trait_method_decl: func_qualifier FN IDENT maybe_generics
                    LPARENT self_param 
                    trait_func_parameters_expansion maybe_comma
                    RPARENT maybe_func_return_type
                    maybe_where_clause                          (TraitMethodDecl({
                                                                    qualifier=func_qualifier, name=Identifer(IDENT), generic=maybe_generics, 
                                                                    selfParam=self_param, params=trait_func_parameters_expansion, ret=maybe_func_return_type, 
                                                                    wh=maybe_where_clause
                                                                }))
trait_func_parameters: trait_func_param 
                trait_func_parameters_expansion maybe_comma     (trait_func_param::rev(trait_func_parameters_expansion))
trait_func_parameters_expansion: 
    trait_func_parameters_expansion COMMA trait_func_param      (trait_func_param::trait_func_parameters_expansion)
                            |                                   (nil)
trait_func_param:  patterns COLON types                         (TraitFunctionParam (SOME(patterns), types))
                | types                                         (TraitFunctionParam (NONE, types))
trait_const: CONST IDENT COLON types SEMI                       (TraitConst (Identifer(IDENT), types, NONE))
            | CONST IDENT COLON types EQ expression SEMI        (TraitConst (Identifer(IDENT), types, SOME(expression)))
trait_type: TYPE IDENT maybe_colon_type_bounds SEMI             (TraitType (Identifer(IDENT), maybe_colon_type_bounds))
maybe_type_param_bounds: type_param_bounds                      (SOME(type_param_bounds))
                        |                                       (NONE)
(* type_param_bounds: type_param_bound type_param_bounds_expansion (TypeParamBounds(type_param_bound::rev(type_param_bounds_expansion)))
                    | type_param_bound 
                    type_param_bounds_expansion PLUS            (TypeParamBounds(type_param_bound::rev(type_param_bounds_expansion)))
type_param_bounds_expansion: type_param_bounds_expansion
                            PLUS type_param_bound               (type_param_bound::type_param_bounds_expansion)
                        |                                       (nil) *)
type_param_bounds: type_param_bounds_expansion                   (TypeParamBounds(rev(type_param_bounds_expansion)))
                    (* | type_param_bounds_expansion PLUS           (TypeParamBounds(rev(type_param_bounds_expansion))) *)
type_param_bounds_expansion: type_param_bounds_expansion
                            PLUS type_param_bound               (type_param_bound::type_param_bounds_expansion)
                        | type_param_bound                      ([type_param_bound])
type_param_bound: lifetime                                      (LTB(lifetime))
                | trait_bound                                   (TB(trait_bound))

lifetime_bounds: lifetime_bounds_expansion                      (LifetimeBounds(rev(lifetime_bounds_expansion)))
                | lifetime_bounds_expansion lifetime            (LifetimeBounds(lifetime::rev(lifetime_bounds_expansion)))
lifetime_bounds_expansion: lifetime_bounds_expansion
                    lifetime PLUS                               (lifetime::lifetime_bounds_expansion)
                    |                                           (nil)
maybe_lifetime: lifetime                                        ()
                |                                               ()

lifetime: (* here are some questions *)
          LIFETIME_OR_LABEL                                     (LifetimeOrLabel(LIFETIME_OR_LABEL))
        | STATICLIFETIME                                        (StaticLifetime)
trait_bound: type_path                                          (TraitBound(NONE, NONE, type_path))
            | for_lifetimes type_path                           (TraitBound(NONE, SOME(for_lifetimes), type_path))
            | QUESTION maybe_for_lifetimes type_path            (TraitBound(SOME(Sized), maybe_for_lifetimes, type_path))
            | LPARENT maybe_for_lifetimes type_path RPARENT     (TraitBound(NONE, maybe_for_lifetimes, type_path))
            | LPARENT QUESTION 
                maybe_for_lifetimes type_path RPARENT           (TraitBound(SOME(Sized), maybe_for_lifetimes, type_path))


self_param: AND maybe_mut SELFVALUE                             (SelfParamLT (NONE, maybe_mut))
            | AND lifetime maybe_mut SELFVALUE                  (SelfParamLT (SOME(lifetime), maybe_mut))
            | maybe_mut SELFVALUE                               (SelfParamTY (maybe_mut, NONE))
            | maybe_mut SELFVALUE COLON types                   (SelfParamTY (maybe_mut, SOME(types)))

inherent_impl: IMPL maybe_generics types maybe_where_clause
                LBRACE inner_attrs inherent_impl_items RBRACE   (InherentImpl ({
                                                                    generic=maybe_generics, ty=types, wh=maybe_where_clause, 
                                                                    innerAttrs=inner_attrs, implItems=inherent_impl_items
                                                                }))
inherent_impl_items: inherent_impl_items inherent_impl_item     (inherent_impl_item::inherent_impl_items)
                    |                                           (nil)
inherent_impl_item: outer_attrs macro_invocation_semi           (InherentImplItemMacro (outer_attrs, macro_invocation_semi))
                    | outer_attrs maybe_visibility 
                        constant_item                           (InherentImplItemType (outer_attrs, maybe_visibility, constant_item))
                    | outer_attrs maybe_visibility function     (InherentImplItemType (outer_attrs, maybe_visibility, function))
                    | outer_attrs maybe_visibility method       (InherentImplItemMethod (outer_attrs, maybe_visibility, method))
trait_impl:  IMPL maybe_generics type_path
            FOR types maybe_where_clause LBRACE
            inner_attrs trait_impl_items RBRACE                 (TraitImpl({
                                                                    unsafe=NONE, generic=maybe_generics, neg=false, typath=type_path, ty=types,
                                                                    wh=maybe_where_clause, innerAttrs=inner_attrs, implItems=trait_impl_items
                                                                }))
            |IMPL maybe_generics NOT type_path
            FOR types maybe_where_clause LBRACE
            inner_attrs trait_impl_items RBRACE                 (TraitImpl({
                                                                    unsafe=NONE, generic=maybe_generics, neg=true, typath=type_path, ty=types,
                                                                    wh=maybe_where_clause, innerAttrs=inner_attrs, implItems=trait_impl_items
                                                                }))
            | UNSAFE IMPL maybe_generics  type_path
            FOR types maybe_where_clause LBRACE
            inner_attrs trait_impl_items RBRACE                 (TraitImpl({
                                                                    unsafe=SOME(Unsafe), generic=maybe_generics, neg=false, typath=type_path, ty=types,
                                                                    wh=maybe_where_clause, innerAttrs=inner_attrs, implItems=trait_impl_items
                                                                }))
            | UNSAFE IMPL maybe_generics NOT type_path
            FOR types maybe_where_clause LBRACE
            inner_attrs trait_impl_items RBRACE                 (TraitImpl({
                                                                    unsafe=SOME(Unsafe), generic=maybe_generics, neg=true, typath=type_path, ty=types,
                                                                    wh=maybe_where_clause, innerAttrs=inner_attrs, implItems=trait_impl_items
                                                                }))
trait_impl_items: trait_impl_items trait_impl_item              (trait_impl_item::trait_impl_items)
                |                                               (nil)
trait_impl_item: outer_attrs macro_invocation_semi              (TraitImplItemMacro (outer_attrs, macro_invocation_semi))
                | outer_attrs maybe_visibility type_alias       (TraitImplItemType (outer_attrs, maybe_visibility, type_alias))
                | outer_attrs maybe_visibility constant_item    (TraitImplItemType (outer_attrs, maybe_visibility, constant_item))
                | outer_attrs maybe_visibility function         (TraitImplItemType (outer_attrs, maybe_visibility, function))
                | outer_attrs maybe_visibility method           (TraitImplItemMethod (outer_attrs, maybe_visibility, method))
method: func_qualifier FN IDENT maybe_generics LPARENT
        self_param func_parameters_expansion maybe_comma RPARENT
        maybe_func_return_type maybe_where_clause 
        block_exp                                               (Method ({
                                                                    qualifier=func_qualifier, name=Identifer(IDENT), generic=maybe_generics, 
                                                                    selfParam=self_param, params=rev(func_parameters_expansion), 
                                                                    ret=maybe_func_return_type, wh=maybe_where_clause, be=block_exp
                                                                }))

extern_block: EXTERN maybe_abi LBRACE inner_attrs
            external_items RBRACE                               (ExternBlock (maybe_abi, inner_attrs, external_items))
external_items: external_items external_item                    (external_item::external_items)
            |                                                   (nil)
external_item: outer_attrs 
                maybe_visibility external_static_item           (ExternalItem (outer_attrs, maybe_visibility, external_static_item))
            | outer_attrs
                maybe_visibility external_func_item             (ExternalItem (outer_attrs, maybe_visibility, external_func_item))
external_static_item: STATIC maybe_mut IDENT COLON types SEMI   (ExternalStaticItem (maybe_mut, Identifer(IDENT), types))
external_func_item: FN IDENT maybe_generics LPARENT
                maybe_named_func_parameters RPARENT
                maybe_func_return_type maybe_where_clause
                SEMI                                            (ExternalFunctionItem ({
                                                                    name=Identifer(IDENT), generic=maybe_generics, 
                                                                    params=maybe_named_func_parameters, ret=maybe_func_return_type, 
                                                                    wh=maybe_where_clause
                                                                }))
            |   FN IDENT maybe_generics LPARENT
                named_func_parameters_with_variadics RPARENT
                maybe_func_return_type maybe_where_clause
                SEMI                                            (ExternalFunctionItem ({
                                                                    name=Identifer(IDENT), generic=maybe_generics, 
                                                                    params=named_func_parameters_with_variadics, ret=maybe_func_return_type, 
                                                                    wh=maybe_where_clause
                                                                }))

maybe_named_func_parameters: named_func_parameters              (named_func_parameters)
                        |                                       (ExternFunctionParameter ({params=[], var=false}))
named_func_parameters: named_func_param 
                named_func_parameters_expansion maybe_comma     (ExternFunctionParameter ({params=named_func_param::rev(named_func_parameters_expansion), var=false}))
named_func_parameters_expansion: 
    named_func_parameters_expansion COMMA named_func_param      (named_func_param::named_func_parameters_expansion)
                    |                                           (nil)
named_func_param: IDENT COLON types                             (NamedFunctionParam (SOME(Identifer(IDENT)), types))
                 | UNDERSCORE COLON types                       (NamedFunctionParam (NONE, types))
named_func_parameters_with_variadics:
                (* For convenient, this production is rewrote *)
                named_func_param named_func_parameters_expansion 
                COMMA DOTDOTDOT                                 (ExternFunctionParameter ({params=named_func_param::rev(named_func_parameters_expansion), var=true}))

(* ------Statements and Expression------ *)
block_exp: LBRACE inner_attrs RBRACE                            (BlockExpression)
        | LBRACE inner_attrs statements RBRACE                  (BlockExpression)
statements: statements_expansion                                ()
            | statements_expansion exp_without_block            ()
            | exp_without_block                                 ()
statements_expansion: statements_expansion statement            ()
                    | statement                                 ()
statement: (* need to be completed *)
            SEMI                                                ()
            | item                                              ()
            | let_statement                                     ()
            | exp_statement                                     ()
            (* item contain macro item *)
            (* | macro_invocation_semi                             () *)
let_statement: outer_attrs LET patterns SEMI                    ()
            | outer_attrs LET patterns COLON types SEMI         ()
            | outer_attrs LET patterns EQ expression SEMI       ()
            | outer_attrs LET patterns 
                COLON types EQ expression SEMI                  ()
exp_statement: exp_without_block SEMI                           ()
            (* | exp_with_block                                    () *)
expression: exp_without_block                                   (Expression)
            | exp_with_block                                    (Expression)

exp_without_block: (* outer_attrs before exp *)
                 lit_exp                                        ()
                | path_exp                                      ()
                | op_exp                                        ()
                | grouped_exp                                   ()
                | array_exp                                     (yaccLog("array_exp hit"))
                | index_exp                                     (yaccLog("index_exp hit"))
                | tuple_exp                                     ()
                | tuple_index_exp                               ()
                | struct_exp                                    (yaccLog("struct_exp hit"))
                (* struct exp contains enum *)
                (* | enum_var_exp                                  () *)
                | call_exp                                      ()
                | method_call_exp                               ()
                | field_exp                                     ()
                | closure_exp                                   (yaccLog("closure_exp hit"))
                | continue_exp                                  ()
                | break_exp                                     (yaccLog("break_exp hit"))
                | range_exp                                     ()
                | return_exp                                    ()
                (* items contains macro_invocation *)
                (* | macro_invocation                              () *)

lit_exp: str_lit                                                (LiteralExpression(str_lit))
        | bool_lit                                              (LiteralExpression(bool_lit))
        | CHAR_LIT                                              (LiteralExpression(CharLit(CHAR_LIT, Pos(CHAR_LITleft))))
        | BYTE_LIT                                              (LiteralExpression(ByteLit(BYTE_LIT, Pos(BYTE_LITleft))))
        | INTEGER_LIT                                           (LiteralExpression(IntegerLit(INTEGER_LIT, Pos(INTEGER_LITleft))))
        | FLOAT_LIT                                             (LiteralExpression(FloatLit(FLOAT_LIT, Pos(FLOAT_LITleft))))
bool_lit: TRUE                                                  (True(Pos(TRUEleft)))
        | FALSE                                                 (False(Pos(FALSEleft)))
str_lit: STR_LIT                                                (StrLit(STR_LIT, Pos(STR_LITleft)))
        | RAW_STR_LIT                                           (RawStrLit(RAW_STR_LIT, Pos(RAW_STR_LITleft)))
        | BYTE_STR_LIT                                          (ByteStrLit(BYTE_STR_LIT, Pos(BYTE_STR_LITleft)))
        | RAW_BYTE_STR_LIT                                      (RawByteStrLit(RAW_BYTE_STR_LIT, Pos(RAW_BYTE_STR_LITleft)))

path_exp: path_in_exp %prec LOWER_THAN_LPARENT                  ()
        | qualified_path_in_exp                                 ()


op_exp: (* borrow expression*)
        AND expression                                          ()
        | ANDAND expression                                     ()
        | AND MUT expression                                    ()
        | ANDAND MUT expression                                 ()
        (* dereference expression*)
        | STAR expression                                       ()
        (* question mark operator *)
        | expression QUESTION                                   ()
        (* negation expression *)
        | MINUS expression                                      ()
        | NOT expression                                        ()
        (* arithmetic or logical expression *)
        | expression PLUS expression                            ()
        | expression MINUS expression                           ()
        | expression STAR expression                            ()
        | expression SLASH expression                           ()
        | expression PERCENT expression                         ()
        | expression AND expression                             ()
        | expression OR expression                              ()
        | expression CARET expression                           ()
        | expression SHL expression                             ()
        | expression SHR expression                             ()
        (* comparision expression  *)
        | expression EQEQ expression                            ()
        | expression NE expression                              ()
        | expression GT expression                              ()
        | expression LT expression                              ()
        | expression GE expression                              ()
        | expression LE expression                              ()
        (* lazy boolean expression *)
        | expression OROR expression                            ()
        | expression ANDAND expression                          ()
        (* type case expression *)
        | expression AS type_no_bounds                          ()
        (* assignment expression *)
        | expression EQ expression                              ()
        (* compound assignment expression *)
        | expression PLUSEQ expression                          ()
        | expression MINUSEQ expression                         ()
        | expression STAREQ expression                          ()
        | expression SLASHEQ expression                         ()
        | expression PERCENTEQ expression                       ()
        | expression ANDEQ expression                           ()
        | expression OREQ expression                            ()
        | expression CARETEQ expression                         ()
        | expression SHLEQ expression                           ()
        | expression SHREQ expression                           ()

grouped_exp: LPARENT inner_attrs expression RPARENT             ()

array_exp: LBRACKET inner_attrs array_elements RBRACKET         ()
            | LBRACKET inner_attrs RBRACKET                     ()
array_elements: expression SEMI expression                      ()
            | array_elements_expansion maybe_comma              ()
array_elements_expansion: array_elements_expansion 
                        COMMA expression                        ()
                        | expression                            () 

index_exp: expression LBRACKET expression RBRACKET              ()

tuple_exp: LPARENT inner_attrs RPARENT                          ()
            | LPARENT inner_attrs tuple_elements RPARENT        ()
tuple_elements: tuple_elements_expansion                        ()
            | tuple_elements_expansion expression               ()
tuple_elements_expansion: tuple_elements_expansion 
                        expression COMMA                        ()
                        | expression COMMA                      ()

tuple_index_exp: expression DOT INTEGER_LIT                     ()

struct_exp: struct_exp_struct                                   ()
            | struct_exp_tuple                                  ()
            (* path_in_exp is ambigous with path exp *)
            (* | struct_exp_unit                                   () *)
struct_exp_struct: path_in_exp 
                LBRACE inner_attrs struct_exp_fields RBRACE     ()        
                | path_in_exp 
                LBRACE inner_attrs struct_base RBRACE           ()
                | path_in_exp LBRACE inner_attrs RBRACE         ()
struct_exp_fields: struct_exp_fields_expansion                  ()
                | struct_exp_fields_expansion COMMA             ()
                | struct_exp_fields_expansion COMMA struct_base ()
struct_exp_fields_expansion: struct_exp_fields_expansion
                            COMMA struct_exp_field              ()
                            | struct_exp_field                  ()
struct_exp_field: IDENT                                         ()
                | IDENT COLON expression                        ()
                | INTEGER_LIT COLON expression                  ()
struct_base: DOTDOT expression                                  ()
struct_exp_tuple: path_in_exp 
            LPARENT inner_attrs expressions RPARENT 
            %prec LPARENT                                       ()
            | path_in_exp 
            LPARENT inner_attrs expressions COMMA RPARENT 
            %prec LPARENT                                       ()
expressions: expressions COMMA expression                       ()
            | expression                                        ()
struct_exp_unit: path_in_exp                                    ()

call_exp: expression LPARENT RPARENT                            ()
        | expression LPARENT call_params RPARENT                ()
call_params: call_params_expansion                              ()
            | call_params_expansion COMMA                       ()
call_params_expansion: call_params_expansion COMMA expression   ()
                    | expression                                ()

(* method_call_exp: expression DOT path_exp_segment LPARENT RPARENT 
                    %prec LPARENT                               ()
                | expression DOT path_exp_segment LPARENT
                    call_params RPARENT  
                    %prec LPARENT                               () *)

method_call_exp: expression DOT IDENT LPARENT
                    maybe_call_params RPARENT                   ()
                | expression DOT SUPER LPARENT
                    maybe_call_params RPARENT                   ()
                | expression DOT SELFVALUE LPARENT
                    maybe_call_params RPARENT                   ()
                | expression DOT SELFTYPE LPARENT
                    maybe_call_params RPARENT                   ()
                | expression DOT CRATE LPARENT
                    maybe_call_params RPARENT                   ()
                 | expression DOT DOLLAR CRATE LPARENT
                    maybe_call_params RPARENT                   ()
                | expression DOT IDENT PATHSEP generic_args
                    LPARENT maybe_call_params RPARENT           ()
                | expression DOT SUPER PATHSEP generic_args
                    LPARENT maybe_call_params RPARENT           ()
                | expression DOT SELFVALUE PATHSEP generic_args 
                    LPARENT maybe_call_params RPARENT           ()
                | expression DOT SELFTYPE PATHSEP generic_args
                    LPARENT maybe_call_params RPARENT           ()
                | expression DOT CRATE PATHSEP generic_args
                    LPARENT maybe_call_params RPARENT           ()
                | expression DOT DOLLAR CRATE PATHSEP generic_args 
                    LPARENT maybe_call_params RPARENT           ()

maybe_call_params: call_params                                  ()
                |                                               ()

field_exp: expression DOT IDENT                                 ()

closure_exp: OR OR expression                                   ()
            | OR OR RARROW type_no_bounds block_exp             ()
            | MOVE OR OR expression                             ()
            | MOVE OR OR RARROW type_no_bounds block_exp        ()
            | OR closure_parameters OR expression               ()
            | OR closure_parameters OR 
                RARROW type_no_bounds block_exp                 ()
            | MOVE OR closure_parameters OR expression          ()
            | MOVE OR closure_parameters OR 
                RARROW type_no_bounds block_exp                 ()
closure_parameters: closure_param closure_parameters_expansion  ()
                    | closure_param 
                        closure_parameters_expansion COMMA      ()
closure_parameters_expansion: closure_parameters_expansion 
                            COMMA closure_param                 ()
                            |                                   ()
closure_param: patterns                                         ()
                | patterns COLON types                          ()

continue_exp: CONTINUE                                          ()
            | CONTINUE LIFETIME_OR_LABEL                        ()

break_exp: BREAK %prec LOWER_THAN_EXPR                          ()
        | BREAK LIFETIME_OR_LABEL %prec LOWER_THAN_EXPR         ()
        | BREAK expression %prec LOWER_THAN_EXPR                ()
        | BREAK LIFETIME_OR_LABEL expression 
            %prec LOWER_THAN_EXPR                               ()

range_exp: expression DOTDOT expression                         (yaccLog("Range hit"))
        | expression DOTDOT                                     (yaccLog("RangeFrom hit"))
        | DOTDOT expression                                     (yaccLog("RangeTo hit"))
        | DOTDOT                                                (yaccLog("RangeFull hit"))
        | expression DOTDOTEQ expression                        (yaccLog("RangeInclusive hit"))
        | DOTDOTEQ expression                                   (yaccLog("RangeToInclusive hit"))

return_exp: RETURN                                              ()
            | RETURN expression                                 ()

exp_with_block: block_exp                                       ()
            (* | UNSAFE block_exp                                  () *)
            | loop_exp                                          ()
            | if_exp                                            ()
            | if_let_exp                                        ()
            | match_exp                                         ()

loop_exp: LIFETIME_OR_LABEL COLON LOOP block_exp                ()
        | LOOP block_exp                                        ()
        (* | LIFETIME_OR_LABEL WHILE exp_nostruct block_exp        ()
        | WHILE exp_nostruct block_exp                          ()
        | LIFETIME_OR_LABEL WHILE LET patterns EQ exp_nostruct
            block_exp                                           ()
        | WHILE LET patterns EQ exp_nostruct block_exp          ()
        | LIFETIME_OR_LABEL FOR patterns IN exp_nostruct 
            block_exp                                           ()
        | FOR patterns IN exp_nostruct block_exp                ()    *)

if_exp: IF exp_nostruct block_exp                               ()
        | IF exp_nostruct block_exp ELSE block_exp              ()
        | IF exp_nostruct block_exp ELSE if_exp                 ()
        | IF exp_nostruct block_exp ELSE if_let_exp             ()

if_let_exp: IF LET patterns EQ exp_nostruct_nolazybop block_exp ()
        | IF LET patterns EQ exp_nostruct_nolazybop block_exp
            ELSE block_exp                                      ()
        | IF LET patterns EQ exp_nostruct_nolazybop block_exp
            ELSE if_exp                                         ()
        | IF LET patterns EQ exp_nostruct_nolazybop block_exp
            ELSE if_let_exp                                     ()

match_exp: MATCH exp_nostruct LBRACE inner_attrs RBRACE         ()
        | MATCH exp_nostruct 
            LBRACE inner_attrs match_arms RBRACE                ()
match_arms: match_arms_expansion                                ()
            | match_arms_expansion COMMA                        ()
match_arms_expansion: 
                    (* match_arms_expansion 
                        COMMA match_arm FATARROW block_exp      () *)
                    match_arms_expansion 
                        COMMA match_arm FATARROW expression     ()
                    (* | match_arm FATARROW block_exp              () *)
                    | match_arm FATARROW expression             ()
match_arm: outer_attrs match_arm_patterns                       ()
        | outer_attrs match_arm_patterns match_arm_guard        ()
match_arm_patterns: match_arm_patterns OR patterns              ()
                    | OR patterns                               ()
                    | patterns                                  ()
match_arm_guard: IF expression                                  ()


(* ------type------ *)
type_no_bounds: type_path                                       ()
                | LPARENT RPARENT                               ()

(* -----token------- *)
token_ep_delim_kleene_dollar: AS                                ()
            | BREAK                                             ()
            | CONST                                             ()
            | CONTINUE                                          ()
            | CRATE                                             ()
            | ELSE                                              ()
            | ENUM                                              ()
            | EXTERN                                            ()
            | FALSE                                             ()
            | FN                                                ()
            | FOR                                               ()
            | IF                                                ()
            | IMPL                                              ()
            | IN                                                ()
            | LET                                               ()
            | LOOP                                              ()
            | MATCH                                             ()
            | MOD                                               ()
            | MOVE                                              ()
            | MUT                                               ()
            | PUB                                               ()
            | REF                                               ()
            | RETURN                                            ()
            | SELFVALUE                                         ()
            | SELFTYPE                                          ()
            | STATIC                                            ()
            | STRUCT                                            ()
            | SUPER                                             ()
            | TRAIT                                             ()
            | TRUE                                              ()
            | TYPE                                              ()
            | UNSAFE                                            ()
            | USE                                               ()
            | WHERE                                             ()
            | WHILE                                             ()
            | DYN                                               ()
            | ABSTRACT                                          ()
            | BECOME                                            ()
            | BOX                                               ()
            | DO                                                ()
            | FINAL                                             ()
            | MACRO                                             ()
            | OVERRIDE                                          ()
            | PRIV                                              ()
            | TYPEOF                                            ()
            | UNSIZED                                           ()
            | VIRTUAL                                           ()
            | YIELD                                             ()
            | ASYNC                                             ()
            | AWAIT                                             ()
            | TRY                                               ()
            | UNION                                             ()
            | STATICLIFETIME                                    ()
            | IDENT                                             ()
            | CHAR_LIT                                          ()
            | STR_LIT                                           ()
            | RAW_STR_LIT                                       ()
            | BYTE_LIT                                          ()
            | BYTE_STR_LIT                                      ()
            | RAW_BYTE_STR_LIT                                  ()
            | INTEGER_LIT                                       ()
            | TUPLE_INDEX                                       ()
            | FLOAT_LIT                                         ()
            | LIFETIME_OR_LABEL                                 ()
            | LIFETIME_TOKEN                                    ()
            | MINUS                                             ()
            | SLASH                                             ()
            | PERCENT                                           ()
            | CARET                                             ()
            | NOT                                               ()
            | AND                                               ()
            | OR                                                ()
            | ANDAND                                            ()
            | OROR                                              ()
            | SHL                                               ()
            | SHR                                               ()
            | PLUSEQ                                            ()
            | MINUSEQ                                           ()
            | STAREQ                                            ()
            | SLASHEQ                                           ()
            | PERCENTEQ                                         ()
            | CARETEQ                                           ()
            | ANDEQ                                             ()
            | OREQ                                              ()
            | SHLEQ                                             ()
            | SHREQ                                             ()
            | EQ                                                ()
            | EQEQ                                              ()
            | NE                                                ()
            | GT                                                ()
            | LT                                                ()
            | GE                                                ()
            | LE                                                ()
            | AT                                                ()
            | UNDERSCORE                                        ()
            | DOT                                               ()
            | DOTDOT                                            ()
            | DOTDOTDOT                                         ()
            | DOTDOTEQ                                          ()
            | COMMA                                             ()
            | SEMI                                              ()
            | COLON                                             ()
            | PATHSEP                                           ()
            | RARROW                                            ()
            | FATARROW                                          ()
            | POUND                                             ()
            | INNER_DOC_COMMENT                                 ()
            | OUTER_DOC_COMMENT                                 ()
            | SHEBANG                                           ()
            | INTEGER_SUFFIX                                    ()
            | FLOAT_SUFFIX                                      ()
token_ep_delim_kleene: token_ep_delim_kleene_dollar             ()
                    | DOLLAR                                    ()
token_ep_delim_dollar: token_ep_delim_kleene_dollar             ()
                | PLUS                                          ()
                | STAR                                          ()
                | QUESTION                                      ()
token_ep_delim: token_ep_delim_dollar                           ()
                | DOLLAR                                        ()