functor RustLexFun(structure Tokens: Rust_TOKENS)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
STR | BYTE | SUFFIX | R_STR_END | BR_STR_BEGIN | BYTE_STR | LINE_COMMENT | R_STR | LIFE_OR_CHAR | BR_STR_BODY | R_STR_BEGIN | R_STR_BODY | BR_STR | INITIAL | BR_STR_END
    structure UserDeclarations = 
      struct

(* rust.lex *)
(* 
    points:
    handle comments
    handle strings
    error handling
    end-of-file handling
    ...
    %term EOF
    | AS | BREAK | CONST | CONTINUE | CRATE | ELSE | ENUM | EXTERN     
        | FALSE | FN | FOR | IF | IMPL | IN | LET | LOOP | MATCH | MOD | MOVE
        | MUT | PUB | REF | RETURN | SELFVALUE | SELFTYPE | STATIC | STRUCT 
        | SUPER | TRAIT | TRUE | TYPE | UNSAFE | USE | WHERE | WHILE | DYN
    | ABSTRACT | BECOME | BOX | DO | FINAL | MACRO | OVERRIDE
        | PRIV | TYPEOF | UNSIZED | VIRTUAL | YIELD
        | ASYNC | AWAIT | TRY
    | UNION | STATICLIFETIME
    | IDENT of string
    | CHAR_LIT of char 
        | STR_LIT of string | RAW_STR_LIT of string
        | BYTE_LIT of int | BYTE_STR_LIT of string | RAW_BYTE_STR_LIT of string
        | INTEGER_LIT of int | DEC_LIT of int | TUPLE_INDEX of int 
        | BIN_LIT of int | OCT_LIT of int | HEX_LIT of int 
        | FLOAT_LIT of int | FLOAT_EXPONENT of int
    | INTEGER_SUFFIX of string | FLOAT_SUFFIX of string
    | LIFETIME_TOKEN | LIFETIME_OR_LABEL
    | PLUS | MINUS | STAR | SLASH | PERCENT | CARET 
        | NOT | AND | OR | ANDAND | OROR | SHL | SHR
        | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ | CARETEQ | ANDEQ | OREQ
        | SHLEQ | SHREQ | EQ | EQEQ
        | NE | GT | LT | GE | LE
        | AT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ
        | COMMA | SEMI | COLON | PATHSEP | RARROW | FATARROW | POUND | DOLLAR | QUESTION
        | LBRACE | RBRACE | LBRACKET | RBRACKET | LPARENT | RPARENT
*)
(* user declarations *)
open Convert
type pos = int
type svalue = Tokens.svalue 
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token
type lexarg = string
type arg = lexarg

val lin = ErrorMsg.lin
val col = ErrorMsg.col
val eolpos = ref 0
fun error(p1, p2) = ErrorMsg.error p1
fun lexLog(pos, msg) = ErrorMsg.lexLog (pos, msg)

val lsharp = ref 0
val rsharp = ref 0

fun eof(fileName:string) = let val pos = hd(!col) in Tokens.EOF(pos, pos) end

val strList = ref (nil:char list)
val strpos = ref (0:int)
fun strAppend(s:char) = strList := s::(!strList)
fun strMake() = (implode(rev(!strList)) before strList := nil)
fun strPop(nil, _) = nil 
    | strPop(h::t, 0) = h :: t 
    | strPop(h::t, n) = strPop(t, n-1)

fun strip(s, ch) = 
    let
        val chs = rev(String.explode s)
        fun remove(nil) = nil
            | remove(h::t) = if h = ch then remove(t) else h::t
    in
        implode (rev(remove(chs)))
    end

fun toChar(text:string) = 
    let
        val cc = String.explode (text)
        val c = hd(cc)
    in
        (* app print ["char literal: ", Char.toCString c, "\n"]; *)
        c
    end

fun escape(text:string) = 
    let
        val chs = String.explode text

        fun hex2dec (nil, v) = v
            | hex2dec (#"a"::t, v) = hex2dec(t, v*16+10)
            | hex2dec (#"A"::t, v) = hex2dec(t, v*16+10)
            | hex2dec (#"b"::t, v) = hex2dec(t, v*16+11)
            | hex2dec (#"B"::t, v) = hex2dec(t, v*16+11)
            | hex2dec (#"c"::t, v) = hex2dec(t, v*16+12)
            | hex2dec (#"C"::t, v) = hex2dec(t, v*16+12)
            | hex2dec (#"d"::t, v) = hex2dec(t, v*16+13)
            | hex2dec (#"D"::t, v) = hex2dec(t, v*16+13)
            | hex2dec (#"e"::t, v) = hex2dec(t, v*16+14)
            | hex2dec (#"E"::t, v) = hex2dec(t, v*16+14)
            | hex2dec (#"f"::t, v) = hex2dec(t, v*16+15)
            | hex2dec (#"F"::t, v) = hex2dec(t, v*16+15)
            | hex2dec (h::t, v) = hex2dec(t, v*16+ (ord h) - (ord #"0"))
        
        fun unicode (nil, v) = v
            | unicode (#"{"::t, v) = unicode(t, v)
            | unicode (#"}"::t, v) = unicode(t, v)
            | unicode (#"_"::t, v) = unicode(t, v)
            | unicode (h::t, v) = unicode(t, v*16+ (ord h) - (ord #"0"))
        (* 
            This function convert char literal to a string for Char.fromString.
            However, Char.fromString can not work when unicode point is in ordinal range of the alphabet.
        *)
        fun convert (nil) = Char.ord #"\000"
            | convert (#"x"::t) = hex2dec(t, 0)
            | convert (#"u"::t) = unicode(t, 0)
            | convert (#"n"::t) = Char.ord #"\n"
            | convert (#"r"::t) = Char.ord #"\r"
            | convert (#"t"::t) = Char.ord #"\t"
            | convert (#"0"::t) = Char.ord #"\000"
            | convert (#"\092"::t) = Char.ord #"\092"
            | convert (#"'"::t) = Char.ord #"'"
            | convert (#"\""::t) = Char.ord #"\""
            | convert (h::t) = Char.ord (toChar(implode([#"\092", h])))
    in
        case chs of
        (#"\092"::t) => convert(t)
        | _ => 0
    end

fun toInteger(text:string) = case LargeInt.fromString(text) of 
                            SOME v => v
                            | _ => 0
 
fun toFloat(text:string) = case Real.fromString(text) of 
                            SOME v => v
                            | _ => 0.0



      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\t",15),
(#"\v",#"!",15),
(#"#",#"[",15),
(#"]",#"\255",15),
(#"\n",#"\n",16),
(#"\"",#"\"",17),
(#"\\",#"\\",18)], []), ([(#"\^@",#"\b",34),
(#"\v",#"\f",34),
(#"\^N",#"\^_",34),
(#"!",#"&",34),
(#"(",#"[",34),
(#"]",#"\127",34),
(#"\t",#"\t",35),
(#"\r",#"\r",35),
(#" ",#" ",35),
(#"'",#"'",35),
(#"\128",#"\255",35),
(#"\n",#"\n",36),
(#"\\",#"\\",37)], []), ([(#"\^@",#"@",47),
(#"[",#"^",47),
(#"`",#"`",47),
(#"{",#"\255",47),
(#"A",#"Z",48),
(#"_",#"_",48),
(#"a",#"z",48)], []), ([(#"\^@",#"\"",50),
(#"$",#"\255",50),
(#"#",#"#",51)], []), ([(#"\^@",#"\t",52),
(#"\v",#"!",52),
(#"$",#"\255",52),
(#"\n",#"\n",53),
(#"\"",#"\"",54),
(#"#",#"#",55)], []), ([(#"\^@",#"\b",56),
(#"\v",#"\f",56),
(#"\^N",#"\^_",56),
(#"!",#"!",56),
(#"#",#"[",56),
(#"]",#"\127",56),
(#"\t",#"\t",57),
(#"\r",#"\r",57),
(#" ",#" ",57),
(#"\128",#"\255",57),
(#"\n",#"\n",58),
(#"\"",#"\"",59),
(#"\\",#"\\",60)], []), ([(#"\^@",#"\t",67),
(#"\v",#"\f",67),
(#"\^N",#"\255",67),
(#"\n",#"\n",68),
(#"\r",#"\r",69)], []), ([(#"\^@",#"\t",70),
(#"\v",#"!",70),
(#"#",#"\255",70),
(#"\n",#"\n",71),
(#"\"",#"\"",72)], []), ([(#"\^@",#"\t",73),
(#"\v",#"@",73),
(#"[",#"[",73),
(#"]",#"^",73),
(#"`",#"`",73),
(#"{",#"\127",73),
(#"A",#"Z",74),
(#"_",#"_",74),
(#"a",#"z",74),
(#"\\",#"\\",75),
(#"\128",#"\255",76)], []), ([(#"\^@",#"\t",100),
(#"\v",#"!",100),
(#"#",#"\127",100),
(#"\n",#"\n",101),
(#"\"",#"\"",102),
(#"\128",#"\255",103)], []), ([(#"\^@",#"\t",105),
(#"\v",#"!",105),
(#"$",#"\255",105),
(#"\n",#"\n",106),
(#"\"",#"\"",107),
(#"#",#"#",108)], []), ([(#"\^@",#"\t",109),
(#"\v",#"!",109),
(#"#",#"\255",109),
(#"\n",#"\n",110),
(#"\"",#"\"",111)], []), ([(#"\^@",#"\t",113),
(#"\v",#"!",113),
(#"#",#"\127",113),
(#"\n",#"\n",114),
(#"\"",#"\"",115),
(#"\128",#"\255",116)], []), ([(#"\^@",#"\b",117),
(#"\v",#"\f",117),
(#"\^N",#"\^_",117),
(#"\\",#"\\",117),
(#"`",#"`",117),
(#"~",#"\255",117),
(#"\t",#"\t",118),
(#" ",#" ",118),
(#"\n",#"\n",119),
(#"\r",#"\r",120),
(#"!",#"!",121),
(#"\"",#"\"",122),
(#"#",#"#",123),
(#"$",#"$",124),
(#"%",#"%",125),
(#"&",#"&",126),
(#"'",#"'",127),
(#"(",#"(",128),
(#")",#")",129),
(#"*",#"*",130),
(#"+",#"+",131),
(#",",#",",132),
(#"-",#"-",133),
(#".",#".",134),
(#"/",#"/",135),
(#"0",#"0",136),
(#"1",#"9",137),
(#":",#":",138),
(#";",#";",139),
(#"<",#"<",140),
(#"=",#"=",141),
(#">",#">",142),
(#"?",#"?",143),
(#"@",#"@",144),
(#"A",#"R",145),
(#"T",#"Z",145),
(#"g",#"h",145),
(#"j",#"k",145),
(#"n",#"n",145),
(#"q",#"q",145),
(#"x",#"x",145),
(#"z",#"z",145),
(#"S",#"S",146),
(#"[",#"[",147),
(#"]",#"]",148),
(#"^",#"^",149),
(#"_",#"_",150),
(#"a",#"a",151),
(#"b",#"b",152),
(#"c",#"c",153),
(#"d",#"d",154),
(#"e",#"e",155),
(#"f",#"f",156),
(#"i",#"i",157),
(#"l",#"l",158),
(#"m",#"m",159),
(#"o",#"o",160),
(#"p",#"p",161),
(#"r",#"r",162),
(#"s",#"s",163),
(#"t",#"t",164),
(#"u",#"u",165),
(#"v",#"v",166),
(#"w",#"w",167),
(#"y",#"y",168),
(#"{",#"{",169),
(#"|",#"|",170),
(#"}",#"}",171)], [1]), ([(#"\^@",#"\"",397),
(#"$",#"\255",397),
(#"#",#"#",398)], []), ([], [78]), ([], [77]), ([], [71, 78]), ([(#"\^@",#"\t",19),
(#"\v",#"\^_",19),
(#"!",#"!",19),
(#"#",#"&",19),
(#"(",#"/",19),
(#"1",#"[",19),
(#"]",#"m",19),
(#"o",#"q",19),
(#"s",#"s",19),
(#"v",#"w",19),
(#"y",#"\255",19),
(#"\n",#"\n",20),
(#" ",#" ",21),
(#"0",#"0",21),
(#"\\",#"\\",21),
(#"n",#"n",21),
(#"r",#"r",21),
(#"t",#"t",21),
(#"\"",#"\"",22),
(#"'",#"'",22),
(#"u",#"u",23),
(#"x",#"x",24)], [78]), ([], [76]), ([], [75, 76]), ([], [73]), ([], [72]), ([(#"{",#"{",26)], [76]), ([(#"0",#"7",25)], [76]), ([(#"0",#"9",21),
(#"A",#"F",21),
(#"a",#"f",21)], []), ([(#"0",#"9",27),
(#"A",#"F",27),
(#"a",#"f",27)], []), ([(#"0",#"9",28),
(#"A",#"F",28),
(#"a",#"f",28),
(#"_",#"_",27),
(#"}",#"}",29)], []), ([(#"0",#"9",30),
(#"A",#"F",30),
(#"a",#"f",30),
(#"_",#"_",28),
(#"}",#"}",29)], []), ([], [74]), ([(#"0",#"9",31),
(#"A",#"F",31),
(#"a",#"f",31),
(#"_",#"_",30),
(#"}",#"}",29)], []), ([(#"0",#"9",32),
(#"A",#"F",32),
(#"a",#"f",32),
(#"_",#"_",31),
(#"}",#"}",29)], []), ([(#"0",#"9",33),
(#"A",#"F",33),
(#"a",#"f",33),
(#"_",#"_",32),
(#"}",#"}",29)], []), ([(#"_",#"_",33),
(#"}",#"}",29)], []), ([(#"'",#"'",46)], []), ([(#"'",#"'",45)], []), ([(#"'",#"'",44)], []), ([(#" ",#" ",38),
(#"0",#"0",38),
(#"\\",#"\\",38),
(#"n",#"n",38),
(#"r",#"r",38),
(#"t",#"t",38),
(#"'",#"'",39),
(#"x",#"x",40)], []), ([(#"'",#"'",43)], []), ([(#"'",#"'",42)], [98]), ([(#"0",#"9",41),
(#"A",#"F",41),
(#"a",#"f",41)], []), ([(#"0",#"9",38),
(#"A",#"F",38),
(#"a",#"f",38)], []), ([], [94]), ([], [95]), ([], [97]), ([], [98]), ([], [96, 98]), ([], [6, 7]), ([(#"0",#"9",49),
(#"A",#"Z",49),
(#"_",#"_",49),
(#"a",#"z",49)], [5, 6, 7]), ([(#"0",#"9",49),
(#"A",#"Z",49),
(#"_",#"_",49),
(#"a",#"z",49)], [5]), ([], [92]), ([], [91]), ([], [117]), ([], [116]), ([], [115, 117]), ([], [114, 117]), ([], [101, 107]), ([], [107]), ([], [106]), ([], [100, 107]), ([(#"\^@",#"\t",61),
(#"\v",#"\^_",61),
(#"!",#"!",61),
(#"#",#"&",61),
(#"(",#"/",61),
(#"1",#"[",61),
(#"]",#"m",61),
(#"o",#"q",61),
(#"s",#"s",61),
(#"u",#"w",61),
(#"y",#"\255",61),
(#"\n",#"\n",62),
(#" ",#" ",63),
(#"0",#"0",63),
(#"\\",#"\\",63),
(#"n",#"n",63),
(#"r",#"r",63),
(#"t",#"t",63),
(#"\"",#"\"",64),
(#"x",#"x",65)], [101, 107]), ([], [105]), ([], [104, 105]), ([], [103]), ([], [102]), ([(#"0",#"9",66),
(#"A",#"F",66),
(#"a",#"f",66)], [105]), ([(#"0",#"9",63),
(#"A",#"F",63),
(#"a",#"f",63)], []), ([], [3]), ([], [4]), ([(#"\n",#"\n",68)], [3, 4]), ([], [82]), ([], [81]), ([], [80, 82]), ([(#"'",#"'",77)], []), ([(#"'",#"'",77),
(#"0",#"9",99),
(#"A",#"Z",99),
(#"_",#"_",99),
(#"a",#"z",99)], [64]), ([(#" ",#" ",82),
(#"0",#"0",82),
(#"\\",#"\\",82),
(#"n",#"n",82),
(#"r",#"r",82),
(#"t",#"t",82),
(#"\"",#"\"",83),
(#"'",#"'",84),
(#"u",#"u",85),
(#"x",#"x",86)], []), ([(#"'",#"'",77),
(#"\128",#"\255",78)], []), ([], [68]), ([(#"'",#"'",79),
(#"\128",#"\255",80)], []), ([], [69]), ([(#"'",#"'",79),
(#"\128",#"\255",81)], []), ([(#"'",#"'",79)], []), ([(#"'",#"'",98)], []), ([(#"'",#"'",97)], []), ([(#"'",#"'",97)], [68]), ([(#"{",#"{",88)], []), ([(#"0",#"7",87)], []), ([(#"0",#"9",82),
(#"A",#"F",82),
(#"a",#"f",82)], []), ([(#"0",#"9",89),
(#"A",#"F",89),
(#"a",#"f",89)], []), ([(#"0",#"9",90),
(#"A",#"F",90),
(#"a",#"f",90),
(#"_",#"_",89),
(#"}",#"}",91)], []), ([(#"0",#"9",93),
(#"A",#"F",93),
(#"a",#"f",93),
(#"_",#"_",90),
(#"}",#"}",91)], []), ([(#"'",#"'",92)], []), ([], [67]), ([(#"0",#"9",94),
(#"A",#"F",94),
(#"a",#"f",94),
(#"_",#"_",93),
(#"}",#"}",91)], []), ([(#"0",#"9",95),
(#"A",#"F",95),
(#"a",#"f",95),
(#"_",#"_",94),
(#"}",#"}",91)], []), ([(#"0",#"9",96),
(#"A",#"F",96),
(#"a",#"f",96),
(#"_",#"_",95),
(#"}",#"}",91)], []), ([(#"_",#"_",96),
(#"}",#"}",91)], []), ([], [65]), ([], [66]), ([(#"0",#"9",99),
(#"A",#"Z",99),
(#"_",#"_",99),
(#"a",#"z",99)], [64]), ([], [120, 121]), ([], [119, 120]), ([(#"#",#"#",104)], [120, 121]), ([], [121]), ([], [118]), ([], [87]), ([], [86]), ([], [85, 87]), ([], [84, 87]), ([], [90]), ([], [89]), ([(#"#",#"#",112)], [90]), ([], [88]), ([], [111, 112]), ([], [110, 111]), ([], [109, 111, 112]), ([], [112]), ([], [176]), ([(#"\t",#"\t",396),
(#" ",#" ",396)], [1, 176]), ([], [0]), ([(#"\n",#"\n",119)], [0, 176]), ([(#"=",#"=",395)], [157, 176]), ([], [70, 176]), ([], [167, 176]), ([], [168, 176]), ([(#"=",#"=",394)], [155, 176]), ([(#"&",#"&",392),
(#"=",#"=",393)], [158, 176]), ([], [62, 176]), ([], [174, 176]), ([], [175, 176]), ([(#"=",#"=",391)], [153, 176]), ([(#"=",#"=",390)], [151, 176]), ([], [164, 176]), ([(#"=",#"=",388),
(#">",#">",389)], [152, 176]), ([(#".",#".",385)], [150, 176]), ([(#"/",#"/",383),
(#"=",#"=",384)], [154, 176]), ([(#".",#".",358),
(#"0",#"9",359),
(#"_",#"_",359),
(#"E",#"E",360),
(#"e",#"e",360),
(#"b",#"b",377),
(#"f",#"f",361),
(#"i",#"i",362),
(#"u",#"u",362),
(#"o",#"o",378),
(#"x",#"x",379)], [124, 176]), ([(#".",#".",358),
(#"0",#"9",359),
(#"_",#"_",359),
(#"E",#"E",360),
(#"e",#"e",360),
(#"f",#"f",361),
(#"i",#"i",362),
(#"u",#"u",362)], [124, 176]), ([(#":",#":",357)], [166, 176]), ([], [165, 176]), ([(#"<",#"<",354),
(#"=",#"=",355)], [162, 176]), ([(#"=",#"=",352),
(#">",#">",353)], [160, 176]), ([(#"=",#"=",349),
(#">",#">",350)], [161, 176]), ([], [169, 176]), ([], [163, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",346)], [61, 176]), ([], [172, 176]), ([], [173, 176]), ([(#"=",#"=",345)], [156, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [8, 61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"a",174),
(#"c",#"r",174),
(#"t",#"v",174),
(#"x",#"z",174),
(#"b",#"b",330),
(#"s",#"s",331),
(#"w",#"w",332)], [61, 176]), ([(#"\"",#"\"",315),
(#"'",#"'",316),
(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"n",174),
(#"p",#"q",174),
(#"s",#"z",174),
(#"e",#"e",317),
(#"o",#"o",318),
(#"r",#"r",319)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"q",174),
(#"s",#"z",174),
(#"o",#"o",302),
(#"r",#"r",303)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"x",174),
(#"z",#"z",174),
(#"o",#"o",299),
(#"y",#"y",300)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"m",174),
(#"o",#"w",174),
(#"y",#"z",174),
(#"l",#"l",288),
(#"n",#"n",289),
(#"x",#"x",290)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"h",174),
(#"j",#"m",174),
(#"p",#"z",174),
(#"a",#"a",277),
(#"i",#"i",278),
(#"n",#"n",279),
(#"o",#"o",280)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"e",174),
(#"g",#"l",174),
(#"o",#"z",174),
(#"f",#"f",272),
(#"m",#"m",273),
(#"n",#"n",274)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"n",174),
(#"p",#"z",174),
(#"e",#"e",267),
(#"o",#"o",268)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"n",174),
(#"p",#"t",174),
(#"v",#"z",174),
(#"a",#"a",254),
(#"o",#"o",255),
(#"u",#"u",256)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"u",174),
(#"w",#"z",174),
(#"v",#"v",247)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"t",174),
(#"v",#"z",174),
(#"r",#"r",242),
(#"u",#"u",243)], [61, 176]), ([(#"\"",#"\"",234),
(#"#",#"#",235),
(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",236)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"s",174),
(#"v",#"z",174),
(#"e",#"e",218),
(#"t",#"t",219),
(#"u",#"u",220)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"x",174),
(#"z",#"z",174),
(#"r",#"r",206),
(#"y",#"y",207)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"r",174),
(#"t",#"z",174),
(#"n",#"n",192),
(#"s",#"s",193)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",186)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"g",174),
(#"i",#"z",174),
(#"h",#"h",179)], [61, 176]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",175)], [61, 176]), ([], [170, 176]), ([(#"=",#"=",172),
(#"|",#"|",173)], [159, 176]), ([], [171, 176]), ([], [141]), ([], [131]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",176)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",177)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"c",174),
(#"e",#"z",174),
(#"d",#"d",178)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [56, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"h",174),
(#"j",#"z",174),
(#"e",#"e",180),
(#"i",#"i",181)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",184)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",182)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",183)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [43, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",185)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [42, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",187)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",188)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"t",174),
(#"v",#"z",174),
(#"u",#"u",189)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"z",174),
(#"a",#"a",190)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",191)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [55, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"r",174),
(#"t",#"z",174),
(#"i",#"i",195),
(#"s",#"s",196)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",194)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [41, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"z",174),
(#"o",#"o",204)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"h",174),
(#"j",#"z",174),
(#"a",#"a",197),
(#"i",#"i",198)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"e",174),
(#"g",#"z",174),
(#"f",#"f",202)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"y",174),
(#"z",#"z",199)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",200)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"c",174),
(#"e",#"z",174),
(#"d",#"d",201)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [54, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",203)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [40, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",205)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [60, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"t",174),
(#"v",#"x",174),
(#"z",#"z",174),
(#"a",#"a",212),
(#"u",#"u",213),
(#"y",#"y",214)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"o",174),
(#"q",#"z",174),
(#"p",#"p",208)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",209)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"z",174),
(#"o",#"o",210)], [39, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"e",174),
(#"g",#"z",174),
(#"f",#"f",211)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [53, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",216)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",215)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [59, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [38, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",217)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [37, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",232)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"q",174),
(#"s",#"z",174),
(#"a",#"a",224),
(#"r",#"r",225)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"o",174),
(#"q",#"z",174),
(#"p",#"p",221)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",222)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",223)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [36, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",229)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"t",174),
(#"v",#"z",174),
(#"u",#"u",226)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"z",174),
(#"c",#"c",227)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",228)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [35, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",230)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"z",174),
(#"c",#"c",231)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [34, 61, 63]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"e",174),
(#"g",#"z",174),
(#"f",#"f",233)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [32, 61]), ([], [79]), ([], [83]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"e",174),
(#"g",#"s",174),
(#"u",#"z",174),
(#"f",#"f",237),
(#"t",#"t",238)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [30, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"t",174),
(#"v",#"z",174),
(#"u",#"u",239)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",240)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",241)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [31, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",245)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"a",174),
(#"c",#"z",174),
(#"b",#"b",244)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [29, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"u",174),
(#"w",#"z",174),
(#"v",#"v",246)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [52, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",248)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",249)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",250)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",251)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"c",174),
(#"e",#"z",174),
(#"d",#"d",252)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",253)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [51, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"s",174),
(#"u",#"z",174),
(#"c",#"c",261),
(#"t",#"t",262)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"c",174),
(#"e",#"u",174),
(#"w",#"z",174),
(#"d",#"d",258),
(#"v",#"v",259)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",257)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [28, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [26, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",260)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [27, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",265)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"z",174),
(#"c",#"c",263)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"g",174),
(#"i",#"z",174),
(#"h",#"h",264)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [25, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"z",174),
(#"o",#"o",266)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [50, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",271)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"z",174),
(#"o",#"o",269)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"o",174),
(#"q",#"z",174),
(#"p",#"p",270)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [24, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [23, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [20, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"o",174),
(#"q",#"z",174),
(#"p",#"p",275)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [22, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",276)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [21, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",285)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",282)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [18, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",281)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [19, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"z",174),
(#"a",#"a",283)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",284)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [49, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"r",174),
(#"t",#"z",174),
(#"s",#"s",286)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",287)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [17, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"r",174),
(#"t",#"z",174),
(#"s",#"s",297)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"t",174),
(#"v",#"z",174),
(#"u",#"u",295)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",291)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",292)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",293)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",294)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [16, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"l",174),
(#"n",#"z",174),
(#"m",#"m",296)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [15, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",298)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [14, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [48, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",301)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [44, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",307)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"z",174),
(#"a",#"a",304)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",305)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",306)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [13, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"r",174),
(#"u",#"z",174),
(#"s",#"s",308),
(#"t",#"t",309)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",314)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",310)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",311)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"t",174),
(#"v",#"z",174),
(#"u",#"u",312)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",313)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [12, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [11, 61]), ([], [99]), ([], [93]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"z",174),
(#"c",#"c",326)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"w",174),
(#"y",#"z",174),
(#"x",#"x",325)], [61]), ([(#"\"",#"\"",320),
(#"#",#"#",321),
(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",322)], [61]), ([], [108]), ([], [113]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"z",174),
(#"a",#"a",323)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"j",174),
(#"l",#"z",174),
(#"k",#"k",324)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [10, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [47, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"n",174),
(#"p",#"z",174),
(#"o",#"o",327)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"l",174),
(#"n",#"z",174),
(#"m",#"m",328)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"d",174),
(#"f",#"z",174),
(#"e",#"e",329)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [46, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"r",174),
(#"t",#"z",174),
(#"s",#"s",339)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"x",174),
(#"z",#"z",174),
(#"y",#"y",336)], [9, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"z",174),
(#"a",#"a",333)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"h",174),
(#"j",#"z",174),
(#"i",#"i",334)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",335)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [58, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"m",174),
(#"o",#"z",174),
(#"n",#"n",337)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"z",174),
(#"c",#"c",338)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [57, 61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",340)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"q",174),
(#"s",#"z",174),
(#"r",#"r",341)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"b",#"z",174),
(#"a",#"a",342)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"b",174),
(#"d",#"z",174),
(#"c",#"c",343)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"s",174),
(#"u",#"z",174),
(#"t",#"t",344)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [45, 61]), ([], [139]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"k",174),
(#"m",#"z",174),
(#"l",#"l",347)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"e",174),
(#"g",#"z",174),
(#"f",#"f",348)], [61]), ([(#"0",#"9",174),
(#"A",#"Z",174),
(#"_",#"_",174),
(#"a",#"z",174)], [33, 61]), ([], [144]), ([(#"=",#"=",351)], [133]), ([], [127]), ([], [142]), ([], [147]), ([(#"=",#"=",356)], [132]), ([], [145]), ([], [126]), ([], [149]), ([(#"0",#"9",376)], [125]), ([(#".",#".",358),
(#"0",#"9",359),
(#"_",#"_",359),
(#"E",#"E",360),
(#"e",#"e",360),
(#"f",#"f",361),
(#"i",#"i",362),
(#"u",#"u",362)], [124]), ([(#"+",#"+",374),
(#"-",#"-",374),
(#"_",#"_",374),
(#"0",#"9",375)], []), ([(#"3",#"3",371),
(#"6",#"6",372)], []), ([(#"1",#"1",363),
(#"3",#"3",364),
(#"6",#"6",365),
(#"8",#"8",366),
(#"s",#"s",367)], []), ([(#"2",#"2",370),
(#"6",#"6",366)], []), ([(#"2",#"2",366)], []), ([(#"4",#"4",366)], []), ([], [124]), ([(#"i",#"i",368)], []), ([(#"z",#"z",369)], []), ([(#"e",#"e",366)], []), ([(#"8",#"8",366)], []), ([(#"2",#"2",373)], []), ([(#"4",#"4",373)], []), ([], [125]), ([(#"0",#"9",375),
(#"_",#"_",374)], []), ([(#"0",#"9",375),
(#"_",#"_",375),
(#"f",#"f",361)], [125]), ([(#"0",#"9",376),
(#"_",#"_",376),
(#"E",#"E",360),
(#"e",#"e",360),
(#"f",#"f",361)], [125]), ([(#"0",#"1",382),
(#"_",#"_",377)], []), ([(#"0",#"7",381),
(#"_",#"_",378)], []), ([(#"0",#"9",380),
(#"A",#"F",380),
(#"a",#"f",380),
(#"_",#"_",379)], []), ([(#"0",#"9",380),
(#"A",#"F",380),
(#"_",#"_",380),
(#"a",#"f",380),
(#"i",#"i",362),
(#"u",#"u",362)], [124]), ([(#"0",#"7",381),
(#"_",#"_",381),
(#"i",#"i",362),
(#"u",#"u",362)], [124]), ([(#"0",#"1",382),
(#"_",#"_",382),
(#"i",#"i",362),
(#"u",#"u",362)], [124]), ([], [2]), ([], [137]), ([(#".",#".",386),
(#"=",#"=",387)], [148]), ([], [128]), ([], [129]), ([], [135]), ([], [146]), ([], [134]), ([], [136]), ([], [130]), ([], [140]), ([], [138]), ([], [143]), ([(#"\t",#"\t",396),
(#" ",#" ",396)], [1]), ([], [123]), ([], [122])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as (fileName:string)) () = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction2 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); YYBEGIN LINE_COMMENT; continue())
      end
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN; continue()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; continue()))
fun yyAction6 (strm, lastMatch : yymatch) = let
      val oldStrm = !(yystrm)
      fun REJECT () = (yystrm := oldStrm; yystuck(lastMatch))
      in
        yystrm := strm; (YYBEGIN INITIAL; REJECT())
      end
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "break"); YYBEGIN INITIAL; continue()))
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.UNDERSCORE(yypos, yypos+size yytext))
      end
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.AS(yypos, yypos+size yytext))
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.BREAK(yypos, yypos+size yytext))
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.CONST(yypos, yypos+size yytext))
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.CONTINUE(yypos, yypos+size yytext))
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.CARET(yypos, yypos+size yytext))
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ELSE(yypos, yypos+size yytext))
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ENUM(yypos, yypos+size yytext))
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.EXTERN(yypos, yypos+size yytext))
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FALSE(yypos, yypos+size yytext))
      end
fun yyAction18 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FN(yypos, yypos+size yytext))
      end
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FOR(yypos, yypos+size yytext))
      end
fun yyAction20 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IF(yypos, yypos+size yytext))
      end
fun yyAction21 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IMPL(yypos, yypos+size yytext))
      end
fun yyAction22 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IN(yypos, yypos+size yytext))
      end
fun yyAction23 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.LET(yypos, yypos+size yytext))
      end
fun yyAction24 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.LOOP(yypos, yypos+size yytext))
      end
fun yyAction25 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MATCH(yypos, yypos+size yytext))
      end
fun yyAction26 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MOD(yypos, yypos+size yytext))
      end
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MOVE(yypos, yypos+size yytext))
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MUT(yypos, yypos+size yytext))
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.PUB(yypos, yypos+size yytext))
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.REF(yypos, yypos+size yytext))
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.RETURN(yypos, yypos+size yytext))
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.SELFVALUE(yypos, yypos+size yytext))
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.SELFTYPE(yypos, yypos+size yytext))
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.STATIC(yypos, yypos+size yytext))
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.STRUCT(yypos, yypos+size yytext))
      end
fun yyAction36 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.SUPER(yypos, yypos+size yytext))
      end
fun yyAction37 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TRAIT(yypos, yypos+size yytext))
      end
fun yyAction38 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TRUE(yypos, yypos+size yytext))
      end
fun yyAction39 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TYPE(yypos, yypos+size yytext))
      end
fun yyAction40 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.UNSAFE(yypos, yypos+size yytext))
      end
fun yyAction41 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.USE(yypos, yypos+size yytext))
      end
fun yyAction42 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.WHERE(yypos, yypos+size yytext))
      end
fun yyAction43 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.WHILE(yypos, yypos+size yytext))
      end
fun yyAction44 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.DYN(yypos, yypos+size yytext))
      end
fun yyAction45 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ABSTRACT(yypos, yypos+size yytext))
      end
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.BECOME(yypos, yypos+size yytext))
      end
fun yyAction47 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.BOX(yypos, yypos+size yytext))
      end
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.DO(yypos, yypos+size yytext))
      end
fun yyAction49 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FINAL(yypos, yypos+size yytext))
      end
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MACRO(yypos, yypos+size yytext))
      end
fun yyAction51 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.OVERRIDE(yypos, yypos+size yytext))
      end
fun yyAction52 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.PRIV(yypos, yypos+size yytext))
      end
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TYPEOF(yypos, yypos+size yytext))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.UNSIZED(yypos, yypos+size yytext))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.VIRTUAL(yypos, yypos+size yytext))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.YIELD(yypos, yypos+size yytext))
      end
fun yyAction57 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ASYNC(yypos, yypos+size yytext))
      end
fun yyAction58 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.AWAIT(yypos, yypos+size yytext))
      end
fun yyAction59 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TRY(yypos, yypos+size yytext))
      end
fun yyAction60 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.UNION(yypos, yypos+size yytext))
      end
fun yyAction61 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IDENT(yytext, yypos, yypos+size yytext))
      end
fun yyAction62 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN LIFE_OR_CHAR; lexLog(yypos, "<Char>"); continue()))
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); Tokens.STATICLIFETIME(yypos, yypos+size yytext))
      end
fun yyAction64 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext);
                                        (* lifetime_token or loop_label *)
                                        Tokens.LIFETIME(yytext, yypos, yypos-1+size yytext); continue())
      end
fun yyAction65 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(escape(strip(yytext, #"'")), yypos, yypos-1+size yytext); continue())
      end
fun yyAction66 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(escape(strip(yytext, #"'")), yypos, yypos-1+size yytext); continue())
      end
fun yyAction67 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(escape(strip(yytext, #"'")), yypos, yypos-1+size yytext); continue())
      end
fun yyAction68 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(Char.ord(toChar(strip(yytext, #"'"))), yypos, yypos-1+size yytext); continue())
      end
fun yyAction69 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext);
                                        Tokens.CHAR_LIT(decodeChar(strip(yytext, #"'"), UTF8), yypos, yypos-1+size yytext); continue())
      end
fun yyAction70 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<String>"); continue()))
fun yyAction71 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.STR_LIT(strMake(), !strpos, yypos); continue()))
fun yyAction72 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(Char.chr(escape(yytext))); continue())
      end
fun yyAction73 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(Char.chr(escape(yytext))); continue())
      end
fun yyAction74 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                (* here is a bug. This will raise a exception 
                                when unicode point is bigger than 255 *)
                                strAppend(Char.chr(escape(yytext))); 
                                continue()
                            )
      end
fun yyAction75 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "String \\n"); lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction76 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal escape[STR] " ^ yytext); continue())
      end
fun yyAction77 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(toChar(yytext)); lin := !lin+1; col := yypos :: !col; continue())
      end
fun yyAction78 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar(yytext)); continue())
      end
fun yyAction79 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN R_STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<Raw string>"); continue()))
fun yyAction80 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.RAW_STR_LIT(strMake(), !strpos, yypos)))
fun yyAction81 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction82 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction83 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN R_STR_BEGIN; lsharp := 1; rsharp := 0; lexLog(yypos, "<Raw string(#)>"); continue()))
fun yyAction84 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lsharp := !lsharp+1; continue()))
fun yyAction85 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN R_STR_BODY; continue()))
fun yyAction86 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; 
                                ErrorMsg.error yypos ("illegal character[R_STR_BEGIN] " ^ yytext);
                                continue())
      end
fun yyAction87 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[R_STR_BEGIN] " ^ yytext); continue())
      end
fun yyAction88 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                app strAppend [#"\"", #"#"];
                                rsharp := 1;
                                if !rsharp = !lsharp then
                                    (YYBEGIN INITIAL;
                                    strList := strPop(!strList, !rsharp+1);
                                    lexLog(!strpos,strMake());
                                    Tokens.RAW_STR_LIT(strMake(), !strpos, yypos))
                                else
                                    (YYBEGIN R_STR_END;
                                    continue())
                            ))
fun yyAction89 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction90 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction91 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                strAppend(toChar yytext);
                                rsharp := !rsharp+1;
                                if !lsharp = !rsharp then
                                    (YYBEGIN INITIAL;
                                    strList := strPop(!strList, !rsharp+1);
                                    lexLog(!strpos,strMake());
                                    Tokens.RAW_STR_LIT(strMake(), !strpos, yypos))
                                else
                                    (continue())
                            )
      end
fun yyAction92 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                strAppend(toChar yytext);
                                YYBEGIN R_STR_BODY;
                                rsharp := 0;
                                continue()
                            )
      end
fun yyAction93 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BYTE; lexLog(yypos, "<Byte char>"); continue()))
fun yyAction94 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                YYBEGIN INITIAL; 
                                lexLog(yypos, yytext); 
                                Tokens.BYTE_LIT(escape(strip(yytext, #"'")), yypos, yypos+size yytext)
                            )
      end
fun yyAction95 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                YYBEGIN INITIAL; 
                                lexLog(yypos, yytext); 
                                Tokens.BYTE_LIT(escape(strip(yytext, #"'")), yypos, yypos+size yytext)
                            )
      end
fun yyAction96 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                YYBEGIN INITIAL; 
                                lexLog(yypos, yytext);
                                Tokens.BYTE_LIT(Char.ord(toChar(strip(yytext, #"'"))), yypos, yypos+size yytext)
                            )
      end
fun yyAction97 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction98 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; ErrorMsg.error yypos ("illegal character[BYTE] " ^ yytext); continue())
      end
fun yyAction99 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BYTE_STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<Byte string>"); continue()))
fun yyAction100 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.BYTE_STR_LIT(strMake(), !strpos, yypos); continue()))
fun yyAction101 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar(yytext)); continue())
      end
fun yyAction102 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(Char.chr(escape(yytext))); continue())
      end
fun yyAction103 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(Char.chr(escape(yytext))); continue())
      end
fun yyAction104 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "String \\n"); lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction105 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal escape[BYTE_STR] " ^ yytext); continue())
      end
fun yyAction106 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(toChar(yytext)); lin := !lin+1; col := yypos :: !col; continue())
      end
fun yyAction107 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar(yytext)); continue())
      end
fun yyAction108 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BR_STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<Raw byte string>"); continue()))
fun yyAction109 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.RAW_BYTE_STR_LIT(strMake(), !strpos, yypos)))
fun yyAction110 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction111 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction112 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[BR_STR] " ^ yytext); continue())
      end
fun yyAction113 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BR_STR_BEGIN; lsharp := 1; rsharp := 0; lexLog(yypos, "<Raw byte string(#)>"); continue()))
fun yyAction114 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lsharp := !lsharp+1; continue()))
fun yyAction115 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BR_STR_BODY; continue()))
fun yyAction116 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; 
                                     ErrorMsg.error yypos ("illegal character[BR_STR_BEGIN] " ^ yytext);
                                    continue())
      end
fun yyAction117 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[BR_STR_BEGIN] " ^ yytext); continue())
      end
fun yyAction118 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                app strAppend [#"\"", #"#"];
                                rsharp := 1;
                                if !rsharp = !lsharp then
                                    (YYBEGIN INITIAL;
                                    strList := strPop(!strList, !rsharp+1);
                                    lexLog(!strpos,strMake());
                                    Tokens.RAW_BYTE_STR_LIT(strMake(), !strpos, yypos))
                                else
                                    (YYBEGIN BR_STR_END;
                                    continue())
                            ))
fun yyAction119 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction120 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction121 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[BR_STR_BODY] " ^ yytext); continue())
      end
fun yyAction122 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                    strAppend(toChar yytext);
                                    rsharp := !rsharp+1;
                                    if !lsharp = !rsharp then
                                        (YYBEGIN INITIAL;
                                        strList := strPop(!strList, !rsharp+1);
                                        lexLog(!strpos,strMake());
                                        Tokens.RAW_STR_LIT(strMake(), !strpos, yypos))
                                    else
                                        (continue())
                            )
      end
fun yyAction123 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                (if (toChar yytext) < #"\128" then
                                    strAppend(toChar yytext)
                                else
                                    (ErrorMsg.error yypos ("illegal character[BR_STR_END] " ^ yytext))
                                );
                                (
                                    if (toChar yytext) = #"\n" then 
                                        (lin := !lin + 1; col := yypos :: !col)
                                    else
                                        ()
                                );
                                YYBEGIN BR_STR_BODY;
                                rsharp := 0;
                                continue()
                            )
      end
fun yyAction124 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                lexLog(yypos, "<Integer> "^yytext); 
                                Tokens.INTEGER_LIT(toInteger(yytext), yypos, yypos+size yytext)
                            )
      end
fun yyAction125 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                lexLog(yypos, "<Float> "^yytext); 
                                Tokens.FLOAT_LIT(toFloat(yytext), yypos, yypos+size yytext)
                            )
      end
fun yyAction126 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SHLEQ(yypos, yypos+size yytext))
      end
fun yyAction127 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SHREQ(yypos, yypos+size yytext))
      end
fun yyAction128 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.DOTDOTDOT(yypos, yypos+size yytext))
      end
fun yyAction129 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.DOTDOTEQ(yypos, yypos+size yytext))
      end
fun yyAction130 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.ANDAND(yypos, yypos+size yytext))
      end
fun yyAction131 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.OROR(yypos, yypos+size yytext))
      end
fun yyAction132 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SHL(yypos, yypos+size yytext))
      end
fun yyAction133 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SHR(yypos, yypos+size yytext))
      end
fun yyAction134 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.PLUSEQ(yypos, yypos+size yytext))
      end
fun yyAction135 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.MINUSEQ(yypos, yypos+size yytext))
      end
fun yyAction136 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.STAREQ(yypos, yypos+size yytext))
      end
fun yyAction137 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SLASHEQ(yypos, yypos+size yytext))
      end
fun yyAction138 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.PERCENTEQ(yypos, yypos+size yytext))
      end
fun yyAction139 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.CARETEQ(yypos, yypos+size yytext))
      end
fun yyAction140 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.ANDEQ(yypos, yypos+size yytext))
      end
fun yyAction141 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.OREQ(yypos, yypos+size yytext))
      end
fun yyAction142 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.EQEQ(yypos, yypos+size yytext))
      end
fun yyAction143 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.NE(yypos, yypos+size yytext))
      end
fun yyAction144 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.GE(yypos, yypos+size yytext))
      end
fun yyAction145 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.LE(yypos, yypos+size yytext))
      end
fun yyAction146 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.RARROW(yypos, yypos+size yytext))
      end
fun yyAction147 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.FATARROW(yypos, yypos+size yytext))
      end
fun yyAction148 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.DOTDOT(yypos, yypos+size yytext))
      end
fun yyAction149 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.PATHSEP(yypos, yypos+size yytext))
      end
fun yyAction150 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.DOT(yypos, yypos+size yytext))
      end
fun yyAction151 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.PLUS(yypos, yypos+size yytext))
      end
fun yyAction152 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.MINUS(yypos, yypos+size yytext))
      end
fun yyAction153 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.STAR(yypos, yypos+size yytext))
      end
fun yyAction154 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SLASH(yypos, yypos+size yytext))
      end
fun yyAction155 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.PERCENT(yypos, yypos+size yytext))
      end
fun yyAction156 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.CARET(yypos, yypos+size yytext))
      end
fun yyAction157 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.NOT(yypos, yypos+size yytext))
      end
fun yyAction158 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.AND(yypos, yypos+size yytext))
      end
fun yyAction159 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.OR(yypos, yypos+size yytext))
      end
fun yyAction160 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.EQ(yypos, yypos+size yytext))
      end
fun yyAction161 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.GT(yypos, yypos+size yytext))
      end
fun yyAction162 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.LE(yypos, yypos+size yytext))
      end
fun yyAction163 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.AT(yypos, yypos+size yytext))
      end
fun yyAction164 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.COMMA(yypos, yypos+size yytext))
      end
fun yyAction165 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.SEMI(yypos, yypos+size yytext))
      end
fun yyAction166 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.COLON(yypos, yypos+size yytext))
      end
fun yyAction167 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.POUND(yypos, yypos+size yytext))
      end
fun yyAction168 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.DOLLAR(yypos, yypos+size yytext))
      end
fun yyAction169 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.QUESTION(yypos, yypos+size yytext))
      end
fun yyAction170 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter>"^yytext); Tokens.LBRACE(yypos, yypos+size yytext))
      end
fun yyAction171 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter>"^yytext); Tokens.RBRACE(yypos, yypos+size yytext))
      end
fun yyAction172 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter>"^yytext); Tokens.LBRACKET(yypos, yypos+size yytext))
      end
fun yyAction173 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter>"^yytext); Tokens.RBRACKET(yypos, yypos+size yytext))
      end
fun yyAction174 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter>"^yytext); Tokens.LPARENT(yypos, yypos+size yytext))
      end
fun yyAction175 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter>"^yytext); Tokens.RPARENT(yypos, yypos+size yytext))
      end
fun yyAction176 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[INITIAL] " ^ yytext); continue())
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81, yyAction82,
  yyAction83, yyAction84, yyAction85, yyAction86, yyAction87, yyAction88,
  yyAction89, yyAction90, yyAction91, yyAction92, yyAction93, yyAction94,
  yyAction95, yyAction96, yyAction97, yyAction98, yyAction99, yyAction100,
  yyAction101, yyAction102, yyAction103, yyAction104, yyAction105, yyAction106,
  yyAction107, yyAction108, yyAction109, yyAction110, yyAction111, yyAction112,
  yyAction113, yyAction114, yyAction115, yyAction116, yyAction117, yyAction118,
  yyAction119, yyAction120, yyAction121, yyAction122, yyAction123, yyAction124,
  yyAction125, yyAction126, yyAction127, yyAction128, yyAction129, yyAction130,
  yyAction131, yyAction132, yyAction133, yyAction134, yyAction135, yyAction136,
  yyAction137, yyAction138, yyAction139, yyAction140, yyAction141, yyAction142,
  yyAction143, yyAction144, yyAction145, yyAction146, yyAction147, yyAction148,
  yyAction149, yyAction150, yyAction151, yyAction152, yyAction153, yyAction154,
  yyAction155, yyAction156, yyAction157, yyAction158, yyAction159, yyAction160,
  yyAction161, yyAction162, yyAction163, yyAction164, yyAction165, yyAction166,
  yyAction167, yyAction168, yyAction169, yyAction170, yyAction171, yyAction172,
  yyAction173, yyAction174, yyAction175, yyAction176])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of STR => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | BYTE => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | SUFFIX => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | R_STR_END => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
        | BR_STR_BEGIN => yygo yyactTable (4, !(yystrm), yyNO_MATCH)
        | BYTE_STR => yygo yyactTable (5, !(yystrm), yyNO_MATCH)
        | LINE_COMMENT => yygo yyactTable (6, !(yystrm), yyNO_MATCH)
        | R_STR => yygo yyactTable (7, !(yystrm), yyNO_MATCH)
        | LIFE_OR_CHAR => yygo yyactTable (8, !(yystrm), yyNO_MATCH)
        | BR_STR_BODY => yygo yyactTable (9, !(yystrm), yyNO_MATCH)
        | R_STR_BEGIN => yygo yyactTable (10, !(yystrm), yyNO_MATCH)
        | R_STR_BODY => yygo yyactTable (11, !(yystrm), yyNO_MATCH)
        | BR_STR => yygo yyactTable (12, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (13, !(yystrm), yyNO_MATCH)
        | BR_STR_END => yygo yyactTable (14, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    end

  end
