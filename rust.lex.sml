functor RustLexFun(structure Tokens: Rust_TOKENS)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
STR | BYTE | SUFFIX | R_STR_END | BLOCK_COMMENT | INNER_LINE_DOC | BR_STR_BEGIN | OUTER_BLOCK_DOC | BYTE_STR | LINE_COMMENT | R_STR | LIFE_OR_CHAR | INNER_BLOCK_DOC | BR_STR_BODY | OUTER_LINE_DOC | R_STR_BEGIN | R_STR_BODY | BR_STR | INITIAL | BR_STR_END
    structure UserDeclarations = 
      struct

(* rust.lex *)
(*
    Token list, for automatic completion.
    EOF
    | AS | BREAK | CONST | CONTINUE | CRATE | ELSE | ENUM | EXTERN     
        | FALSE | FN | FOR | IF | IMPL | IN | LET | LOOP | MATCH | MOD | MOVE
        | MUT | PUB | REF | RETURN | SELFVALUE | SELFTYPE | STATIC | STRUCT 
        | SUPER | TRAIT | TRUE | TYPE | UNSAFE | USE | WHERE | WHILE | DYN
    | ABSTRACT | BECOME | BOX | DO | FINAL | MACRO | OVERRIDE
        | PRIV | TYPEOF | UNSIZED | VIRTUAL | YIELD
        | ASYNC | AWAIT | TRY
    | UNION | STATICLIFETIME
    | IDENT of string
    | CHAR_LIT of int 
        | STR_LIT of string | RAW_STR_LIT of string
        | BYTE_LIT of int | BYTE_STR_LIT of string | RAW_BYTE_STR_LIT of string
        | INTEGER_LIT of LargeInt.int | TUPLE_INDEX of int 
        | FLOAT_LIT of real
    | LIFETIME of string
    | PLUS | MINUS | STAR | SLASH | PERCENT | CARET 
        | NOT | AND | OR | ANDAND | OROR | SHL | SHR
        | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ | CARETEQ | ANDEQ | OREQ
        | SHLEQ | SHREQ | EQ | EQEQ
        | NE | GT | LT | GE | LE
        | AT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ
        | COMMA | SEMI | COLON | PATHSEP | RARROW | FATARROW | POUND | DOLLAR | QUESTION
        | LBRACE | RBRACE | LBRACKET | RBRACKET | LPARENT | RPARENT
*)
(* 
    points:
    handle comments
    handle strings
    error handling
    end-of-file handling
    ...
*)
(*
    Input format: utf-8.
    Identifier: raw_identifier is not supported.
    Whitespace: Not include Characters 
                U+0085 (next line) 
                U+200E (left-to-right mark) 
                U+200F (right-to-left mark)
                U+2028 (line separator)
                U+2029 (paragraph separator)
    isolatedCR: A \r not followed by a \n, for some reasons, which is hard to be represented.
*)
(* user declarations *)
open Convert
type pos = int
type svalue = Tokens.svalue 
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token
type lexarg = string
type arg = lexarg

val lin = ErrorMsg.lin
val col = ErrorMsg.col
val eolpos = ref 0

datatype comments = InnerBlock | OuterBlock | CommonBlock;
val stateStack:comments list ref = ref []
fun statePush(state:comments) = stateStack := state::(!stateStack)
fun statePop(state:comments):bool = case (!stateStack) of
                    (nil) => false
                    | (h::t) => if h = state then (stateStack := t;true) else false

fun error(p1, p2) = ErrorMsg.error p1
fun lexLog(pos, msg) = ErrorMsg.lexLog (pos, msg)

val lsharp = ref 0
val rsharp = ref 0

fun eof(fileName:string) = let val pos = hd(!col) in Tokens.EOF(pos, pos) end

val strList = ref (nil:char list)
val strpos = ref (0:int)
fun strAppend(s:char) = strList := s::(!strList)
fun strMake() = (implode(rev(!strList)) before strList := nil)
fun strPop(nil, _) = nil 
    | strPop(h::t, 0) = h :: t 
    | strPop(h::t, n) = strPop(t, n-1)

fun strip(s, ch) = 
    let
        val chs = rev(String.explode s)
        fun remove(nil) = nil
            | remove(h::t) = if h = ch then remove(t) else h::t
    in
        implode (rev(remove(chs)))
    end

fun toChar(text:string) = 
    let
        val cc = String.explode (text)
        val c = hd(cc)
    in
        (* app print ["char literal: ", Char.toCString c, "\n"]; *)
        c
    end

fun escape(text:string, pos:int) = 
    let
        val chs = String.explode text

        fun hex2dec (nil, v) = v
            | hex2dec (#"a"::t, v) = hex2dec(t, v*16+10)
            | hex2dec (#"A"::t, v) = hex2dec(t, v*16+10)
            | hex2dec (#"b"::t, v) = hex2dec(t, v*16+11)
            | hex2dec (#"B"::t, v) = hex2dec(t, v*16+11)
            | hex2dec (#"c"::t, v) = hex2dec(t, v*16+12)
            | hex2dec (#"C"::t, v) = hex2dec(t, v*16+12)
            | hex2dec (#"d"::t, v) = hex2dec(t, v*16+13)
            | hex2dec (#"D"::t, v) = hex2dec(t, v*16+13)
            | hex2dec (#"e"::t, v) = hex2dec(t, v*16+14)
            | hex2dec (#"E"::t, v) = hex2dec(t, v*16+14)
            | hex2dec (#"f"::t, v) = hex2dec(t, v*16+15)
            | hex2dec (#"F"::t, v) = hex2dec(t, v*16+15)
            | hex2dec (h::t, v) = hex2dec(t, v*16+ (ord h) - (ord #"0"))
        
        fun unicode (nil, v) = v
            | unicode (#"{"::t, v) = unicode(t, v)
            | unicode (#"}"::t, v) = unicode(t, v)
            | unicode (#"_"::t, v) = unicode(t, v)
            | unicode (h::t, v) = unicode(t, v*16+ (ord h) - (ord #"0"))
        (* 
            This function convert char literal to a string for Char.fromString.
            However, Char.fromString can not work when unicode point is in ordinal range of the alphabet.
        *)
        fun convert (nil) = Char.ord #"\000"
            | convert (#"x"::t) = hex2dec(t, 0)
            | convert (#"u"::t) = unicode(t, 0)
            | convert (#"n"::t) = Char.ord #"\n"
            | convert (#"r"::t) = Char.ord #"\r"
            | convert (#"t"::t) = Char.ord #"\t"
            | convert (#"0"::t) = Char.ord #"\000"
            | convert (#"\092"::t) = Char.ord #"\092"
            | convert (#"'"::t) = Char.ord #"'"
            | convert (#"\""::t) = Char.ord #"\""
            | convert (h::t) = Char.ord (toChar(implode([#"\092", h])))
    in
        case chs of
        (#"\092"::t) => convert(t)
        | _ => (ErrorMsg.error pos ("illegal escape " ^ text);0)
    end

fun toInteger(text:string) = case LargeInt.fromString(text) of 
                            SOME v => v
                            | _ => 0
 
fun toFloat(text:string) = case Real.fromString(text) of 
                            SOME v => v
                            | _ => 0.0



      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\t",20),
(#"\v",#"!",20),
(#"#",#"[",20),
(#"]",#"\255",20),
(#"\n",#"\n",21),
(#"\"",#"\"",22),
(#"\\",#"\\",23)], []), ([(#"\^@",#"\b",38),
(#"\v",#"\f",38),
(#"\^N",#"\^_",38),
(#"!",#"&",38),
(#"(",#"[",38),
(#"]",#"\127",38),
(#"\t",#"\t",39),
(#"\r",#"\r",39),
(#" ",#" ",39),
(#"'",#"'",39),
(#"\128",#"\255",39),
(#"\n",#"\n",40),
(#"\\",#"\\",41)], []), ([(#"\^@",#"@",51),
(#"[",#"^",51),
(#"`",#"`",51),
(#"{",#"\255",51),
(#"A",#"Z",52),
(#"_",#"_",52),
(#"a",#"z",52)], []), ([(#"\^@",#"\"",54),
(#"$",#"\255",54),
(#"#",#"#",55)], []), ([(#"\^@",#"\t",56),
(#"\v",#"\f",56),
(#"\^N",#")",56),
(#"+",#".",56),
(#"0",#"\255",56),
(#"\n",#"\n",57),
(#"\r",#"\r",58),
(#"*",#"*",59),
(#"/",#"/",60)], []), ([(#"\^@",#"\t",67),
(#"\v",#"\f",67),
(#"\^N",#"\255",67),
(#"\n",#"\n",68),
(#"\r",#"\r",69)], []), ([(#"\^@",#"\t",70),
(#"\v",#"!",70),
(#"$",#"\255",70),
(#"\n",#"\n",71),
(#"\"",#"\"",72),
(#"#",#"#",73)], []), ([(#"\^@",#"\t",74),
(#"\v",#"\f",74),
(#"\^N",#")",74),
(#"+",#".",74),
(#"0",#"\255",74),
(#"\n",#"\n",75),
(#"\r",#"\r",76),
(#"*",#"*",77),
(#"/",#"/",78)], []), ([(#"\^@",#"\b",80),
(#"\v",#"\f",80),
(#"\^N",#"\^_",80),
(#"!",#"!",80),
(#"#",#"[",80),
(#"]",#"\127",80),
(#"\t",#"\t",81),
(#"\r",#"\r",81),
(#" ",#" ",81),
(#"\128",#"\255",81),
(#"\n",#"\n",82),
(#"\"",#"\"",83),
(#"\\",#"\\",84)], []), ([(#"\^@",#"\t",90),
(#"\v",#"\255",90),
(#"\n",#"\n",91)], []), ([(#"\^@",#"\t",92),
(#"\v",#"!",92),
(#"#",#"\255",92),
(#"\n",#"\n",93),
(#"\"",#"\"",94)], []), ([(#"\^@",#"\t",95),
(#"\v",#"@",95),
(#"[",#"[",95),
(#"]",#"^",95),
(#"`",#"`",95),
(#"{",#"\127",95),
(#"A",#"Z",96),
(#"_",#"_",96),
(#"a",#"z",96),
(#"\\",#"\\",97),
(#"\128",#"\255",98)], []), ([(#"\^@",#"\t",122),
(#"\v",#"\f",122),
(#"\^N",#")",122),
(#"+",#".",122),
(#"0",#"\255",122),
(#"\n",#"\n",123),
(#"\r",#"\r",124),
(#"*",#"*",125),
(#"/",#"/",126)], []), ([(#"\^@",#"\t",128),
(#"\v",#"!",128),
(#"#",#"\127",128),
(#"\n",#"\n",129),
(#"\"",#"\"",130),
(#"\128",#"\255",131)], []), ([(#"\^@",#"\t",133),
(#"\v",#"\f",133),
(#"\^N",#"\255",133),
(#"\n",#"\n",134),
(#"\r",#"\r",135)], []), ([(#"\^@",#"\t",136),
(#"\v",#"!",136),
(#"$",#"\255",136),
(#"\n",#"\n",137),
(#"\"",#"\"",138),
(#"#",#"#",139)], []), ([(#"\^@",#"\t",140),
(#"\v",#"!",140),
(#"#",#"\255",140),
(#"\n",#"\n",141),
(#"\"",#"\"",142)], []), ([(#"\^@",#"\t",144),
(#"\v",#"!",144),
(#"#",#"\127",144),
(#"\n",#"\n",145),
(#"\"",#"\"",146),
(#"\128",#"\255",147)], []), ([(#"\^@",#"\b",148),
(#"\v",#"\f",148),
(#"\^N",#"\^_",148),
(#"\\",#"\\",148),
(#"`",#"`",148),
(#"~",#"\255",148),
(#"\t",#"\t",149),
(#" ",#" ",149),
(#"\n",#"\n",150),
(#"\r",#"\r",151),
(#"!",#"!",152),
(#"\"",#"\"",153),
(#"#",#"#",154),
(#"$",#"$",155),
(#"%",#"%",156),
(#"&",#"&",157),
(#"'",#"'",158),
(#"(",#"(",159),
(#")",#")",160),
(#"*",#"*",161),
(#"+",#"+",162),
(#",",#",",163),
(#"-",#"-",164),
(#".",#".",165),
(#"/",#"/",166),
(#"0",#"0",167),
(#"1",#"9",168),
(#":",#":",169),
(#";",#";",170),
(#"<",#"<",171),
(#"=",#"=",172),
(#">",#">",173),
(#"?",#"?",174),
(#"@",#"@",175),
(#"A",#"R",176),
(#"T",#"Z",176),
(#"g",#"h",176),
(#"j",#"k",176),
(#"n",#"n",176),
(#"q",#"q",176),
(#"x",#"x",176),
(#"z",#"z",176),
(#"S",#"S",177),
(#"[",#"[",178),
(#"]",#"]",179),
(#"^",#"^",180),
(#"_",#"_",181),
(#"a",#"a",182),
(#"b",#"b",183),
(#"c",#"c",184),
(#"d",#"d",185),
(#"e",#"e",186),
(#"f",#"f",187),
(#"i",#"i",188),
(#"l",#"l",189),
(#"m",#"m",190),
(#"o",#"o",191),
(#"p",#"p",192),
(#"r",#"r",193),
(#"s",#"s",194),
(#"t",#"t",195),
(#"u",#"u",196),
(#"v",#"v",197),
(#"w",#"w",198),
(#"y",#"y",199),
(#"{",#"{",200),
(#"|",#"|",201),
(#"}",#"}",202)], [1]), ([(#"\^@",#"\"",431),
(#"$",#"\255",431),
(#"#",#"#",432)], []), ([], [96]), ([], [95]), ([], [90, 96]), ([(#"\n",#"\n",24),
(#" ",#" ",25),
(#"0",#"0",25),
(#"\\",#"\\",25),
(#"n",#"n",25),
(#"r",#"r",25),
(#"t",#"t",25),
(#"\"",#"\"",26),
(#"'",#"'",26),
(#"u",#"u",27),
(#"x",#"x",28)], [96]), ([], [94]), ([], [92]), ([], [91]), ([(#"{",#"{",30)], []), ([(#"0",#"7",29)], []), ([(#"0",#"9",25),
(#"A",#"F",25),
(#"a",#"f",25)], []), ([(#"0",#"9",31),
(#"A",#"F",31),
(#"a",#"f",31)], []), ([(#"0",#"9",32),
(#"A",#"F",32),
(#"a",#"f",32),
(#"_",#"_",31),
(#"}",#"}",33)], []), ([(#"0",#"9",34),
(#"A",#"F",34),
(#"a",#"f",34),
(#"_",#"_",32),
(#"}",#"}",33)], []), ([], [93]), ([(#"0",#"9",35),
(#"A",#"F",35),
(#"a",#"f",35),
(#"_",#"_",34),
(#"}",#"}",33)], []), ([(#"0",#"9",36),
(#"A",#"F",36),
(#"a",#"f",36),
(#"_",#"_",35),
(#"}",#"}",33)], []), ([(#"0",#"9",37),
(#"A",#"F",37),
(#"a",#"f",37),
(#"_",#"_",36),
(#"}",#"}",33)], []), ([(#"_",#"_",37),
(#"}",#"}",33)], []), ([(#"'",#"'",50)], []), ([(#"'",#"'",49)], []), ([(#"'",#"'",48)], []), ([(#" ",#" ",42),
(#"0",#"0",42),
(#"\\",#"\\",42),
(#"n",#"n",42),
(#"r",#"r",42),
(#"t",#"t",42),
(#"'",#"'",43),
(#"x",#"x",44)], []), ([(#"'",#"'",47)], []), ([(#"'",#"'",46)], [116]), ([(#"0",#"9",45),
(#"A",#"F",45),
(#"a",#"f",45)], []), ([(#"0",#"9",42),
(#"A",#"F",42),
(#"a",#"f",42)], []), ([], [112]), ([], [113]), ([], [115]), ([], [116]), ([], [114, 116]), ([], [25, 26]), ([(#"0",#"9",53),
(#"A",#"Z",53),
(#"_",#"_",53),
(#"a",#"z",53)], [24, 25, 26]), ([(#"0",#"9",53),
(#"A",#"Z",53),
(#"_",#"_",53),
(#"a",#"z",53)], [24]), ([], [110]), ([], [109]), ([], [21]), ([], [18]), ([(#"\n",#"\n",57)], [18, 21]), ([(#"/",#"/",66)], [21]), ([(#"*",#"*",61)], [21]), ([(#"!",#"!",62),
(#"*",#"*",63)], [16]), ([], [11]), ([(#"*",#"*",64),
(#"/",#"/",65)], [14]), ([(#"/",#"/",65)], [16]), ([], [13]), ([], [17]), ([], [4]), ([], [3]), ([(#"\n",#"\n",68)], [3, 4]), ([], [134]), ([], [133]), ([], [132, 134]), ([], [131, 134]), ([], [23]), ([], [20]), ([(#"\n",#"\n",75)], [20, 23]), ([(#"/",#"/",79)], [23]), ([(#"*",#"*",61)], [23]), ([], [15]), ([], [119, 124]), ([], [124]), ([], [123]), ([], [118, 124]), ([(#"\n",#"\n",85),
(#" ",#" ",86),
(#"0",#"0",86),
(#"\\",#"\\",86),
(#"n",#"n",86),
(#"r",#"r",86),
(#"t",#"t",86),
(#"\"",#"\"",87),
(#"x",#"x",88)], [119, 124]), ([], [122]), ([], [121]), ([], [120]), ([(#"0",#"9",89),
(#"A",#"F",89),
(#"a",#"f",89)], []), ([(#"0",#"9",86),
(#"A",#"F",86),
(#"a",#"f",86)], []), ([], [10]), ([], [9]), ([], [100]), ([], [99]), ([], [98, 100]), ([(#"'",#"'",99)], []), ([(#"'",#"'",99),
(#"0",#"9",121),
(#"A",#"Z",121),
(#"_",#"_",121),
(#"a",#"z",121)], [83]), ([(#" ",#" ",104),
(#"0",#"0",104),
(#"\\",#"\\",104),
(#"n",#"n",104),
(#"r",#"r",104),
(#"t",#"t",104),
(#"\"",#"\"",105),
(#"'",#"'",106),
(#"u",#"u",107),
(#"x",#"x",108)], []), ([(#"'",#"'",99),
(#"\128",#"\255",100)], []), ([], [87]), ([(#"'",#"'",101),
(#"\128",#"\255",102)], []), ([], [88]), ([(#"'",#"'",101),
(#"\128",#"\255",103)], []), ([(#"'",#"'",101)], []), ([(#"'",#"'",120)], []), ([(#"'",#"'",119)], []), ([(#"'",#"'",119)], [87]), ([(#"{",#"{",110)], []), ([(#"0",#"7",109)], []), ([(#"0",#"9",104),
(#"A",#"F",104),
(#"a",#"f",104)], []), ([(#"0",#"9",111),
(#"A",#"F",111),
(#"a",#"f",111)], []), ([(#"0",#"9",112),
(#"A",#"F",112),
(#"a",#"f",112),
(#"_",#"_",111),
(#"}",#"}",113)], []), ([(#"0",#"9",115),
(#"A",#"F",115),
(#"a",#"f",115),
(#"_",#"_",112),
(#"}",#"}",113)], []), ([(#"'",#"'",114)], []), ([], [86]), ([(#"0",#"9",116),
(#"A",#"F",116),
(#"a",#"f",116),
(#"_",#"_",115),
(#"}",#"}",113)], []), ([(#"0",#"9",117),
(#"A",#"F",117),
(#"a",#"f",117),
(#"_",#"_",116),
(#"}",#"}",113)], []), ([(#"0",#"9",118),
(#"A",#"F",118),
(#"a",#"f",118),
(#"_",#"_",117),
(#"}",#"}",113)], []), ([(#"_",#"_",118),
(#"}",#"}",113)], []), ([], [84]), ([], [85]), ([(#"0",#"9",121),
(#"A",#"Z",121),
(#"_",#"_",121),
(#"a",#"z",121)], [83]), ([], [22]), ([], [19]), ([(#"\n",#"\n",123)], [19, 22]), ([(#"/",#"/",127)], [22]), ([(#"*",#"*",61)], [22]), ([], [12]), ([], [137, 138]), ([], [136, 137]), ([(#"#",#"#",132)], [137, 138]), ([], [138]), ([], [135]), ([], [7]), ([], [6]), ([(#"\n",#"\n",134)], [6, 7]), ([], [105]), ([], [104]), ([], [103, 105]), ([], [102, 105]), ([], [108]), ([], [107]), ([(#"#",#"#",143)], [108]), ([], [106]), ([], [128, 129]), ([], [127, 128]), ([], [126, 128, 129]), ([], [129]), ([], [193]), ([(#"\t",#"\t",430),
(#" ",#" ",430)], [1, 193]), ([], [0]), ([(#"\n",#"\n",150)], [0, 193]), ([(#"=",#"=",429)], [174, 193]), ([], [89, 193]), ([], [184, 193]), ([], [185, 193]), ([(#"=",#"=",428)], [172, 193]), ([(#"&",#"&",426),
(#"=",#"=",427)], [175, 193]), ([], [81, 193]), ([], [191, 193]), ([], [192, 193]), ([(#"=",#"=",425)], [170, 193]), ([(#"=",#"=",424)], [168, 193]), ([], [181, 193]), ([(#"=",#"=",422),
(#">",#">",423)], [169, 193]), ([(#".",#".",419)], [167, 193]), ([(#"*",#"*",61),
(#"/",#"/",414),
(#"=",#"=",415)], [171, 193]), ([(#".",#".",389),
(#"0",#"9",390),
(#"_",#"_",390),
(#"E",#"E",391),
(#"e",#"e",391),
(#"b",#"b",408),
(#"f",#"f",392),
(#"i",#"i",393),
(#"u",#"u",393),
(#"o",#"o",409),
(#"x",#"x",410)], [141, 193]), ([(#".",#".",389),
(#"0",#"9",390),
(#"_",#"_",390),
(#"E",#"E",391),
(#"e",#"e",391),
(#"f",#"f",392),
(#"i",#"i",393),
(#"u",#"u",393)], [141, 193]), ([(#":",#":",388)], [183, 193]), ([], [182, 193]), ([(#"<",#"<",385),
(#"=",#"=",386)], [179, 193]), ([(#"=",#"=",383),
(#">",#">",384)], [177, 193]), ([(#"=",#"=",380),
(#">",#">",381)], [178, 193]), ([], [186, 193]), ([], [180, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",377)], [80, 193]), ([], [189, 193]), ([], [190, 193]), ([(#"=",#"=",376)], [173, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [27, 80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"a",205),
(#"c",#"r",205),
(#"t",#"v",205),
(#"x",#"z",205),
(#"b",#"b",361),
(#"s",#"s",362),
(#"w",#"w",363)], [80, 193]), ([(#"\"",#"\"",346),
(#"'",#"'",347),
(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"n",205),
(#"p",#"q",205),
(#"s",#"z",205),
(#"e",#"e",348),
(#"o",#"o",349),
(#"r",#"r",350)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"q",205),
(#"s",#"z",205),
(#"o",#"o",333),
(#"r",#"r",334)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"x",205),
(#"z",#"z",205),
(#"o",#"o",330),
(#"y",#"y",331)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"m",205),
(#"o",#"w",205),
(#"y",#"z",205),
(#"l",#"l",319),
(#"n",#"n",320),
(#"x",#"x",321)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"h",205),
(#"j",#"m",205),
(#"p",#"z",205),
(#"a",#"a",308),
(#"i",#"i",309),
(#"n",#"n",310),
(#"o",#"o",311)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"e",205),
(#"g",#"l",205),
(#"o",#"z",205),
(#"f",#"f",303),
(#"m",#"m",304),
(#"n",#"n",305)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"n",205),
(#"p",#"z",205),
(#"e",#"e",298),
(#"o",#"o",299)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"n",205),
(#"p",#"t",205),
(#"v",#"z",205),
(#"a",#"a",285),
(#"o",#"o",286),
(#"u",#"u",287)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"u",205),
(#"w",#"z",205),
(#"v",#"v",278)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"t",205),
(#"v",#"z",205),
(#"r",#"r",273),
(#"u",#"u",274)], [80, 193]), ([(#"\"",#"\"",265),
(#"#",#"#",266),
(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",267)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"s",205),
(#"v",#"z",205),
(#"e",#"e",249),
(#"t",#"t",250),
(#"u",#"u",251)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"x",205),
(#"z",#"z",205),
(#"r",#"r",237),
(#"y",#"y",238)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"r",205),
(#"t",#"z",205),
(#"n",#"n",223),
(#"s",#"s",224)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",217)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"g",205),
(#"i",#"z",205),
(#"h",#"h",210)], [80, 193]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",206)], [80, 193]), ([], [187, 193]), ([(#"=",#"=",203),
(#"|",#"|",204)], [176, 193]), ([], [188, 193]), ([], [158]), ([], [148]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",207)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",208)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"c",205),
(#"e",#"z",205),
(#"d",#"d",209)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [75, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"h",205),
(#"j",#"z",205),
(#"e",#"e",211),
(#"i",#"i",212)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",215)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",213)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",214)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [62, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",216)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [61, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",218)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",219)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"t",205),
(#"v",#"z",205),
(#"u",#"u",220)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"z",205),
(#"a",#"a",221)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",222)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [74, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"r",205),
(#"t",#"z",205),
(#"i",#"i",226),
(#"s",#"s",227)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",225)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [60, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"z",205),
(#"o",#"o",235)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"h",205),
(#"j",#"z",205),
(#"a",#"a",228),
(#"i",#"i",229)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"e",205),
(#"g",#"z",205),
(#"f",#"f",233)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"y",205),
(#"z",#"z",230)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",231)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"c",205),
(#"e",#"z",205),
(#"d",#"d",232)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [73, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",234)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [59, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",236)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [79, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"t",205),
(#"v",#"x",205),
(#"z",#"z",205),
(#"a",#"a",243),
(#"u",#"u",244),
(#"y",#"y",245)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"o",205),
(#"q",#"z",205),
(#"p",#"p",239)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",240)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"z",205),
(#"o",#"o",241)], [58, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"e",205),
(#"g",#"z",205),
(#"f",#"f",242)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [72, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",247)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",246)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [78, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [57, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",248)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [56, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",263)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"q",205),
(#"s",#"z",205),
(#"a",#"a",255),
(#"r",#"r",256)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"o",205),
(#"q",#"z",205),
(#"p",#"p",252)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",253)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",254)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [55, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",260)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"t",205),
(#"v",#"z",205),
(#"u",#"u",257)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"z",205),
(#"c",#"c",258)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",259)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [54, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",261)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"z",205),
(#"c",#"c",262)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [53, 80, 82]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"e",205),
(#"g",#"z",205),
(#"f",#"f",264)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [51, 80]), ([], [97]), ([], [101]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"e",205),
(#"g",#"s",205),
(#"u",#"z",205),
(#"f",#"f",268),
(#"t",#"t",269)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [49, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"t",205),
(#"v",#"z",205),
(#"u",#"u",270)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",271)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",272)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [50, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",276)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"a",205),
(#"c",#"z",205),
(#"b",#"b",275)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [48, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"u",205),
(#"w",#"z",205),
(#"v",#"v",277)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [71, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",279)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",280)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",281)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",282)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"c",205),
(#"e",#"z",205),
(#"d",#"d",283)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",284)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [70, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"s",205),
(#"u",#"z",205),
(#"c",#"c",292),
(#"t",#"t",293)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"c",205),
(#"e",#"u",205),
(#"w",#"z",205),
(#"d",#"d",289),
(#"v",#"v",290)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",288)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [47, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [45, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",291)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [46, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",296)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"z",205),
(#"c",#"c",294)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"g",205),
(#"i",#"z",205),
(#"h",#"h",295)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [44, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"z",205),
(#"o",#"o",297)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [69, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",302)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"z",205),
(#"o",#"o",300)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"o",205),
(#"q",#"z",205),
(#"p",#"p",301)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [43, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [42, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [39, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"o",205),
(#"q",#"z",205),
(#"p",#"p",306)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [41, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",307)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [40, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",316)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",313)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [37, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",312)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [38, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"z",205),
(#"a",#"a",314)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",315)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [68, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"r",205),
(#"t",#"z",205),
(#"s",#"s",317)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",318)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [36, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"r",205),
(#"t",#"z",205),
(#"s",#"s",328)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"t",205),
(#"v",#"z",205),
(#"u",#"u",326)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",322)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",323)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",324)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",325)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [35, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"l",205),
(#"n",#"z",205),
(#"m",#"m",327)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [34, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",329)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [33, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [67, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",332)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [63, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",338)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"z",205),
(#"a",#"a",335)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",336)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",337)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [32, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"r",205),
(#"u",#"z",205),
(#"s",#"s",339),
(#"t",#"t",340)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",345)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",341)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",342)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"t",205),
(#"v",#"z",205),
(#"u",#"u",343)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",344)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [31, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [30, 80]), ([], [117]), ([], [111]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"z",205),
(#"c",#"c",357)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"w",205),
(#"y",#"z",205),
(#"x",#"x",356)], [80]), ([(#"\"",#"\"",351),
(#"#",#"#",352),
(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",353)], [80]), ([], [125]), ([], [130]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"z",205),
(#"a",#"a",354)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"j",205),
(#"l",#"z",205),
(#"k",#"k",355)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [29, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [66, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"n",205),
(#"p",#"z",205),
(#"o",#"o",358)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"l",205),
(#"n",#"z",205),
(#"m",#"m",359)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"d",205),
(#"f",#"z",205),
(#"e",#"e",360)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [65, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"r",205),
(#"t",#"z",205),
(#"s",#"s",370)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"x",205),
(#"z",#"z",205),
(#"y",#"y",367)], [28, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"z",205),
(#"a",#"a",364)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"h",205),
(#"j",#"z",205),
(#"i",#"i",365)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",366)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [77, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"m",205),
(#"o",#"z",205),
(#"n",#"n",368)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"z",205),
(#"c",#"c",369)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [76, 80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",371)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"q",205),
(#"s",#"z",205),
(#"r",#"r",372)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"b",#"z",205),
(#"a",#"a",373)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"b",205),
(#"d",#"z",205),
(#"c",#"c",374)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"s",205),
(#"u",#"z",205),
(#"t",#"t",375)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [64, 80]), ([], [156]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"k",205),
(#"m",#"z",205),
(#"l",#"l",378)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"e",205),
(#"g",#"z",205),
(#"f",#"f",379)], [80]), ([(#"0",#"9",205),
(#"A",#"Z",205),
(#"_",#"_",205),
(#"a",#"z",205)], [52, 80]), ([], [161]), ([(#"=",#"=",382)], [150]), ([], [144]), ([], [159]), ([], [164]), ([(#"=",#"=",387)], [149]), ([], [162]), ([], [143]), ([], [166]), ([(#"0",#"9",407)], [142]), ([(#".",#".",389),
(#"0",#"9",390),
(#"_",#"_",390),
(#"E",#"E",391),
(#"e",#"e",391),
(#"f",#"f",392),
(#"i",#"i",393),
(#"u",#"u",393)], [141]), ([(#"+",#"+",405),
(#"-",#"-",405),
(#"_",#"_",405),
(#"0",#"9",406)], []), ([(#"3",#"3",402),
(#"6",#"6",403)], []), ([(#"1",#"1",394),
(#"3",#"3",395),
(#"6",#"6",396),
(#"8",#"8",397),
(#"s",#"s",398)], []), ([(#"2",#"2",401),
(#"6",#"6",397)], []), ([(#"2",#"2",397)], []), ([(#"4",#"4",397)], []), ([], [141]), ([(#"i",#"i",399)], []), ([(#"z",#"z",400)], []), ([(#"e",#"e",397)], []), ([(#"8",#"8",397)], []), ([(#"2",#"2",404)], []), ([(#"4",#"4",404)], []), ([], [142]), ([(#"0",#"9",406),
(#"_",#"_",405)], []), ([(#"0",#"9",406),
(#"_",#"_",406),
(#"f",#"f",392)], [142]), ([(#"0",#"9",407),
(#"_",#"_",407),
(#"E",#"E",391),
(#"e",#"e",391),
(#"f",#"f",392)], [142]), ([(#"0",#"1",413),
(#"_",#"_",408)], []), ([(#"0",#"7",412),
(#"_",#"_",409)], []), ([(#"0",#"9",411),
(#"A",#"F",411),
(#"a",#"f",411),
(#"_",#"_",410)], []), ([(#"0",#"9",411),
(#"A",#"F",411),
(#"_",#"_",411),
(#"a",#"f",411),
(#"i",#"i",393),
(#"u",#"u",393)], [141]), ([(#"0",#"7",412),
(#"_",#"_",412),
(#"i",#"i",393),
(#"u",#"u",393)], [141]), ([(#"0",#"1",413),
(#"_",#"_",413),
(#"i",#"i",393),
(#"u",#"u",393)], [141]), ([(#"!",#"!",416),
(#"/",#"/",417)], [8]), ([], [154]), ([], [2]), ([(#"/",#"/",418)], [5]), ([], [8]), ([(#".",#".",420),
(#"=",#"=",421)], [165]), ([], [145]), ([], [146]), ([], [152]), ([], [163]), ([], [151]), ([], [153]), ([], [147]), ([], [157]), ([], [155]), ([], [160]), ([(#"\t",#"\t",430),
(#" ",#" ",430)], [1]), ([], [140]), ([], [139])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as (fileName:string)) () = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "INNER_LINE_DOC"); YYBEGIN INNER_LINE_DOC; continue()))
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "OUTER_LINE_DOC"); YYBEGIN OUTER_LINE_DOC; continue()))
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "LINE_COMMENT"); YYBEGIN LINE_COMMENT; continue()))
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "INNER_BLOCK_DOC"); YYBEGIN INNER_BLOCK_DOC; statePush(InnerBlock); continue()))
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                        (
                                            if not (statePop(InnerBlock)) then
                                                ErrorMsg.error yypos "INNER_BLOCK_DOC does not match."
                                            else ()
                                        );
                                        (
                                            case (!stateStack) 
                                                of (nil) => YYBEGIN INITIAL
                                                | (CommonBlock::t) => YYBEGIN BLOCK_COMMENT
                                                | (InnerBlock::t) => YYBEGIN INNER_BLOCK_DOC
                                                | (OuterBlock::t) => YYBEGIN OUTER_BLOCK_DOC
                                        );
                                        continue()
                                    ))
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "BLOCK_COMMENT"); continue()))
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "OUTER_BLOCK_DOC"); YYBEGIN OUTER_BLOCK_DOC; statePush(OuterBlock); continue()))
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                        (
                                            if not (statePop(OuterBlock)) then
                                                ErrorMsg.error yypos "OUTER_BLOCK_DOC does not match."
                                            else ()
                                        );
                                        (
                                            case (!stateStack) 
                                                of (nil) => YYBEGIN INITIAL
                                                | (CommonBlock::t) => YYBEGIN BLOCK_COMMENT
                                                | (InnerBlock::t) => YYBEGIN INNER_BLOCK_DOC
                                                | (OuterBlock::t) => YYBEGIN OUTER_BLOCK_DOC
                                        );
                                        continue()
                                    ))
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "BLOCK_COMMENT"); YYBEGIN BLOCK_COMMENT; statePush(CommonBlock); continue()))
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                         (
                                            if not (statePop(CommonBlock)) then
                                                ErrorMsg.error yypos "BLOCK_COMMENT does not match."
                                            else ()
                                        );
                                        (
                                            case (!stateStack) 
                                                of (nil) => YYBEGIN INITIAL
                                                | (CommonBlock::t) => YYBEGIN BLOCK_COMMENT
                                                | (InnerBlock::t) => YYBEGIN INNER_BLOCK_DOC
                                                | (OuterBlock::t) => YYBEGIN OUTER_BLOCK_DOC

                                        );
                                        continue()
                                    ))
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; continue()))
fun yyAction25 (strm, lastMatch : yymatch) = let
      val oldStrm = !(yystrm)
      fun REJECT () = (yystrm := oldStrm; yystuck(lastMatch))
      in
        yystrm := strm; (YYBEGIN INITIAL; REJECT())
      end
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "break"); YYBEGIN INITIAL; continue()))
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation>"^yytext); Tokens.UNDERSCORE(yypos, yypos+size yytext))
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.AS(yypos, yypos+size yytext))
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.BREAK(yypos, yypos+size yytext))
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.CONST(yypos, yypos+size yytext))
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.CONTINUE(yypos, yypos+size yytext))
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.CARET(yypos, yypos+size yytext))
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ELSE(yypos, yypos+size yytext))
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ENUM(yypos, yypos+size yytext))
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.EXTERN(yypos, yypos+size yytext))
      end
fun yyAction36 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FALSE(yypos, yypos+size yytext))
      end
fun yyAction37 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FN(yypos, yypos+size yytext))
      end
fun yyAction38 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FOR(yypos, yypos+size yytext))
      end
fun yyAction39 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IF(yypos, yypos+size yytext))
      end
fun yyAction40 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IMPL(yypos, yypos+size yytext))
      end
fun yyAction41 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.IN(yypos, yypos+size yytext))
      end
fun yyAction42 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.LET(yypos, yypos+size yytext))
      end
fun yyAction43 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.LOOP(yypos, yypos+size yytext))
      end
fun yyAction44 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MATCH(yypos, yypos+size yytext))
      end
fun yyAction45 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MOD(yypos, yypos+size yytext))
      end
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MOVE(yypos, yypos+size yytext))
      end
fun yyAction47 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MUT(yypos, yypos+size yytext))
      end
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.PUB(yypos, yypos+size yytext))
      end
fun yyAction49 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.REF(yypos, yypos+size yytext))
      end
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.RETURN(yypos, yypos+size yytext))
      end
fun yyAction51 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.SELFVALUE(yypos, yypos+size yytext))
      end
fun yyAction52 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.SELFTYPE(yypos, yypos+size yytext))
      end
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.STATIC(yypos, yypos+size yytext))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.STRUCT(yypos, yypos+size yytext))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.SUPER(yypos, yypos+size yytext))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TRAIT(yypos, yypos+size yytext))
      end
fun yyAction57 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TRUE(yypos, yypos+size yytext))
      end
fun yyAction58 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TYPE(yypos, yypos+size yytext))
      end
fun yyAction59 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.UNSAFE(yypos, yypos+size yytext))
      end
fun yyAction60 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.USE(yypos, yypos+size yytext))
      end
fun yyAction61 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.WHERE(yypos, yypos+size yytext))
      end
fun yyAction62 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.WHILE(yypos, yypos+size yytext))
      end
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.DYN(yypos, yypos+size yytext))
      end
fun yyAction64 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ABSTRACT(yypos, yypos+size yytext))
      end
fun yyAction65 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.BECOME(yypos, yypos+size yytext))
      end
fun yyAction66 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.BOX(yypos, yypos+size yytext))
      end
fun yyAction67 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.DO(yypos, yypos+size yytext))
      end
fun yyAction68 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.FINAL(yypos, yypos+size yytext))
      end
fun yyAction69 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.MACRO(yypos, yypos+size yytext))
      end
fun yyAction70 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.OVERRIDE(yypos, yypos+size yytext))
      end
fun yyAction71 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.PRIV(yypos, yypos+size yytext))
      end
fun yyAction72 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TYPEOF(yypos, yypos+size yytext))
      end
fun yyAction73 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.UNSIZED(yypos, yypos+size yytext))
      end
fun yyAction74 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.VIRTUAL(yypos, yypos+size yytext))
      end
fun yyAction75 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.YIELD(yypos, yypos+size yytext))
      end
fun yyAction76 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.ASYNC(yypos, yypos+size yytext))
      end
fun yyAction77 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.AWAIT(yypos, yypos+size yytext))
      end
fun yyAction78 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.TRY(yypos, yypos+size yytext))
      end
fun yyAction79 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, yytext); Tokens.UNION(yypos, yypos+size yytext))
      end
fun yyAction80 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Identifier> "^yytext); Tokens.IDENT(yytext, yypos, yypos+size yytext))
      end
fun yyAction81 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN LIFE_OR_CHAR; lexLog(yypos, "<Char>"); continue()))
fun yyAction82 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); Tokens.STATICLIFETIME(yypos, yypos+size yytext))
      end
fun yyAction83 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext);
                                        (* lifetime_token or loop_label *)
                                        Tokens.LIFETIME(yytext, yypos, yypos-1+size yytext); continue())
      end
fun yyAction84 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(escape(strip(yytext, #"'"), yypos), yypos, yypos-1+size yytext); continue())
      end
fun yyAction85 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(escape(strip(yytext, #"'"), yypos), yypos, yypos-1+size yytext); continue())
      end
fun yyAction86 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(escape(strip(yytext, #"'"), yypos), yypos, yypos-1+size yytext); continue())
      end
fun yyAction87 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext); 
                                        Tokens.CHAR_LIT(Char.ord(toChar(strip(yytext, #"'"))), yypos, yypos-1+size yytext); continue())
      end
fun yyAction88 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; lexLog(yypos, yytext);
                                        Tokens.CHAR_LIT(decodeChar(strip(yytext, #"'"), UTF8), yypos, yypos-1+size yytext); continue())
      end
fun yyAction89 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<String>"); continue()))
fun yyAction90 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.STR_LIT(strMake(), !strpos, yypos); continue()))
fun yyAction91 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(Char.chr(escape(yytext, yypos))); continue())
      end
fun yyAction92 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(Char.chr(escape(yytext, yypos))); continue())
      end
fun yyAction93 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                (* here is a bug. This will raise a exception 
                                when unicode point is bigger than 255 *)
                                strAppend(Char.chr(escape(yytext, yypos))); 
                                continue()
                            )
      end
fun yyAction94 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "String \\n"); lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction95 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(toChar(yytext)); lin := !lin+1; col := yypos :: !col; continue())
      end
fun yyAction96 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar(yytext)); continue())
      end
fun yyAction97 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN R_STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<Raw string>"); continue()))
fun yyAction98 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.RAW_STR_LIT(strMake(), !strpos, yypos)))
fun yyAction99 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction100 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction101 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN R_STR_BEGIN; lsharp := 1; rsharp := 0; lexLog(yypos, "<Raw string(#)>"); continue()))
fun yyAction102 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lsharp := !lsharp+1; continue()))
fun yyAction103 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN R_STR_BODY; continue()))
fun yyAction104 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; 
                                ErrorMsg.error yypos ("illegal character[R_STR_BEGIN] " ^ yytext);
                                continue())
      end
fun yyAction105 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[R_STR_BEGIN] " ^ yytext); continue())
      end
fun yyAction106 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                app strAppend [#"\"", #"#"];
                                rsharp := 1;
                                if !rsharp = !lsharp then
                                    (YYBEGIN INITIAL;
                                    strList := strPop(!strList, !rsharp+1);
                                    lexLog(!strpos,strMake());
                                    Tokens.RAW_STR_LIT(strMake(), !strpos, yypos))
                                else
                                    (YYBEGIN R_STR_END;
                                    continue())
                            ))
fun yyAction107 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction108 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction109 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                strAppend(toChar yytext);
                                rsharp := !rsharp+1;
                                if !lsharp = !rsharp then
                                    (YYBEGIN INITIAL;
                                    strList := strPop(!strList, !rsharp+1);
                                    lexLog(!strpos,strMake());
                                    Tokens.RAW_STR_LIT(strMake(), !strpos, yypos))
                                else
                                    (continue())
                            )
      end
fun yyAction110 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                strAppend(toChar yytext);
                                YYBEGIN R_STR_BODY;
                                rsharp := 0;
                                continue()
                            )
      end
fun yyAction111 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BYTE; lexLog(yypos, "<Byte char>"); continue()))
fun yyAction112 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                YYBEGIN INITIAL; 
                                lexLog(yypos, yytext); 
                                Tokens.BYTE_LIT(escape(strip(yytext, #"'"), yypos), yypos, yypos+size yytext)
                            )
      end
fun yyAction113 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                YYBEGIN INITIAL; 
                                lexLog(yypos, yytext); 
                                Tokens.BYTE_LIT(escape(strip(yytext, #"'"), yypos), yypos, yypos+size yytext)
                            )
      end
fun yyAction114 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                YYBEGIN INITIAL; 
                                lexLog(yypos, yytext);
                                Tokens.BYTE_LIT(Char.ord(toChar(strip(yytext, #"'"))), yypos, yypos+size yytext)
                            )
      end
fun yyAction115 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction116 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (YYBEGIN INITIAL; ErrorMsg.error yypos ("illegal character[BYTE] " ^ yytext); continue())
      end
fun yyAction117 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BYTE_STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<Byte string>"); continue()))
fun yyAction118 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.BYTE_STR_LIT(strMake(), !strpos, yypos); continue()))
fun yyAction119 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar(yytext)); continue())
      end
fun yyAction120 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(Char.chr(escape(yytext, yypos))); continue())
      end
fun yyAction121 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(Char.chr(escape(yytext, yypos))); continue())
      end
fun yyAction122 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lexLog(yypos, "String \\n"); lin := !lin+1; col := yypos :: !col; continue()))
fun yyAction123 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (strAppend(toChar(yytext)); lin := !lin+1; col := yypos :: !col; continue())
      end
fun yyAction124 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar(yytext)); continue())
      end
fun yyAction125 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BR_STR; strList:=nil; strpos:=yypos; lexLog(yypos, "<Raw byte string>"); continue()))
fun yyAction126 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; lexLog(!strpos,strMake()); Tokens.RAW_BYTE_STR_LIT(strMake(), !strpos, yypos)))
fun yyAction127 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction128 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction129 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[BR_STR] " ^ yytext); continue())
      end
fun yyAction130 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BR_STR_BEGIN; lsharp := 1; rsharp := 0; lexLog(yypos, "<Raw byte string(#)>"); continue()))
fun yyAction131 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lsharp := !lsharp+1; continue()))
fun yyAction132 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN BR_STR_BODY; continue()))
fun yyAction133 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; 
                                     ErrorMsg.error yypos ("illegal character[BR_STR_BEGIN] " ^ yytext);
                                    continue())
      end
fun yyAction134 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[BR_STR_BEGIN] " ^ yytext); continue())
      end
fun yyAction135 (strm, lastMatch : yymatch) = (yystrm := strm;
      (
                                app strAppend [#"\"", #"#"];
                                rsharp := 1;
                                if !rsharp = !lsharp then
                                    (YYBEGIN INITIAL;
                                    strList := strPop(!strList, !rsharp+1);
                                    lexLog(!strpos,strMake());
                                    Tokens.RAW_BYTE_STR_LIT(strMake(), !strpos, yypos))
                                else
                                    (YYBEGIN BR_STR_END;
                                    continue())
                            ))
fun yyAction136 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lin := !lin+1; col := yypos :: !col; strAppend(toChar yytext); continue())
      end
fun yyAction137 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (strAppend(toChar yytext); continue())
      end
fun yyAction138 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[BR_STR_BODY] " ^ yytext); continue())
      end
fun yyAction139 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                    strAppend(toChar yytext);
                                    rsharp := !rsharp+1;
                                    if !lsharp = !rsharp then
                                        (YYBEGIN INITIAL;
                                        strList := strPop(!strList, !rsharp+1);
                                        lexLog(!strpos,strMake());
                                        Tokens.RAW_STR_LIT(strMake(), !strpos, yypos))
                                    else
                                        (continue())
                            )
      end
fun yyAction140 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                (if (toChar yytext) < #"\128" then
                                    strAppend(toChar yytext)
                                else
                                    (ErrorMsg.error yypos ("illegal character[BR_STR_END] " ^ yytext))
                                );
                                (
                                    if (toChar yytext) = #"\n" then 
                                        (lin := !lin + 1; col := yypos :: !col)
                                    else
                                        ()
                                );
                                YYBEGIN BR_STR_BODY;
                                rsharp := 0;
                                continue()
                            )
      end
fun yyAction141 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                lexLog(yypos, "<Integer> "^yytext); 
                                Tokens.INTEGER_LIT(toInteger(yytext), yypos, yypos+size yytext)
                            )
      end
fun yyAction142 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (
                                lexLog(yypos, "<Float> "^yytext); 
                                Tokens.FLOAT_LIT(toFloat(yytext), yypos, yypos+size yytext)
                            )
      end
fun yyAction143 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SHLEQ(yypos, yypos+size yytext))
      end
fun yyAction144 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SHREQ(yypos, yypos+size yytext))
      end
fun yyAction145 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.DOTDOTDOT(yypos, yypos+size yytext))
      end
fun yyAction146 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.DOTDOTEQ(yypos, yypos+size yytext))
      end
fun yyAction147 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.ANDAND(yypos, yypos+size yytext))
      end
fun yyAction148 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.OROR(yypos, yypos+size yytext))
      end
fun yyAction149 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SHL(yypos, yypos+size yytext))
      end
fun yyAction150 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SHR(yypos, yypos+size yytext))
      end
fun yyAction151 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.PLUSEQ(yypos, yypos+size yytext))
      end
fun yyAction152 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.MINUSEQ(yypos, yypos+size yytext))
      end
fun yyAction153 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.STAREQ(yypos, yypos+size yytext))
      end
fun yyAction154 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SLASHEQ(yypos, yypos+size yytext))
      end
fun yyAction155 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.PERCENTEQ(yypos, yypos+size yytext))
      end
fun yyAction156 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.CARETEQ(yypos, yypos+size yytext))
      end
fun yyAction157 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.ANDEQ(yypos, yypos+size yytext))
      end
fun yyAction158 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.OREQ(yypos, yypos+size yytext))
      end
fun yyAction159 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.EQEQ(yypos, yypos+size yytext))
      end
fun yyAction160 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.NE(yypos, yypos+size yytext))
      end
fun yyAction161 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.GE(yypos, yypos+size yytext))
      end
fun yyAction162 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.LE(yypos, yypos+size yytext))
      end
fun yyAction163 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.RARROW(yypos, yypos+size yytext))
      end
fun yyAction164 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.FATARROW(yypos, yypos+size yytext))
      end
fun yyAction165 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.DOTDOT(yypos, yypos+size yytext))
      end
fun yyAction166 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.PATHSEP(yypos, yypos+size yytext))
      end
fun yyAction167 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.DOT(yypos, yypos+size yytext))
      end
fun yyAction168 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.PLUS(yypos, yypos+size yytext))
      end
fun yyAction169 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.MINUS(yypos, yypos+size yytext))
      end
fun yyAction170 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.STAR(yypos, yypos+size yytext))
      end
fun yyAction171 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SLASH(yypos, yypos+size yytext))
      end
fun yyAction172 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.PERCENT(yypos, yypos+size yytext))
      end
fun yyAction173 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.CARET(yypos, yypos+size yytext))
      end
fun yyAction174 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.NOT(yypos, yypos+size yytext))
      end
fun yyAction175 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.AND(yypos, yypos+size yytext))
      end
fun yyAction176 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.OR(yypos, yypos+size yytext))
      end
fun yyAction177 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.EQ(yypos, yypos+size yytext))
      end
fun yyAction178 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.GT(yypos, yypos+size yytext))
      end
fun yyAction179 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.LE(yypos, yypos+size yytext))
      end
fun yyAction180 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.AT(yypos, yypos+size yytext))
      end
fun yyAction181 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.COMMA(yypos, yypos+size yytext))
      end
fun yyAction182 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.SEMI(yypos, yypos+size yytext))
      end
fun yyAction183 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.COLON(yypos, yypos+size yytext))
      end
fun yyAction184 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.POUND(yypos, yypos+size yytext))
      end
fun yyAction185 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.DOLLAR(yypos, yypos+size yytext))
      end
fun yyAction186 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Punctuation> "^yytext); Tokens.QUESTION(yypos, yypos+size yytext))
      end
fun yyAction187 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter> "^yytext); Tokens.LBRACE(yypos, yypos+size yytext))
      end
fun yyAction188 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter> "^yytext); Tokens.RBRACE(yypos, yypos+size yytext))
      end
fun yyAction189 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter> "^yytext); Tokens.LBRACKET(yypos, yypos+size yytext))
      end
fun yyAction190 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter> "^yytext); Tokens.RBRACKET(yypos, yypos+size yytext))
      end
fun yyAction191 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter> "^yytext); Tokens.LPARENT(yypos, yypos+size yytext))
      end
fun yyAction192 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (lexLog(yypos, "<Delimiter> "^yytext); Tokens.RPARENT(yypos, yypos+size yytext))
      end
fun yyAction193 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character[INITIAL] " ^ yytext); continue())
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81, yyAction82,
  yyAction83, yyAction84, yyAction85, yyAction86, yyAction87, yyAction88,
  yyAction89, yyAction90, yyAction91, yyAction92, yyAction93, yyAction94,
  yyAction95, yyAction96, yyAction97, yyAction98, yyAction99, yyAction100,
  yyAction101, yyAction102, yyAction103, yyAction104, yyAction105, yyAction106,
  yyAction107, yyAction108, yyAction109, yyAction110, yyAction111, yyAction112,
  yyAction113, yyAction114, yyAction115, yyAction116, yyAction117, yyAction118,
  yyAction119, yyAction120, yyAction121, yyAction122, yyAction123, yyAction124,
  yyAction125, yyAction126, yyAction127, yyAction128, yyAction129, yyAction130,
  yyAction131, yyAction132, yyAction133, yyAction134, yyAction135, yyAction136,
  yyAction137, yyAction138, yyAction139, yyAction140, yyAction141, yyAction142,
  yyAction143, yyAction144, yyAction145, yyAction146, yyAction147, yyAction148,
  yyAction149, yyAction150, yyAction151, yyAction152, yyAction153, yyAction154,
  yyAction155, yyAction156, yyAction157, yyAction158, yyAction159, yyAction160,
  yyAction161, yyAction162, yyAction163, yyAction164, yyAction165, yyAction166,
  yyAction167, yyAction168, yyAction169, yyAction170, yyAction171, yyAction172,
  yyAction173, yyAction174, yyAction175, yyAction176, yyAction177, yyAction178,
  yyAction179, yyAction180, yyAction181, yyAction182, yyAction183, yyAction184,
  yyAction185, yyAction186, yyAction187, yyAction188, yyAction189, yyAction190,
  yyAction191, yyAction192, yyAction193])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of STR => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | BYTE => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | SUFFIX => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | R_STR_END => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
        | BLOCK_COMMENT => yygo yyactTable (4, !(yystrm), yyNO_MATCH)
        | INNER_LINE_DOC => yygo yyactTable (5, !(yystrm), yyNO_MATCH)
        | BR_STR_BEGIN => yygo yyactTable (6, !(yystrm), yyNO_MATCH)
        | OUTER_BLOCK_DOC => yygo yyactTable (7, !(yystrm), yyNO_MATCH)
        | BYTE_STR => yygo yyactTable (8, !(yystrm), yyNO_MATCH)
        | LINE_COMMENT => yygo yyactTable (9, !(yystrm), yyNO_MATCH)
        | R_STR => yygo yyactTable (10, !(yystrm), yyNO_MATCH)
        | LIFE_OR_CHAR => yygo yyactTable (11, !(yystrm), yyNO_MATCH)
        | INNER_BLOCK_DOC => yygo yyactTable (12, !(yystrm), yyNO_MATCH)
        | BR_STR_BODY => yygo yyactTable (13, !(yystrm), yyNO_MATCH)
        | OUTER_LINE_DOC => yygo yyactTable (14, !(yystrm), yyNO_MATCH)
        | R_STR_BEGIN => yygo yyactTable (15, !(yystrm), yyNO_MATCH)
        | R_STR_BODY => yygo yyactTable (16, !(yystrm), yyNO_MATCH)
        | BR_STR => yygo yyactTable (17, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (18, !(yystrm), yyNO_MATCH)
        | BR_STR_END => yygo yyactTable (19, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    end

  end
